
Software_V3_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800ab48  0800ab48  0000bb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b014  0800b014  0000c014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b01c  0800b01c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b01c  0800b01c  0000c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b024  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001d4  0800b1f8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800b1f8  0000d448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdde  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270d  00000000  00000000  0001cfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a82  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002773a  00000000  00000000  00020f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c4  00000000  00000000  00048674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec71e  00000000  00000000  00058a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d38  00000000  00000000  0014519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00149ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab2c 	.word	0x0800ab2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ab2c 	.word	0x0800ab2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <HAL_UART_RxCpltCallback>:
extern char command[BUFF_SIZE];
extern int data_received_usb;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_UART_RxCpltCallback+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d107      	bne.n	8001042 <HAL_UART_RxCpltCallback+0x22>
    	data_received_usb = 1;
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <HAL_UART_RxCpltCallback+0x30>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);  // Restart reception
 8001038:	2210      	movs	r2, #16
 800103a:	4906      	ldr	r1, [pc, #24]	@ (8001054 <HAL_UART_RxCpltCallback+0x34>)
 800103c:	4806      	ldr	r0, [pc, #24]	@ (8001058 <HAL_UART_RxCpltCallback+0x38>)
 800103e:	f003 fea1 	bl	8004d84 <HAL_UART_Receive_IT>
    }
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	200002ec 	.word	0x200002ec
 8001054:	200002dc 	.word	0x200002dc
 8001058:	20000254 	.word	0x20000254

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 feb1 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f845 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f903 	bl	8001274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800106e:	f000 f8d1 	bl	8001214 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001072:	f000 f891 	bl	8001198 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

 HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);
 8001076:	2210      	movs	r2, #16
 8001078:	491a      	ldr	r1, [pc, #104]	@ (80010e4 <main+0x88>)
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <main+0x8c>)
 800107c:	f003 fe82 	bl	8004d84 <HAL_UART_Receive_IT>

 #ifdef TRANSMITTER			//NRF24L01 Private variables
	nrf24l01p_tx_init(2500, _250kbps);
 8001080:	2102      	movs	r1, #2
 8001082:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001086:	f000 fa39 	bl	80014fc <nrf24l01p_tx_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (data_received_usb == 1)
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <main+0x90>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d1fb      	bne.n	800108a <main+0x2e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	2120      	movs	r1, #32
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f001 fa6f 	bl	800257c <HAL_GPIO_WritePin>
		  trame = strtok(command, delim);		// Convert command into char*

		  transmit_to_pc("trame well received : ");
		  transmit_to_pc(trame);
		  */
		  const char delim[] = " ";
 800109e:	2320      	movs	r3, #32
 80010a0:	82bb      	strh	r3, [r7, #20]
		  trame = strtok(command, delim);		// Convert command into char*
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <main+0x88>)
 80010aa:	f006 f911 	bl	80072d0 <strtok>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <main+0x94>)
 80010b2:	6013      	str	r3, [r2, #0]

		  char message[NRF24L01P_PAYLOAD_LENGTH] = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
		  sprintf(message,trame);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <main+0x94>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 f893 	bl	80071f4 <siprintf>
		  nrf24l01p_tx_transmit((uint8_t*)message);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fa3e 	bl	8001552 <nrf24l01p_tx_transmit>
		  HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	@ 0x64
 80010d8:	f000 fef2 	bl	8001ec0 <HAL_Delay>


		  data_received_usb = 0;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <main+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	  if (data_received_usb == 1)
 80010e2:	e7d2      	b.n	800108a <main+0x2e>
 80010e4:	200002dc 	.word	0x200002dc
 80010e8:	20000254 	.word	0x20000254
 80010ec:	200002ec 	.word	0x200002ec
 80010f0:	200002f0 	.word	0x200002f0

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b096      	sub	sp, #88	@ 0x58
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2244      	movs	r2, #68	@ 0x44
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 f8db 	bl	80072be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001116:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800111a:	f001 fa87 	bl	800262c <HAL_PWREx_ControlVoltageScaling>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001124:	f000 f961 	bl	80013ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001130:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001132:	2310      	movs	r3, #16
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113a:	2302      	movs	r3, #2
 800113c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001142:	230a      	movs	r3, #10
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001146:	2307      	movs	r3, #7
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800114a:	2302      	movs	r3, #2
 800114c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fabe 	bl	80026d8 <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001162:	f000 f942 	bl	80013ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	2303      	movs	r3, #3
 800116c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2104      	movs	r1, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fe86 	bl	8002e90 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800118a:	f000 f92e 	bl	80013ea <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3758      	adds	r7, #88	@ 0x58
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_SPI3_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_SPI3_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_SPI3_Init+0x74>)
 80011a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_SPI3_Init+0x74>)
 80011b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_SPI3_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_SPI3_Init+0x74>)
 80011c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ce:	2230      	movs	r2, #48	@ 0x30
 80011d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_SPI3_Init+0x74>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_SPI3_Init+0x74>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_SPI3_Init+0x74>)
 80011f8:	f002 fd2a 	bl	8003c50 <HAL_SPI_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001202:	f000 f8f2 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001f0 	.word	0x200001f0
 8001210:	40003c00 	.word	0x40003c00

08001214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_USART2_UART_Init+0x58>)
 800121a:	4a15      	ldr	r2, [pc, #84]	@ (8001270 <MX_USART2_UART_Init+0x5c>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_USART2_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_USART2_UART_Init+0x58>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_USART2_UART_Init+0x58>)
 8001258:	f003 fd46 	bl	8004ce8 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001262:	f000 f8c2 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000254 	.word	0x20000254
 8001270:	40004400 	.word	0x40004400

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b4d      	ldr	r3, [pc, #308]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a4c      	ldr	r2, [pc, #304]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a46      	ldr	r2, [pc, #280]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b44      	ldr	r3, [pc, #272]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a40      	ldr	r2, [pc, #256]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a3a      	ldr	r2, [pc, #232]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <MX_GPIO_Init+0x14c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f001 f943 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012fc:	4831      	ldr	r0, [pc, #196]	@ (80013c4 <MX_GPIO_Init+0x150>)
 80012fe:	f001 f93d 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSN_GPIO_Port, SPI3_CSN_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f001 f936 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4828      	ldr	r0, [pc, #160]	@ (80013c8 <MX_GPIO_Init+0x154>)
 8001328:	f000 ff7e 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001346:	f000 ff6f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800134a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4818      	ldr	r0, [pc, #96]	@ (80013c4 <MX_GPIO_Init+0x150>)
 8001364:	f000 ff60 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f000 ff51 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = SPI3_CSN_Pin;
 8001386:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 ff41 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2028      	movs	r0, #40	@ 0x28
 80013ac:	f000 fe87 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b0:	2028      	movs	r0, #40	@ 0x28
 80013b2:	f000 fea0 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800

080013cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_EXTI_Callback+0x16>
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
 80013de:	f000 f8c3 	bl	8001568 <nrf24l01p_tx_irq>
#endif
	}

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ee:	b672      	cpsid	i
}
 80013f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <Error_Handler+0x8>

080013f6 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001404:	f001 f8ba 	bl	800257c <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <cs_low>:

static void cs_low()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141a:	f001 f8af 	bl	800257c <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <ce_high>:

static void ce_high()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <ce_high+0x14>)
 8001430:	f001 f8a4 	bl	800257c <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	48000400 	.word	0x48000400

0800143c <ce_low>:

static void ce_low()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <ce_low+0x14>)
 8001448:	f001 f898 	bl	800257c <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48000400 	.word	0x48000400

08001454 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8001462:	f7ff ffd3 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001466:	f107 020e 	add.w	r2, r7, #14
 800146a:	f107 010f 	add.w	r1, r7, #15
 800146e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <read_register+0x48>)
 8001478:	f002 ff3b 	bl	80042f2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 800147c:	f107 010d 	add.w	r1, r7, #13
 8001480:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001484:	2201      	movs	r2, #1
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <read_register+0x48>)
 8001488:	f002 fdfb 	bl	8004082 <HAL_SPI_Receive>
    cs_high();
 800148c:	f7ff ffb3 	bl	80013f6 <cs_high>

    return read_val;
 8001490:	7b7b      	ldrb	r3, [r7, #13]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f0 	.word	0x200001f0

080014a0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	737b      	strb	r3, [r7, #13]

    cs_low();
 80014be:	f7ff ffa5 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80014c2:	f107 020e 	add.w	r2, r7, #14
 80014c6:	f107 010f 	add.w	r1, r7, #15
 80014ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <write_register+0x58>)
 80014d4:	f002 ff0d 	bl	80042f2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80014d8:	f107 010d 	add.w	r1, r7, #13
 80014dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014e0:	2201      	movs	r2, #1
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <write_register+0x58>)
 80014e4:	f002 fc57 	bl	8003d96 <HAL_SPI_Transmit>
    cs_high();
 80014e8:	f7ff ff85 	bl	80013f6 <cs_high>

    return write_val;
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200001f0 	.word	0x200001f0

080014fc <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 800150c:	f000 f850 	bl	80015b0 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8001510:	f000 f8a2 	bl	8001658 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8001514:	f000 f94c 	bl	80017b0 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f9d4 	bl	80018c8 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fa01 	bl	800192a <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f9e0 	bl	80018ee <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 f953 	bl	80017da <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8001534:	2005      	movs	r0, #5
 8001536:	f000 f973 	bl	8001820 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 f980 	bl	8001840 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8001540:	20fa      	movs	r0, #250	@ 0xfa
 8001542:	f000 f999 	bl	8001878 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8001546:	f7ff ff6d 	bl	8001424 <ce_high>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f892 	bl	8001684 <nrf24l01p_write_tx_fifo>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 800156e:	f000 f8dd 	bl	800172c <nrf24l01p_get_status>
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001584:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <nrf24l01p_tx_irq+0x44>)
 800158a:	f001 f80f 	bl	80025ac <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 800158e:	f000 f8e7 	bl	8001760 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8001592:	e007      	b.n	80015a4 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159a:	4804      	ldr	r0, [pc, #16]	@ (80015ac <nrf24l01p_tx_irq+0x44>)
 800159c:	f000 ffee 	bl	800257c <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80015a0:	f000 f8f2 	bl	8001788 <nrf24l01p_clear_max_rt>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	48000800 	.word	0x48000800

080015b0 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80015b4:	f7ff ff1f 	bl	80013f6 <cs_high>
    ce_low();
 80015b8:	f7ff ff40 	bl	800143c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80015bc:	2108      	movs	r1, #8
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ff6e 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80015c4:	213f      	movs	r1, #63	@ 0x3f
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff ff6a 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80015cc:	2103      	movs	r1, #3
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ff66 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80015d4:	2103      	movs	r1, #3
 80015d6:	2003      	movs	r0, #3
 80015d8:	f7ff ff62 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80015dc:	2103      	movs	r1, #3
 80015de:	2004      	movs	r0, #4
 80015e0:	f7ff ff5e 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80015e4:	2102      	movs	r1, #2
 80015e6:	2005      	movs	r0, #5
 80015e8:	f7ff ff5a 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80015ec:	2107      	movs	r1, #7
 80015ee:	2006      	movs	r0, #6
 80015f0:	f7ff ff56 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80015f4:	217e      	movs	r1, #126	@ 0x7e
 80015f6:	2007      	movs	r0, #7
 80015f8:	f7ff ff52 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2011      	movs	r0, #17
 8001600:	f7ff ff4e 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	2011      	movs	r0, #17
 8001608:	f7ff ff4a 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800160c:	2100      	movs	r1, #0
 800160e:	2012      	movs	r0, #18
 8001610:	f7ff ff46 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001614:	2100      	movs	r1, #0
 8001616:	2013      	movs	r0, #19
 8001618:	f7ff ff42 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800161c:	2100      	movs	r1, #0
 800161e:	2014      	movs	r0, #20
 8001620:	f7ff ff3e 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001624:	2100      	movs	r1, #0
 8001626:	2015      	movs	r0, #21
 8001628:	f7ff ff3a 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800162c:	2100      	movs	r1, #0
 800162e:	2016      	movs	r0, #22
 8001630:	f7ff ff36 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001634:	2111      	movs	r1, #17
 8001636:	2017      	movs	r0, #23
 8001638:	f7ff ff32 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800163c:	2100      	movs	r1, #0
 800163e:	201c      	movs	r0, #28
 8001640:	f7ff ff2e 	bl	80014a0 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001644:	2100      	movs	r1, #0
 8001646:	201d      	movs	r0, #29
 8001648:	f7ff ff2a 	bl	80014a0 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800164c:	f000 f83e 	bl	80016cc <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8001650:	f000 f854 	bl	80016fc <nrf24l01p_flush_tx_fifo>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fef8 	bl	8001454 <read_register>
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4619      	mov	r1, r3
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff ff13 	bl	80014a0 <write_register>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 800168c:	23a0      	movs	r3, #160	@ 0xa0
 800168e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001690:	f7ff febc 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001694:	f107 020e 	add.w	r2, r7, #14
 8001698:	f107 010f 	add.w	r1, r7, #15
 800169c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <nrf24l01p_write_tx_fifo+0x44>)
 80016a6:	f002 fe24 	bl	80042f2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80016aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016ae:	2210      	movs	r2, #16
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <nrf24l01p_write_tx_fifo+0x44>)
 80016b4:	f002 fb6f 	bl	8003d96 <HAL_SPI_Transmit>
    cs_high(); 
 80016b8:	f7ff fe9d 	bl	80013f6 <cs_high>

    return status;
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001f0 	.word	0x200001f0

080016cc <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80016d2:	23e2      	movs	r3, #226	@ 0xe2
 80016d4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80016d6:	f7ff fe99 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80016da:	1dba      	adds	r2, r7, #6
 80016dc:	1df9      	adds	r1, r7, #7
 80016de:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <nrf24l01p_flush_rx_fifo+0x2c>)
 80016e8:	f002 fe03 	bl	80042f2 <HAL_SPI_TransmitReceive>
    cs_high();
 80016ec:	f7ff fe83 	bl	80013f6 <cs_high>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200001f0 	.word	0x200001f0

080016fc <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8001702:	23e1      	movs	r3, #225	@ 0xe1
 8001704:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001706:	f7ff fe81 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800170a:	1dba      	adds	r2, r7, #6
 800170c:	1df9      	adds	r1, r7, #7
 800170e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <nrf24l01p_flush_tx_fifo+0x2c>)
 8001718:	f002 fdeb 	bl	80042f2 <HAL_SPI_TransmitReceive>
    cs_high();
 800171c:	f7ff fe6b 	bl	80013f6 <cs_high>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200001f0 	.word	0x200001f0

0800172c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8001732:	23ff      	movs	r3, #255	@ 0xff
 8001734:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001736:	f7ff fe69 	bl	800140c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800173a:	1dba      	adds	r2, r7, #6
 800173c:	1df9      	adds	r1, r7, #7
 800173e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <nrf24l01p_get_status+0x30>)
 8001748:	f002 fdd3 	bl	80042f2 <HAL_SPI_TransmitReceive>
    cs_high(); 
 800174c:	f7ff fe53 	bl	80013f6 <cs_high>

    return status;
 8001750:	79bb      	ldrb	r3, [r7, #6]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200001f0 	.word	0x200001f0

08001760 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001766:	f7ff ffe1 	bl	800172c <nrf24l01p_get_status>
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f043 0320 	orr.w	r3, r3, #32
 8001774:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4619      	mov	r1, r3
 800177a:	2007      	movs	r0, #7
 800177c:	f7ff fe90 	bl	80014a0 <write_register>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800178e:	f7ff ffcd 	bl	800172c <nrf24l01p_get_status>
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4619      	mov	r1, r3
 80017a2:	2007      	movs	r0, #7
 80017a4:	f7ff fe7c 	bl	80014a0 <write_register>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fe4c 	bl	8001454 <read_register>
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4619      	mov	r1, r3
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fe67 	bl	80014a0 <write_register>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fe35 	bl	8001454 <read_register>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d002      	beq.n	80017fa <nrf24l01p_set_crc_length+0x20>
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d005      	beq.n	8001804 <nrf24l01p_set_crc_length+0x2a>
 80017f8:	e009      	b.n	800180e <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	73fb      	strb	r3, [r7, #15]
            break;
 8001802:	e004      	b.n	800180e <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	73fb      	strb	r3, [r7, #15]
            break;
 800180c:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	4619      	mov	r1, r3
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fe44 	bl	80014a0 <write_register>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	3b02      	subs	r3, #2
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	2003      	movs	r0, #3
 8001834:	f7ff fe34 	bl	80014a0 <write_register>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff fe02 	bl	8001454 <read_register>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	f063 030f 	orn	r3, r3, #15
 800185a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4313      	orrs	r3, r2
 8001862:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	4619      	mov	r1, r3
 8001868:	2004      	movs	r0, #4
 800186a:	f7ff fe19 	bl	80014a0 <write_register>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001882:	2004      	movs	r0, #4
 8001884:	f7ff fde6 	bl	8001454 <read_register>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f043 030f 	orr.w	r3, r3, #15
 8001892:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	b25a      	sxtb	r2, r3
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	4619      	mov	r1, r3
 80018b6:	2004      	movs	r0, #4
 80018b8:	f7ff fdf2 	bl	80014a0 <write_register>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80018d8:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	2005      	movs	r0, #5
 80018e2:	f7ff fddd 	bl	80014a0 <write_register>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff fdab 	bl	8001454 <read_register>
 80018fe:	4603      	mov	r3, r0
 8001900:	f023 0306 	bic.w	r3, r3, #6
 8001904:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b25a      	sxtb	r2, r3
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4313      	orrs	r3, r2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	4619      	mov	r1, r3
 800191c:	2006      	movs	r0, #6
 800191e:	f7ff fdbf 	bl	80014a0 <write_register>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8001934:	2006      	movs	r0, #6
 8001936:	f7ff fd8d 	bl	8001454 <read_register>
 800193a:	4603      	mov	r3, r0
 800193c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001940:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d00a      	beq.n	800195e <nrf24l01p_set_rf_air_data_rate+0x34>
 8001948:	2b02      	cmp	r3, #2
 800194a:	dc0e      	bgt.n	800196a <nrf24l01p_set_rf_air_data_rate+0x40>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10a      	bne.n	800196a <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	73fb      	strb	r3, [r7, #15]
            break;
 800195c:	e005      	b.n	800196a <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	73fb      	strb	r3, [r7, #15]
            break;
 8001966:	e000      	b.n	800196a <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8001968:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4619      	mov	r1, r3
 800196e:	2006      	movs	r0, #6
 8001970:	f7ff fd96 	bl	80014a0 <write_register>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	@ 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_SPI_MspInit+0x8c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d130      	bne.n	8001a48 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 80019ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_SPI_MspInit+0x90>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <HAL_SPI_MspInit+0x94>)
 8001a34:	f000 fbf8 	bl	8002228 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2033      	movs	r0, #51	@ 0x33
 8001a3e:	f000 fb3e 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a42:	2033      	movs	r0, #51	@ 0x33
 8001a44:	f000 fb57 	bl	80020f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	@ 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40003c00 	.word	0x40003c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000800 	.word	0x48000800

08001a5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0ac      	sub	sp, #176	@ 0xb0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2288      	movs	r2, #136	@ 0x88
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 fc1e 	bl	80072be <memset>
  if(huart->Instance==USART2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <HAL_UART_MspInit+0xc0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d143      	bne.n	8001b14 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fc1d 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa4:	f7ff fca1 	bl	80013ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af0:	2307      	movs	r3, #7
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f000 fb92 	bl	8002228 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2026      	movs	r0, #38	@ 0x26
 8001b0a:	f000 fad8 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0e:	2026      	movs	r0, #38	@ 0x26
 8001b10:	f000 faf1 	bl	80020f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	37b0      	adds	r7, #176	@ 0xb0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f981 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <USART2_IRQHandler+0x10>)
 8001b8a:	f003 f947 	bl	8004e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000254 	.word	0x20000254

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001b9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ba0:	f000 fd1e 	bl	80025e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ba4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ba8:	f000 fd1a 	bl	80025e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <SPI3_IRQHandler+0x10>)
 8001bb6:	f002 fdbb 	bl	8004730 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200001f0 	.word	0x200001f0

08001bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_kill>:

int _kill(int pid, int sig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bde:	f005 fc1d 	bl	800741c <__errno>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2216      	movs	r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
  return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_exit>:

void _exit (int status)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe7 	bl	8001bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c06:	bf00      	nop
 8001c08:	e7fd      	b.n	8001c06 <_exit+0x12>

08001c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e00a      	b.n	8001c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1c:	f3af 8000 	nop.w
 8001c20:	4601      	mov	r1, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dbf0      	blt.n	8001c1c <_read+0x12>
  }

  return len;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e009      	b.n	8001c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	60ba      	str	r2, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf1      	blt.n	8001c56 <_write+0x12>
  }
  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_close>:

int _close(int file)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_isatty>:

int _isatty(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f005 fb82 	bl	800741c <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20018000 	.word	0x20018000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	200002f4 	.word	0x200002f4
 8001d4c:	20000448 	.word	0x20000448

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f005 fb41 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da6:	f7ff f959 	bl	800105c <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001db8:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 8001dbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dc0:	20000448 	.word	0x20000448

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_Init+0x3c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <HAL_Init+0x3c>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f000 f962 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 f80f 	bl	8001e08 <HAL_InitTick>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	e001      	b.n	8001dfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df6:	f7ff fdc1 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_InitTick+0x6c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_InitTick+0x70>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_InitTick+0x6c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f96d 	bl	8002112 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d809      	bhi.n	8001e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f937 	bl	80020be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_InitTick+0x74>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e004      	b.n	8001e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e001      	b.n	8001e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	200002f8 	.word	0x200002f8

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200002f8 	.word	0x200002f8

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d008      	beq.n	8002154 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2204      	movs	r2, #4
 8002146:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e022      	b.n	800219a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020e 	bic.w	r2, r2, #14
 8002162:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	f003 021c 	and.w	r2, r3, #28
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e029      	b.n	800221e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020e 	bic.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f003 021c 	and.w	r2, r3, #28
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
    }
  }
  return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e17f      	b.n	8002538 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8171 	beq.w	8002532 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d005      	beq.n	8002268 <HAL_GPIO_Init+0x40>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d130      	bne.n	80022ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800229e:	2201      	movs	r2, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0201 	and.w	r2, r3, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d118      	bne.n	8002308 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	6939      	ldr	r1, [r7, #16]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80ac 	beq.w	8002532 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	4b5f      	ldr	r3, [pc, #380]	@ (8002558 <HAL_GPIO_Init+0x330>)
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	4a5e      	ldr	r2, [pc, #376]	@ (8002558 <HAL_GPIO_Init+0x330>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002558 <HAL_GPIO_Init+0x330>)
 80023e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f2:	4a5a      	ldr	r2, [pc, #360]	@ (800255c <HAL_GPIO_Init+0x334>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800241c:	d025      	beq.n	800246a <HAL_GPIO_Init+0x242>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	@ (8002560 <HAL_GPIO_Init+0x338>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01f      	beq.n	8002466 <HAL_GPIO_Init+0x23e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_GPIO_Init+0x33c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_GPIO_Init+0x23a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4d      	ldr	r2, [pc, #308]	@ (8002568 <HAL_GPIO_Init+0x340>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x236>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4c      	ldr	r2, [pc, #304]	@ (800256c <HAL_GPIO_Init+0x344>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x232>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_GPIO_Init+0x348>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4a      	ldr	r2, [pc, #296]	@ (8002574 <HAL_GPIO_Init+0x34c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x22a>
 800244e:	2306      	movs	r3, #6
 8002450:	e00c      	b.n	800246c <HAL_GPIO_Init+0x244>
 8002452:	2307      	movs	r3, #7
 8002454:	e00a      	b.n	800246c <HAL_GPIO_Init+0x244>
 8002456:	2305      	movs	r3, #5
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x244>
 800245a:	2304      	movs	r3, #4
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x244>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x244>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x244>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x244>
 800246a:	2300      	movs	r3, #0
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800247c:	4937      	ldr	r1, [pc, #220]	@ (800255c <HAL_GPIO_Init+0x334>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_GPIO_Init+0x350>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ae:	4a32      	ldr	r2, [pc, #200]	@ (8002578 <HAL_GPIO_Init+0x350>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024b4:	4b30      	ldr	r3, [pc, #192]	@ (8002578 <HAL_GPIO_Init+0x350>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d8:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <HAL_GPIO_Init+0x350>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024de:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <HAL_GPIO_Init+0x350>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002502:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <HAL_GPIO_Init+0x350>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_GPIO_Init+0x350>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800252c:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <HAL_GPIO_Init+0x350>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae78 	bne.w	8002238 <HAL_GPIO_Init+0x10>
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000
 8002560:	48000400 	.word	0x48000400
 8002564:	48000800 	.word	0x48000800
 8002568:	48000c00 	.word	0x48000c00
 800256c:	48001000 	.word	0x48001000
 8002570:	48001400 	.word	0x48001400
 8002574:	48001800 	.word	0x48001800
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43d9      	mvns	r1, r3
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	400b      	ands	r3, r1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f6:	4a05      	ldr	r2, [pc, #20]	@ (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fee4 	bl	80013cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_PWREx_GetVoltageRange+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263a:	d130      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d038      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2232      	movs	r2, #50	@ 0x32
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002670:	e002      	b.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002684:	d102      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f2      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002698:	d110      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e00f      	b.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026aa:	d007      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026ac:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026b4:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000
 80026d0:	20000000 	.word	0x20000000
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e3ca      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b97      	ldr	r3, [pc, #604]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	4b94      	ldr	r3, [pc, #592]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80e4 	beq.w	80028d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_RCC_OscConfig+0x4a>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	f040 808b 	bne.w	8002830 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 8087 	bne.w	8002830 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002722:	4b89      	ldr	r3, [pc, #548]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e3a2      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCC_OscConfig+0x7c>
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002752:	e005      	b.n	8002760 <HAL_RCC_OscConfig+0x88>
 8002754:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002760:	4293      	cmp	r3, r2
 8002762:	d223      	bcs.n	80027ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fd55 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e383      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002778:	4b73      	ldr	r3, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a72      	ldr	r2, [pc, #456]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	496d      	ldr	r1, [pc, #436]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002796:	4b6c      	ldr	r3, [pc, #432]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4968      	ldr	r1, [pc, #416]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e025      	b.n	80027f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ac:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a65      	ldr	r2, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b63      	ldr	r3, [pc, #396]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4960      	ldr	r1, [pc, #384]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	495b      	ldr	r1, [pc, #364]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fd15 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e343      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f8:	f000 fc4a 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b52      	ldr	r3, [pc, #328]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	4950      	ldr	r1, [pc, #320]	@ (800294c <HAL_RCC_OscConfig+0x274>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	4a4e      	ldr	r2, [pc, #312]	@ (8002950 <HAL_RCC_OscConfig+0x278>)
 8002816:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002818:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff faf3 	bl	8001e08 <HAL_InitTick>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d052      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	e327      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d032      	beq.n	800289e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002838:	4b43      	ldr	r3, [pc, #268]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a42      	ldr	r2, [pc, #264]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002844:	f7ff fb30 	bl	8001ea8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284c:	f7ff fb2c 	bl	8001ea8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e310      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285e:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286a:	4b37      	ldr	r3, [pc, #220]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a36      	ldr	r2, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4931      	ldr	r1, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002888:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	492c      	ldr	r1, [pc, #176]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e01a      	b.n	80028d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fafd 	bl	8001ea8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b2:	f7ff faf9 	bl	8001ea8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e2dd      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1da>
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d074      	beq.n	80029ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x21a>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d10e      	bne.n	800290a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d10b      	bne.n	800290a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d064      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d160      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2ba      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x24a>
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e026      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800292a:	d115      	bne.n	8002958 <HAL_RCC_OscConfig+0x280>
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a02      	ldr	r2, [pc, #8]	@ (8002948 <HAL_RCC_OscConfig+0x270>)
 800293e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	0800ab48 	.word	0x0800ab48
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004
 8002958:	4ba0      	ldr	r3, [pc, #640]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9f      	ldr	r2, [pc, #636]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a9c      	ldr	r2, [pc, #624]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fa96 	bl	8001ea8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fa92 	bl	8001ea8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e276      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002992:	4b92      	ldr	r3, [pc, #584]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x2a8>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff fa82 	bl	8001ea8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff fa7e 	bl	8001ea8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e262      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ba:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d0>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d060      	beq.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x310>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d116      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	4b7c      	ldr	r3, [pc, #496]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x328>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e23f      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	4973      	ldr	r1, [pc, #460]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a14:	e040      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d023      	beq.n	8002a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6e      	ldr	r2, [pc, #440]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7ff fa3d 	bl	8001ea8 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff fa39 	bl	8001ea8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e21d      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b62      	ldr	r3, [pc, #392]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	495f      	ldr	r1, [pc, #380]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b5d      	ldr	r3, [pc, #372]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff fa19 	bl	8001ea8 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff fa15 	bl	8001ea8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1f9      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8c:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aac:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7ff f9f4 	bl	8001ea8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f9f0 	bl	8001ea8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1d4      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x3ec>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aec:	4a3b      	ldr	r2, [pc, #236]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7ff f9d7 	bl	8001ea8 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7ff f9d3 	bl	8001ea8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1b7      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b10:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a6 	beq.w	8002c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	4a26      	ldr	r2, [pc, #152]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d118      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b70:	f7ff f99a 	bl	8001ea8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7ff f996 	bl	8001ea8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e17a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d8>
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bae:	e029      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_OscConfig+0x50c>
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	4a9b      	ldr	r2, [pc, #620]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf4:	4b98      	ldr	r3, [pc, #608]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	4a97      	ldr	r2, [pc, #604]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7ff f94c 	bl	8001ea8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7ff f948 	bl	8001ea8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e12a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <HAL_RCC_OscConfig+0x53c>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7ff f935 	bl	8001ea8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7ff f931 	bl	8001ea8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e113      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a79      	ldr	r2, [pc, #484]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80fe 	beq.w	8002e7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	f040 80d0 	bne.w	8002e2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d130      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	3b01      	subs	r3, #1
 8002cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d127      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d11f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ccc:	2a07      	cmp	r2, #7
 8002cce:	bf14      	ite	ne
 8002cd0:	2201      	movne	r2, #1
 8002cd2:	2200      	moveq	r2, #0
 8002cd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d06e      	beq.n	8002de0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d069      	beq.n	8002ddc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d14:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ad      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d24:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d30:	f7ff f8ba 	bl	8001ea8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f8b6 	bl	8001ea8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e09a      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4a:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_RCC_OscConfig+0x784>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d66:	3a01      	subs	r2, #1
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d70:	0212      	lsls	r2, r2, #8
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	0552      	lsls	r2, r2, #21
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0652      	lsls	r2, r2, #25
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d90:	0912      	lsrs	r2, r2, #4
 8002d92:	0452      	lsls	r2, r2, #17
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4930      	ldr	r1, [pc, #192]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002db4:	f7ff f878 	bl	8001ea8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7ff f874 	bl	8001ea8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e058      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	4b22      	ldr	r3, [pc, #136]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dda:	e050      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04f      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d148      	bne.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dec:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e04:	f7ff f850 	bl	8001ea8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff f84c 	bl	8001ea8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e030      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x734>
 8002e2a:	e028      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d023      	beq.n	8002e7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_RCC_OscConfig+0x780>)
 8002e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7ff f833 	bl	8001ea8 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e44:	e00c      	b.n	8002e60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7ff f82f 	bl	8001ea8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d905      	bls.n	8002e60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4905      	ldr	r1, [pc, #20]	@ (8002e88 <HAL_RCC_OscConfig+0x7b0>)
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_OscConfig+0x7b4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	e001      	b.n	8002e7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	feeefffc 	.word	0xfeeefffc

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0e7      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b75      	ldr	r3, [pc, #468]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4970      	ldr	r1, [pc, #448]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cf      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b66      	ldr	r3, [pc, #408]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d908      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b63      	ldr	r3, [pc, #396]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4960      	ldr	r1, [pc, #384]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04c      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	4b5a      	ldr	r3, [pc, #360]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0a6      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2e:	4b54      	ldr	r3, [pc, #336]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e09a      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f46:	4b4e      	ldr	r3, [pc, #312]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e08e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f56:	4b4a      	ldr	r3, [pc, #296]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e086      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b46      	ldr	r3, [pc, #280]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4943      	ldr	r1, [pc, #268]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe ff96 	bl	8001ea8 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe ff92 	bl	8001ea8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e06e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	492b      	ldr	r1, [pc, #172]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd6:	4b29      	ldr	r3, [pc, #164]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d210      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 0207 	bic.w	r2, r3, #7
 8002fec:	4923      	ldr	r1, [pc, #140]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e036      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4918      	ldr	r1, [pc, #96]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4910      	ldr	r1, [pc, #64]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 f824 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	490b      	ldr	r1, [pc, #44]	@ (8003084 <HAL_RCC_ClockConfig+0x1f4>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1f8>)
 8003062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_RCC_ClockConfig+0x1fc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fecd 	bl	8001e08 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	72fb      	strb	r3, [r7, #11]

  return status;
 8003072:	7afb      	ldrb	r3, [r7, #11]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40022000 	.word	0x40022000
 8003080:	40021000 	.word	0x40021000
 8003084:	0800ab48 	.word	0x0800ab48
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b3e      	ldr	r3, [pc, #248]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x34>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d11e      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030c4:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030d0:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030ec:	4a2b      	ldr	r2, [pc, #172]	@ (800319c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d102      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003108:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e004      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d101      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d134      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0xa6>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d003      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0xac>
 8003134:	e005      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	e005      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800313e:	617b      	str	r3, [r7, #20]
      break;
 8003140:	e002      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	617b      	str	r3, [r7, #20]
      break;
 8003146:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0e5b      	lsrs	r3, r3, #25
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	3301      	adds	r3, #1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003188:	69bb      	ldr	r3, [r7, #24]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	0800ab60 	.word	0x0800ab60
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	007a1200 	.word	0x007a1200

080031a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	0800ab58 	.word	0x0800ab58

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f0:	f7ff ffda 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	0800ab58 	.word	0x0800ab58

08003218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003224:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f9ee 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
 8003236:	e014      	b.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	@ 0x58
 8003244:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003250:	f7ff f9de 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 8003254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003260:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003268:	d10b      	bne.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	@ 0x80
 800326e:	d919      	bls.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2ba0      	cmp	r3, #160	@ 0xa0
 8003274:	d902      	bls.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003276:	2302      	movs	r3, #2
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e013      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e010      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d902      	bls.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003288:	2303      	movs	r3, #3
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e00a      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	@ 0x80
 8003292:	d102      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003294:	2302      	movs	r3, #2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e004      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b70      	cmp	r3, #112	@ 0x70
 800329e:	d101      	bne.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0207 	bic.w	r2, r3, #7
 80032ac:	4909      	ldr	r1, [pc, #36]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40022000 	.word	0x40022000

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d041      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032fc:	d02a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003302:	d824      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800330a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800330e:	d81e      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003318:	d010      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800331a:	e018      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331c:	4b86      	ldr	r3, [pc, #536]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a85      	ldr	r2, [pc, #532]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e015      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fabb 	bl	80038ac <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fba6 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e003      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	74fb      	strb	r3, [r7, #19]
      break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800336a:	4973      	ldr	r1, [pc, #460]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d041      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338c:	d02a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800338e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003392:	d824      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003398:	d008      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800339e:	d81e      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a8:	d010      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033aa:	e018      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ac:	4b62      	ldr	r3, [pc, #392]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a61      	ldr	r2, [pc, #388]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b8:	e015      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fa73 	bl	80038ac <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ca:	e00c      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3320      	adds	r3, #32
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb5e 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	74fb      	strb	r3, [r7, #19]
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ec:	4b52      	ldr	r3, [pc, #328]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fa:	494f      	ldr	r1, [pc, #316]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003402:	e001      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a0 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341a:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	4a40      	ldr	r2, [pc, #256]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	@ 0x58
 800343c:	4b3e      	ldr	r3, [pc, #248]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003448:	2301      	movs	r3, #1
 800344a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003458:	f7fe fd26 	bl	8001ea8 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345e:	e009      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fe fd22 	bl	8001ea8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
        break;
 8003472:	e005      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003474:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d15c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003486:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b0:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d0:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe fce1 	bl	8001ea8 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e8:	e00b      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fcdd 	bl	8001ea8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d902      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ec      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003526:	4904      	ldr	r1, [pc, #16]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b9e      	ldr	r3, [pc, #632]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	4a9d      	ldr	r2, [pc, #628]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	4b98      	ldr	r3, [pc, #608]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	4994      	ldr	r1, [pc, #592]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	4b8f      	ldr	r3, [pc, #572]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f023 020c 	bic.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	498c      	ldr	r1, [pc, #560]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4b87      	ldr	r3, [pc, #540]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	4983      	ldr	r1, [pc, #524]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	497b      	ldr	r1, [pc, #492]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f8:	4972      	ldr	r1, [pc, #456]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360c:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	496a      	ldr	r1, [pc, #424]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b65      	ldr	r3, [pc, #404]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	4961      	ldr	r1, [pc, #388]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003650:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365e:	4959      	ldr	r1, [pc, #356]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003672:	4b54      	ldr	r3, [pc, #336]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003680:	4950      	ldr	r1, [pc, #320]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	4948      	ldr	r1, [pc, #288]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	493f      	ldr	r1, [pc, #252]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d028      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d8:	4b3a      	ldr	r3, [pc, #232]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e6:	4937      	ldr	r1, [pc, #220]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036f6:	d106      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a31      	ldr	r2, [pc, #196]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e011      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f8c8 	bl	80038ac <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003736:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	491f      	ldr	r1, [pc, #124]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003754:	d106      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003756:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f899 	bl	80038ac <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	4908      	ldr	r1, [pc, #32]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037b2:	d109      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a02      	ldr	r2, [pc, #8]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
 80037c0:	e014      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f867 	bl	80038ac <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f8:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003806:	4928      	ldr	r1, [pc, #160]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f844 	bl	80038ac <RCCEx_PLLSAI1_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d014      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	74bb      	strb	r3, [r7, #18]
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3320      	adds	r3, #32
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f925 	bl	8003a94 <RCCEx_PLLSAI2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003864:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003872:	490d      	ldr	r1, [pc, #52]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003886:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003896:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800389e:	7cbb      	ldrb	r3, [r7, #18]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ba:	4b75      	ldr	r3, [pc, #468]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0203 	and.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d10d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
       ||
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038de:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
       ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d047      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e044      	b.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d018      	beq.n	8003932 <RCCEx_PLLSAI1_Config+0x86>
 8003900:	2b03      	cmp	r3, #3
 8003902:	d825      	bhi.n	8003950 <RCCEx_PLLSAI1_Config+0xa4>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x62>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d009      	beq.n	8003920 <RCCEx_PLLSAI1_Config+0x74>
 800390c:	e020      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800390e:	4b60      	ldr	r3, [pc, #384]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391e:	e01a      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003920:	4b5b      	ldr	r3, [pc, #364]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d116      	bne.n	800395a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e013      	b.n	800395a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003932:	4b57      	ldr	r3, [pc, #348]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800393e:	4b54      	ldr	r3, [pc, #336]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800394e:	e006      	b.n	800395e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e004      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800395e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003966:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	430b      	orrs	r3, r1
 800397c:	4944      	ldr	r1, [pc, #272]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d17d      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003988:	4b41      	ldr	r3, [pc, #260]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a40      	ldr	r2, [pc, #256]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fe fa88 	bl	8001ea8 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800399a:	e009      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399c:	f7fe fa84 	bl	8001ea8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d902      	bls.n	80039b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	73fb      	strb	r3, [r7, #15]
        break;
 80039ae:	e005      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b0:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ef      	bne.n	800399c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d160      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d111      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c8:	4b31      	ldr	r3, [pc, #196]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	0211      	lsls	r1, r2, #8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68d2      	ldr	r2, [r2, #12]
 80039de:	0912      	lsrs	r2, r2, #4
 80039e0:	0452      	lsls	r2, r2, #17
 80039e2:	430a      	orrs	r2, r1
 80039e4:	492a      	ldr	r1, [pc, #168]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
 80039ea:	e027      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d112      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f2:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	0211      	lsls	r1, r2, #8
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6912      	ldr	r2, [r2, #16]
 8003a08:	0852      	lsrs	r2, r2, #1
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0552      	lsls	r2, r2, #21
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	491f      	ldr	r1, [pc, #124]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	610b      	str	r3, [r1, #16]
 8003a16:	e011      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	0211      	lsls	r1, r2, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6952      	ldr	r2, [r2, #20]
 8003a2e:	0852      	lsrs	r2, r2, #1
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0652      	lsls	r2, r2, #25
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4916      	ldr	r1, [pc, #88]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fe fa2e 	bl	8001ea8 <HAL_GetTick>
 8003a4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a4e:	e009      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a50:	f7fe fa2a 	bl	8001ea8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	73fb      	strb	r3, [r7, #15]
          break;
 8003a62:	e005      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	4904      	ldr	r1, [pc, #16]	@ (8003a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0203 	and.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10d      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ac6:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d047      	beq.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e044      	b.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d018      	beq.n	8003b1a <RCCEx_PLLSAI2_Config+0x86>
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d825      	bhi.n	8003b38 <RCCEx_PLLSAI2_Config+0xa4>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x62>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d009      	beq.n	8003b08 <RCCEx_PLLSAI2_Config+0x74>
 8003af4:	e020      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003af6:	4b55      	ldr	r3, [pc, #340]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11d      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b06:	e01a      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b18:	e013      	b.n	8003b42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b26:	4b49      	ldr	r3, [pc, #292]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b36:	e006      	b.n	8003b46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e004      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	430b      	orrs	r3, r1
 8003b64:	4939      	ldr	r1, [pc, #228]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d167      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b70:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fe f994 	bl	8001ea8 <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b84:	f7fe f990 	bl	8001ea8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
        break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b98:	4b2c      	ldr	r3, [pc, #176]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ef      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d14a      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d111      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb0:	4b26      	ldr	r3, [pc, #152]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	0912      	lsrs	r2, r2, #4
 8003bc8:	0452      	lsls	r2, r2, #17
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	491f      	ldr	r1, [pc, #124]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	614b      	str	r3, [r1, #20]
 8003bd2:	e011      	b.n	8003bf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6912      	ldr	r2, [r2, #16]
 8003bea:	0852      	lsrs	r2, r2, #1
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0652      	lsls	r2, r2, #25
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fe f950 	bl	8001ea8 <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c0a:	e009      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c0c:	f7fe f94c 	bl	8001ea8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c1e:	e005      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000

08003c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e095      	b.n	8003d8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d108      	bne.n	8003c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c72:	d009      	beq.n	8003c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	e005      	b.n	8003c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd fe8e 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cc8:	d902      	bls.n	8003cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e002      	b.n	8003cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cde:	d007      	beq.n	8003cf0 <HAL_SPI_Init+0xa0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	ea42 0103 	orr.w	r1, r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 0204 	and.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d6c:	ea42 0103 	orr.w	r1, r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b088      	sub	sp, #32
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da6:	f7fe f87f 	bl	8001ea8 <HAL_GetTick>
 8003daa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e15c      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_Transmit+0x36>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e154      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_Transmit+0x48>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e14d      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d10f      	bne.n	8003e52 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d007      	beq.n	8003e70 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e78:	d952      	bls.n	8003f20 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Transmit+0xf2>
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d145      	bne.n	8003f14 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eac:	e032      	b.n	8003f14 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d112      	bne.n	8003ee2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ee0:	e018      	b.n	8003f14 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee2:	f7fd ffe1 	bl	8001ea8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d803      	bhi.n	8003efa <HAL_SPI_Transmit+0x164>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Transmit+0x16a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0b2      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1c7      	bne.n	8003eae <HAL_SPI_Transmit+0x118>
 8003f1e:	e083      	b.n	8004028 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_Transmit+0x198>
 8003f28:	8b7b      	ldrh	r3, [r7, #26]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d177      	bne.n	800401e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d912      	bls.n	8003f5e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	1c9a      	adds	r2, r3, #2
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b02      	subs	r3, #2
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f5c:	e05f      	b.n	800401e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f84:	e04b      	b.n	800401e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d12b      	bne.n	8003fec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d912      	bls.n	8003fc4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b02      	subs	r3, #2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fc2:	e02c      	b.n	800401e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fea:	e018      	b.n	800401e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fec:	f7fd ff5c 	bl	8001ea8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d803      	bhi.n	8004004 <HAL_SPI_Transmit+0x26e>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <HAL_SPI_Transmit+0x274>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e02d      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ae      	bne.n	8003f86 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fe15 	bl	8004c5c <SPI_EndRxTxTransaction>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004078:	2300      	movs	r3, #0
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af02      	add	r7, sp, #8
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	e123      	b.n	80042ea <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040aa:	d112      	bne.n	80040d2 <HAL_SPI_Receive+0x50>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10e      	bne.n	80040d2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2204      	movs	r2, #4
 80040b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f912 	bl	80042f2 <HAL_SPI_TransmitReceive>
 80040ce:	4603      	mov	r3, r0
 80040d0:	e10b      	b.n	80042ea <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d2:	f7fd fee9 	bl	8001ea8 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Receive+0x62>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e100      	b.n	80042ea <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Receive+0x74>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0f9      	b.n	80042ea <HAL_SPI_Receive+0x268>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2204      	movs	r2, #4
 8004102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004148:	d908      	bls.n	800415c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	e007      	b.n	800416c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004174:	d10f      	bne.n	8004196 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004184:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004194:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	d007      	beq.n	80041b4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041bc:	d875      	bhi.n	80042aa <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041be:	e037      	b.n	8004230 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d117      	bne.n	80041fe <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f103 020c 	add.w	r2, r3, #12
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80041fc:	e018      	b.n	8004230 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fe:	f7fd fe53 	bl	8001ea8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d803      	bhi.n	8004216 <HAL_SPI_Receive+0x194>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d102      	bne.n	800421c <HAL_SPI_Receive+0x19a>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e05c      	b.n	80042ea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1c1      	bne.n	80041c0 <HAL_SPI_Receive+0x13e>
 800423c:	e03b      	b.n	80042b6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d115      	bne.n	8004278 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	b292      	uxth	r2, r2
 8004258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004276:	e018      	b.n	80042aa <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004278:	f7fd fe16 	bl	8001ea8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d803      	bhi.n	8004290 <HAL_SPI_Receive+0x20e>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Receive+0x214>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e01f      	b.n	80042ea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1c3      	bne.n	800423e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fc76 	bl	8004bac <SPI_EndRxTransaction>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004300:	2301      	movs	r3, #1
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004304:	f7fd fdd0 	bl	8001ea8 <HAL_GetTick>
 8004308:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004310:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004320:	7ffb      	ldrb	r3, [r7, #31]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d00c      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x4e>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432c:	d106      	bne.n	800433c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_SPI_TransmitReceive+0x4a>
 8004336:	7ffb      	ldrb	r3, [r7, #31]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d001      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
 800433e:	e1f3      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x60>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x60>
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1e8      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x72>
 8004360:	2302      	movs	r3, #2
 8004362:	e1e1      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b04      	cmp	r3, #4
 8004376:	d003      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2205      	movs	r2, #5
 800437c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	887a      	ldrh	r2, [r7, #2]
 80043a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043c2:	d802      	bhi.n	80043ca <HAL_SPI_TransmitReceive+0xd8>
 80043c4:	8abb      	ldrh	r3, [r7, #20]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d908      	bls.n	80043dc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e007      	b.n	80043ec <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b40      	cmp	r3, #64	@ 0x40
 80043f8:	d007      	beq.n	800440a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004412:	f240 8083 	bls.w	800451c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_TransmitReceive+0x132>
 800441e:	8afb      	ldrh	r3, [r7, #22]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d16f      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	881a      	ldrh	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	1c9a      	adds	r2, r3, #2
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004448:	e05c      	b.n	8004504 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d11b      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x19e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x19e>
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	2b01      	cmp	r3, #1
 8004466:	d113      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	1c9a      	adds	r2, r3, #2
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d11c      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x1e6>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	b292      	uxth	r2, r2
 80044b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	1c9a      	adds	r2, r3, #2
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044d4:	2301      	movs	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044d8:	f7fd fce6 	bl	8001ea8 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d80d      	bhi.n	8004504 <HAL_SPI_TransmitReceive+0x212>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d009      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e111      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d19d      	bne.n	800444a <HAL_SPI_TransmitReceive+0x158>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d197      	bne.n	800444a <HAL_SPI_TransmitReceive+0x158>
 800451a:	e0e5      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_SPI_TransmitReceive+0x23a>
 8004524:	8afb      	ldrh	r3, [r7, #22]
 8004526:	2b01      	cmp	r3, #1
 8004528:	f040 80d1 	bne.w	80046ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d912      	bls.n	800455c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b02      	subs	r3, #2
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800455a:	e0b8      	b.n	80046ce <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004582:	e0a4      	b.n	80046ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d134      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x30a>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02f      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x30a>
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d12c      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d912      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b02      	subs	r3, #2
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045d0:	e012      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d148      	bne.n	800469c <HAL_SPI_TransmitReceive+0x3aa>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d042      	beq.n	800469c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d923      	bls.n	800466a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	b292      	uxth	r2, r2
 800462e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b02      	subs	r3, #2
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d81f      	bhi.n	8004698 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	e016      	b.n	8004698 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f103 020c 	add.w	r2, r3, #12
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800469c:	f7fd fc04 	bl	8001ea8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d803      	bhi.n	80046b4 <HAL_SPI_TransmitReceive+0x3c2>
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d102      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x3c8>
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e02c      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f af55 	bne.w	8004584 <HAL_SPI_TransmitReceive+0x292>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f af4e 	bne.w	8004584 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fab5 	bl	8004c5c <SPI_EndRxTxTransaction>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e00e      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004726:	2300      	movs	r3, #0
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	@ 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
    return;
 8004772:	e0d7      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_SPI_IRQHandler+0x66>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
    return;
 8004794:	e0c6      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_SPI_IRQHandler+0x8c>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80b4 	beq.w	8004924 <HAL_SPI_IRQHandler+0x1f4>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80ad 	beq.w	8004924 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d023      	beq.n	800481e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d011      	beq.n	8004806 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	e00b      	b.n	800481e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
        return;
 800481c:	e082      	b.n	8004924 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004864:	f043 0208 	orr.w	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04f      	beq.n	8004922 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004890:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_SPI_IRQHandler+0x17e>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_SPI_IRQHandler+0x1fc>)
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fc67 	bl	80021a6 <HAL_DMA_Abort_IT>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	4a0d      	ldr	r2, [pc, #52]	@ (800492c <HAL_SPI_IRQHandler+0x1fc>)
 80048f8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fc51 	bl	80021a6 <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800490e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004916:	e003      	b.n	8004920 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f809 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800491e:	e000      	b.n	8004922 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004920:	bf00      	nop
    return;
 8004922:	bf00      	nop
  }
}
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	08004945 	.word	0x08004945

08004930 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff ffe5 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004980:	f7fd fa92 	bl	8001ea8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004990:	f7fd fa8a 	bl	8001ea8 <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004996:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	0d1b      	lsrs	r3, r3, #20
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049a6:	e054      	b.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d050      	beq.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b0:	f7fd fa7a 	bl	8001ea8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d902      	bls.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d13d      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049de:	d111      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e8:	d004      	beq.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d107      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d10f      	bne.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e017      	b.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d19b      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000

08004a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a92:	f7fd fa09 	bl	8001ea8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004aa2:	f7fd fa01 	bl	8001ea8 <HAL_GetTick>
 8004aa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	0d1b      	lsrs	r3, r3, #20
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ac8:	e060      	b.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ad0:	d107      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d050      	beq.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aea:	f7fd f9dd 	bl	8001ea8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d902      	bls.n	8004b00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13d      	bne.n	8004b7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b18:	d111      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b22:	d004      	beq.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2c:	d107      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b46:	d10f      	bne.n	8004b68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e010      	b.n	8004b9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d196      	bne.n	8004aca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	@ 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000000 	.word	0x20000000

08004bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc0:	d111      	bne.n	8004be6 <SPI_EndRxTransaction+0x3a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bca:	d004      	beq.n	8004bd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd4:	d107      	bne.n	8004be6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2180      	movs	r1, #128	@ 0x80
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff febd 	bl	8004970 <SPI_WaitFlagStateUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e023      	b.n	8004c54 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c14:	d11d      	bne.n	8004c52 <SPI_EndRxTransaction+0xa6>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1e:	d004      	beq.n	8004c2a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c28:	d113      	bne.n	8004c52 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff22 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e000      	b.n	8004c54 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff03 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e027      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2180      	movs	r1, #128	@ 0x80
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff fe68 	bl	8004970 <SPI_WaitFlagStateUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e014      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff fedc 	bl	8004a80 <SPI_WaitFifoStateUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e000      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e040      	b.n	8004d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fea6 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	@ 0x24
 8004d14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fe52 	bl	80059d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb97 	bl	8005468 <UART_SetConfig>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e01b      	b.n	8004d7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fed1 	bl	8005b1c <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	@ 0x28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d137      	bne.n	8004e0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Receive_IT+0x24>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e030      	b.n	8004e0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_UART_Receive_IT+0x94>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d01f      	beq.n	8004dfc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 ffa0 	bl	8005d48 <UART_Start_Receive_IT>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	e000      	b.n	8004e0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3728      	adds	r7, #40	@ 0x28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40008000 	.word	0x40008000

08004e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d115      	bne.n	8004e84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00f      	beq.n	8004e84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 82ca 	beq.w	800540e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
      }
      return;
 8004e82:	e2c4      	b.n	800540e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8117 	beq.w	80050bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e9e:	4b85      	ldr	r3, [pc, #532]	@ (80050b4 <HAL_UART_IRQHandler+0x298>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 810a 	beq.w	80050bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d011      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xbc>
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d011      	beq.n	8004f08 <HAL_UART_IRQHandler+0xec>
 8004ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <HAL_UART_IRQHandler+0x11c>
 8004f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2204      	movs	r2, #4
 8004f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6a:	f043 0208 	orr.w	r2, r3, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x18a>
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8230 	beq.w	8005412 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04f      	beq.n	800509e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 ff68 	bl	8005ed4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	d141      	bne.n	8005096 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800502c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800503e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800504a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d9      	bne.n	8005012 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005062:	2b00      	cmp	r3, #0
 8005064:	d013      	beq.n	800508e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	4a13      	ldr	r2, [pc, #76]	@ (80050b8 <HAL_UART_IRQHandler+0x29c>)
 800506c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005072:	4618      	mov	r0, r3
 8005074:	f7fd f897 	bl	80021a6 <HAL_DMA_Abort_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d017      	beq.n	80050ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	e00f      	b.n	80050ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9d4 	bl	800543c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	e00b      	b.n	80050ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9d0 	bl	800543c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	e007      	b.n	80050ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9cc 	bl	800543c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80050ac:	e1b1      	b.n	8005412 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ae:	bf00      	nop
    return;
 80050b0:	e1af      	b.n	8005412 <HAL_UART_IRQHandler+0x5f6>
 80050b2:	bf00      	nop
 80050b4:	04000120 	.word	0x04000120
 80050b8:	08005f9d 	.word	0x08005f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	f040 816a 	bne.w	800539a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8163 	beq.w	800539a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 815c 	beq.w	800539a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	f040 80d4 	bne.w	80052a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005106:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80ad 	beq.w	800526a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800511a:	429a      	cmp	r2, r3
 800511c:	f080 80a5 	bcs.w	800526a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005126:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 8086 	bne.w	8005248 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1da      	bne.n	800513c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e1      	bne.n	8005186 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e3      	bne.n	80051c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800522a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800522c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e4      	bne.n	8005208 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc ff71 	bl	800212a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800525a:	b29b      	uxth	r3, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	b29b      	uxth	r3, r3
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8f4 	bl	8005450 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005268:	e0d5      	b.n	8005416 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005274:	429a      	cmp	r2, r3
 8005276:	f040 80ce 	bne.w	8005416 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	f040 80c5 	bne.w	8005416 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8d8 	bl	8005450 <HAL_UARTEx_RxEventCallback>
      return;
 80052a0:	e0b9      	b.n	8005416 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80ab 	beq.w	800541a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80052c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a6 	beq.w	800541a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e4      	bne.n	80052ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	623b      	str	r3, [r7, #32]
   return(result);
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005328:	633a      	str	r2, [r7, #48]	@ 0x30
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800532e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e3      	bne.n	8005304 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	60fb      	str	r3, [r7, #12]
   return(result);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0310 	bic.w	r3, r3, #16
 8005364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	69b9      	ldr	r1, [r7, #24]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	617b      	str	r3, [r7, #20]
   return(result);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e4      	bne.n	8005350 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800538c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f85c 	bl	8005450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005398:	e03f      	b.n	800541a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <HAL_UART_IRQHandler+0x5a8>
 80053a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ffe9 	bl	8006394 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053c2:	e02d      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00e      	beq.n	80053ee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
    }
    return;
 80053ec:	e017      	b.n	800541e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d012      	beq.n	8005420 <HAL_UART_IRQHandler+0x604>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fdde 	bl	8005fc8 <UART_EndTransmit_IT>
    return;
 800540c:	e008      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
      return;
 800540e:	bf00      	nop
 8005410:	e006      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
    return;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
      return;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
      return;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_UART_IRQHandler+0x604>
    return;
 800541e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005420:	37e8      	adds	r7, #232	@ 0xe8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop

08005428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b08a      	sub	sp, #40	@ 0x28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4313      	orrs	r3, r2
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4ba4      	ldr	r3, [pc, #656]	@ (8005728 <UART_SetConfig+0x2c0>)
 8005498:	4013      	ands	r3, r2
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a99      	ldr	r2, [pc, #612]	@ (800572c <UART_SetConfig+0x2c4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	4313      	orrs	r3, r2
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a90      	ldr	r2, [pc, #576]	@ (8005730 <UART_SetConfig+0x2c8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d126      	bne.n	8005540 <UART_SetConfig+0xd8>
 80054f2:	4b90      	ldr	r3, [pc, #576]	@ (8005734 <UART_SetConfig+0x2cc>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d81b      	bhi.n	8005538 <UART_SetConfig+0xd0>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <UART_SetConfig+0xa0>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	08005529 	.word	0x08005529
 8005510:	08005521 	.word	0x08005521
 8005514:	08005531 	.word	0x08005531
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551e:	e116      	b.n	800574e <UART_SetConfig+0x2e6>
 8005520:	2302      	movs	r3, #2
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005526:	e112      	b.n	800574e <UART_SetConfig+0x2e6>
 8005528:	2304      	movs	r3, #4
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552e:	e10e      	b.n	800574e <UART_SetConfig+0x2e6>
 8005530:	2308      	movs	r3, #8
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005536:	e10a      	b.n	800574e <UART_SetConfig+0x2e6>
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553e:	e106      	b.n	800574e <UART_SetConfig+0x2e6>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a7c      	ldr	r2, [pc, #496]	@ (8005738 <UART_SetConfig+0x2d0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d138      	bne.n	80055bc <UART_SetConfig+0x154>
 800554a:	4b7a      	ldr	r3, [pc, #488]	@ (8005734 <UART_SetConfig+0x2cc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b0c      	cmp	r3, #12
 8005556:	d82d      	bhi.n	80055b4 <UART_SetConfig+0x14c>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <UART_SetConfig+0xf8>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005595 	.word	0x08005595
 8005564:	080055b5 	.word	0x080055b5
 8005568:	080055b5 	.word	0x080055b5
 800556c:	080055b5 	.word	0x080055b5
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055b5 	.word	0x080055b5
 800557c:	080055b5 	.word	0x080055b5
 8005580:	0800559d 	.word	0x0800559d
 8005584:	080055b5 	.word	0x080055b5
 8005588:	080055b5 	.word	0x080055b5
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055ad 	.word	0x080055ad
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559a:	e0d8      	b.n	800574e <UART_SetConfig+0x2e6>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a2:	e0d4      	b.n	800574e <UART_SetConfig+0x2e6>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055aa:	e0d0      	b.n	800574e <UART_SetConfig+0x2e6>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e0cc      	b.n	800574e <UART_SetConfig+0x2e6>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e0c8      	b.n	800574e <UART_SetConfig+0x2e6>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5e      	ldr	r2, [pc, #376]	@ (800573c <UART_SetConfig+0x2d4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d125      	bne.n	8005612 <UART_SetConfig+0x1aa>
 80055c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005734 <UART_SetConfig+0x2cc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d016      	beq.n	8005602 <UART_SetConfig+0x19a>
 80055d4:	2b30      	cmp	r3, #48	@ 0x30
 80055d6:	d818      	bhi.n	800560a <UART_SetConfig+0x1a2>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d00a      	beq.n	80055f2 <UART_SetConfig+0x18a>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d814      	bhi.n	800560a <UART_SetConfig+0x1a2>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <UART_SetConfig+0x182>
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d008      	beq.n	80055fa <UART_SetConfig+0x192>
 80055e8:	e00f      	b.n	800560a <UART_SetConfig+0x1a2>
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f0:	e0ad      	b.n	800574e <UART_SetConfig+0x2e6>
 80055f2:	2302      	movs	r3, #2
 80055f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f8:	e0a9      	b.n	800574e <UART_SetConfig+0x2e6>
 80055fa:	2304      	movs	r3, #4
 80055fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005600:	e0a5      	b.n	800574e <UART_SetConfig+0x2e6>
 8005602:	2308      	movs	r3, #8
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005608:	e0a1      	b.n	800574e <UART_SetConfig+0x2e6>
 800560a:	2310      	movs	r3, #16
 800560c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005610:	e09d      	b.n	800574e <UART_SetConfig+0x2e6>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a4a      	ldr	r2, [pc, #296]	@ (8005740 <UART_SetConfig+0x2d8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d125      	bne.n	8005668 <UART_SetConfig+0x200>
 800561c:	4b45      	ldr	r3, [pc, #276]	@ (8005734 <UART_SetConfig+0x2cc>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005626:	2bc0      	cmp	r3, #192	@ 0xc0
 8005628:	d016      	beq.n	8005658 <UART_SetConfig+0x1f0>
 800562a:	2bc0      	cmp	r3, #192	@ 0xc0
 800562c:	d818      	bhi.n	8005660 <UART_SetConfig+0x1f8>
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d00a      	beq.n	8005648 <UART_SetConfig+0x1e0>
 8005632:	2b80      	cmp	r3, #128	@ 0x80
 8005634:	d814      	bhi.n	8005660 <UART_SetConfig+0x1f8>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <UART_SetConfig+0x1d8>
 800563a:	2b40      	cmp	r3, #64	@ 0x40
 800563c:	d008      	beq.n	8005650 <UART_SetConfig+0x1e8>
 800563e:	e00f      	b.n	8005660 <UART_SetConfig+0x1f8>
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005646:	e082      	b.n	800574e <UART_SetConfig+0x2e6>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564e:	e07e      	b.n	800574e <UART_SetConfig+0x2e6>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005656:	e07a      	b.n	800574e <UART_SetConfig+0x2e6>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565e:	e076      	b.n	800574e <UART_SetConfig+0x2e6>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005666:	e072      	b.n	800574e <UART_SetConfig+0x2e6>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a35      	ldr	r2, [pc, #212]	@ (8005744 <UART_SetConfig+0x2dc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d12a      	bne.n	80056c8 <UART_SetConfig+0x260>
 8005672:	4b30      	ldr	r3, [pc, #192]	@ (8005734 <UART_SetConfig+0x2cc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005680:	d01a      	beq.n	80056b8 <UART_SetConfig+0x250>
 8005682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005686:	d81b      	bhi.n	80056c0 <UART_SetConfig+0x258>
 8005688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568c:	d00c      	beq.n	80056a8 <UART_SetConfig+0x240>
 800568e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005692:	d815      	bhi.n	80056c0 <UART_SetConfig+0x258>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <UART_SetConfig+0x238>
 8005698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569c:	d008      	beq.n	80056b0 <UART_SetConfig+0x248>
 800569e:	e00f      	b.n	80056c0 <UART_SetConfig+0x258>
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a6:	e052      	b.n	800574e <UART_SetConfig+0x2e6>
 80056a8:	2302      	movs	r3, #2
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ae:	e04e      	b.n	800574e <UART_SetConfig+0x2e6>
 80056b0:	2304      	movs	r3, #4
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b6:	e04a      	b.n	800574e <UART_SetConfig+0x2e6>
 80056b8:	2308      	movs	r3, #8
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056be:	e046      	b.n	800574e <UART_SetConfig+0x2e6>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c6:	e042      	b.n	800574e <UART_SetConfig+0x2e6>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a17      	ldr	r2, [pc, #92]	@ (800572c <UART_SetConfig+0x2c4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d13a      	bne.n	8005748 <UART_SetConfig+0x2e0>
 80056d2:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <UART_SetConfig+0x2cc>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e0:	d01a      	beq.n	8005718 <UART_SetConfig+0x2b0>
 80056e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e6:	d81b      	bhi.n	8005720 <UART_SetConfig+0x2b8>
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d00c      	beq.n	8005708 <UART_SetConfig+0x2a0>
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f2:	d815      	bhi.n	8005720 <UART_SetConfig+0x2b8>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <UART_SetConfig+0x298>
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fc:	d008      	beq.n	8005710 <UART_SetConfig+0x2a8>
 80056fe:	e00f      	b.n	8005720 <UART_SetConfig+0x2b8>
 8005700:	2300      	movs	r3, #0
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005706:	e022      	b.n	800574e <UART_SetConfig+0x2e6>
 8005708:	2302      	movs	r3, #2
 800570a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570e:	e01e      	b.n	800574e <UART_SetConfig+0x2e6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005716:	e01a      	b.n	800574e <UART_SetConfig+0x2e6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571e:	e016      	b.n	800574e <UART_SetConfig+0x2e6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005726:	e012      	b.n	800574e <UART_SetConfig+0x2e6>
 8005728:	efff69f3 	.word	0xefff69f3
 800572c:	40008000 	.word	0x40008000
 8005730:	40013800 	.word	0x40013800
 8005734:	40021000 	.word	0x40021000
 8005738:	40004400 	.word	0x40004400
 800573c:	40004800 	.word	0x40004800
 8005740:	40004c00 	.word	0x40004c00
 8005744:	40005000 	.word	0x40005000
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a9f      	ldr	r2, [pc, #636]	@ (80059d0 <UART_SetConfig+0x568>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d17a      	bne.n	800584e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005758:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800575c:	2b08      	cmp	r3, #8
 800575e:	d824      	bhi.n	80057aa <UART_SetConfig+0x342>
 8005760:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x300>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057ab 	.word	0x080057ab
 8005770:	08005795 	.word	0x08005795
 8005774:	080057ab 	.word	0x080057ab
 8005778:	0800579b 	.word	0x0800579b
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057ab 	.word	0x080057ab
 8005784:	080057ab 	.word	0x080057ab
 8005788:	080057a3 	.word	0x080057a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fd fd18 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8005790:	61f8      	str	r0, [r7, #28]
        break;
 8005792:	e010      	b.n	80057b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005794:	4b8f      	ldr	r3, [pc, #572]	@ (80059d4 <UART_SetConfig+0x56c>)
 8005796:	61fb      	str	r3, [r7, #28]
        break;
 8005798:	e00d      	b.n	80057b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579a:	f7fd fc79 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800579e:	61f8      	str	r0, [r7, #28]
        break;
 80057a0:	e009      	b.n	80057b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a6:	61fb      	str	r3, [r7, #28]
        break;
 80057a8:	e005      	b.n	80057b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80fb 	beq.w	80059b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d305      	bcc.n	80057da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057e0:	e0e8      	b.n	80059b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2200      	movs	r2, #0
 80057e6:	461c      	mov	r4, r3
 80057e8:	4615      	mov	r5, r2
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	022b      	lsls	r3, r5, #8
 80057f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057f8:	0222      	lsls	r2, r4, #8
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	6849      	ldr	r1, [r1, #4]
 80057fe:	0849      	lsrs	r1, r1, #1
 8005800:	2000      	movs	r0, #0
 8005802:	4688      	mov	r8, r1
 8005804:	4681      	mov	r9, r0
 8005806:	eb12 0a08 	adds.w	sl, r2, r8
 800580a:	eb43 0b09 	adc.w	fp, r3, r9
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	f7fb fa32 	bl	8000c88 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4613      	mov	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005832:	d308      	bcc.n	8005846 <UART_SetConfig+0x3de>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583a:	d204      	bcs.n	8005846 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	e0b6      	b.n	80059b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800584c:	e0b2      	b.n	80059b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005856:	d15e      	bne.n	8005916 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800585c:	2b08      	cmp	r3, #8
 800585e:	d828      	bhi.n	80058b2 <UART_SetConfig+0x44a>
 8005860:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <UART_SetConfig+0x400>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589d 	.word	0x0800589d
 8005874:	080058b3 	.word	0x080058b3
 8005878:	080058a3 	.word	0x080058a3
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058b3 	.word	0x080058b3
 8005884:	080058b3 	.word	0x080058b3
 8005888:	080058ab 	.word	0x080058ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fd fc98 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8005890:	61f8      	str	r0, [r7, #28]
        break;
 8005892:	e014      	b.n	80058be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fd fcaa 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8005898:	61f8      	str	r0, [r7, #28]
        break;
 800589a:	e010      	b.n	80058be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589c:	4b4d      	ldr	r3, [pc, #308]	@ (80059d4 <UART_SetConfig+0x56c>)
 800589e:	61fb      	str	r3, [r7, #28]
        break;
 80058a0:	e00d      	b.n	80058be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fd fbf5 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80058a6:	61f8      	str	r0, [r7, #28]
        break;
 80058a8:	e009      	b.n	80058be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ae:	61fb      	str	r3, [r7, #28]
        break;
 80058b0:	e005      	b.n	80058be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d077      	beq.n	80059b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005a      	lsls	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b0f      	cmp	r3, #15
 80058de:	d916      	bls.n	800590e <UART_SetConfig+0x4a6>
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e6:	d212      	bcs.n	800590e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f023 030f 	bic.w	r3, r3, #15
 80058f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	8afb      	ldrh	r3, [r7, #22]
 8005900:	4313      	orrs	r3, r2
 8005902:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	8afa      	ldrh	r2, [r7, #22]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	e052      	b.n	80059b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005914:	e04e      	b.n	80059b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800591a:	2b08      	cmp	r3, #8
 800591c:	d827      	bhi.n	800596e <UART_SetConfig+0x506>
 800591e:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0x4bc>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	0800596f 	.word	0x0800596f
 8005934:	0800595f 	.word	0x0800595f
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800596f 	.word	0x0800596f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fd fc3a 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 800594c:	61f8      	str	r0, [r7, #28]
        break;
 800594e:	e014      	b.n	800597a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005950:	f7fd fc4c 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8005954:	61f8      	str	r0, [r7, #28]
        break;
 8005956:	e010      	b.n	800597a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b1e      	ldr	r3, [pc, #120]	@ (80059d4 <UART_SetConfig+0x56c>)
 800595a:	61fb      	str	r3, [r7, #28]
        break;
 800595c:	e00d      	b.n	800597a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fd fb97 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8005962:	61f8      	str	r0, [r7, #28]
        break;
 8005964:	e009      	b.n	800597a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	61fb      	str	r3, [r7, #28]
        break;
 800596c:	e005      	b.n	800597a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005978:	bf00      	nop
    }

    if (pclk != 0U)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d019      	beq.n	80059b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	085a      	lsrs	r2, r3, #1
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	d909      	bls.n	80059ae <UART_SetConfig+0x546>
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a0:	d205      	bcs.n	80059ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e002      	b.n	80059b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3728      	adds	r7, #40	@ 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ce:	bf00      	nop
 80059d0:	40008000 	.word	0x40008000
 80059d4:	00f42400 	.word	0x00f42400

080059d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01a      	beq.n	8005aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad6:	d10a      	bne.n	8005aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b098      	sub	sp, #96	@ 0x60
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b2c:	f7fc f9bc 	bl	8001ea8 <HAL_GetTick>
 8005b30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d12e      	bne.n	8005b9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f88c 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d021      	beq.n	8005b9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e6      	bne.n	8005b5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e062      	b.n	8005c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d149      	bne.n	8005c40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f856 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d03c      	beq.n	8005c40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c18:	61fa      	str	r2, [r7, #28]
 8005c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	617b      	str	r3, [r7, #20]
   return(result);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e011      	b.n	8005c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3758      	adds	r7, #88	@ 0x58
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	e04f      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d04b      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fc f90f 	bl	8001ea8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e04e      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d037      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b80      	cmp	r3, #128	@ 0x80
 8005cb2:	d034      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d031      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d110      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f8ff 	bl	8005ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e029      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf8:	d111      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f8e5 	bl	8005ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0a0      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b097      	sub	sp, #92	@ 0x5c
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d10e      	bne.n	8005d9a <UART_Start_Receive_IT+0x52>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <UART_Start_Receive_IT+0x48>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d8e:	e02d      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	22ff      	movs	r2, #255	@ 0xff
 8005d94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d98:	e028      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <UART_Start_Receive_IT+0x76>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <UART_Start_Receive_IT+0x6c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22ff      	movs	r2, #255	@ 0xff
 8005dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005db2:	e01b      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	227f      	movs	r2, #127	@ 0x7f
 8005db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dbc:	e016      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <UART_Start_Receive_IT+0x9c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <UART_Start_Receive_IT+0x92>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	227f      	movs	r2, #127	@ 0x7f
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dd8:	e008      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	223f      	movs	r2, #63	@ 0x3f
 8005dde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005de2:	e003      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2222      	movs	r2, #34	@ 0x22
 8005df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e38:	d107      	bne.n	8005e4a <UART_Start_Receive_IT+0x102>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a21      	ldr	r2, [pc, #132]	@ (8005ecc <UART_Start_Receive_IT+0x184>)
 8005e46:	669a      	str	r2, [r3, #104]	@ 0x68
 8005e48:	e002      	b.n	8005e50 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <UART_Start_Receive_IT+0x188>)
 8005e4e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d019      	beq.n	8005e8c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e78:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e6      	bne.n	8005e58 <UART_Start_Receive_IT+0x110>
 8005e8a:	e018      	b.n	8005ebe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f043 0320 	orr.w	r3, r3, #32
 8005ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e6      	bne.n	8005e8c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	375c      	adds	r7, #92	@ 0x5c
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	080061d9 	.word	0x080061d9
 8005ed0:	0800601d 	.word	0x0800601d

08005ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b095      	sub	sp, #84	@ 0x54
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e6      	bne.n	8005edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d118      	bne.n	8005f7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0310 	bic.w	r3, r3, #16
 8005f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f90:	bf00      	nop
 8005f92:	3754      	adds	r7, #84	@ 0x54
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fa3e 	bl	800543c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fa0a 	bl	8005428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b09c      	sub	sp, #112	@ 0x70
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800602a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006034:	2b22      	cmp	r3, #34	@ 0x22
 8006036:	f040 80be 	bne.w	80061b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006040:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006048:	b2d9      	uxtb	r1, r3
 800604a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006054:	400a      	ands	r2, r1
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 80a3 	bne.w	80061ca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80060d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e5      	bne.n	80060b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a34      	ldr	r2, [pc, #208]	@ (80061d4 <UART_RxISR_8BIT+0x1b8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d01f      	beq.n	8006148 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	623b      	str	r3, [r7, #32]
   return(result);
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800612a:	663b      	str	r3, [r7, #96]	@ 0x60
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006134:	633b      	str	r3, [r7, #48]	@ 0x30
 8006136:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800613a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614c:	2b01      	cmp	r3, #1
 800614e:	d12e      	bne.n	80061ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	60fb      	str	r3, [r7, #12]
   return(result);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0310 	bic.w	r3, r3, #16
 800616a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	617b      	str	r3, [r7, #20]
   return(result);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e6      	bne.n	8006156 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	2b10      	cmp	r3, #16
 8006194:	d103      	bne.n	800619e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2210      	movs	r2, #16
 800619c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff f952 	bl	8005450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ac:	e00d      	b.n	80061ca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fa ff36 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 80061b4:	e009      	b.n	80061ca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	8b1b      	ldrh	r3, [r3, #24]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	b292      	uxth	r2, r2
 80061c8:	831a      	strh	r2, [r3, #24]
}
 80061ca:	bf00      	nop
 80061cc:	3770      	adds	r7, #112	@ 0x70
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40008000 	.word	0x40008000

080061d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b09c      	sub	sp, #112	@ 0x70
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f0:	2b22      	cmp	r3, #34	@ 0x22
 80061f2:	f040 80be 	bne.w	8006372 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80061fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006204:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006206:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800620a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800620e:	4013      	ands	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006214:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 80a3 	bne.w	8006386 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800624e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006254:	667b      	str	r3, [r7, #100]	@ 0x64
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800625e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006260:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006264:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800626c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e6      	bne.n	8006240 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	663b      	str	r3, [r7, #96]	@ 0x60
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006292:	643a      	str	r2, [r7, #64]	@ 0x40
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a34      	ldr	r2, [pc, #208]	@ (8006390 <UART_RxISR_16BIT+0x1b8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d01f      	beq.n	8006304 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d018      	beq.n	8006304 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006308:	2b01      	cmp	r3, #1
 800630a:	d12e      	bne.n	800636a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0310 	bic.w	r3, r3, #16
 8006326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	613b      	str	r3, [r7, #16]
   return(result);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b10      	cmp	r3, #16
 8006350:	d103      	bne.n	800635a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2210      	movs	r2, #16
 8006358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff f874 	bl	8005450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006368:	e00d      	b.n	8006386 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa fe58 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 8006370:	e009      	b.n	8006386 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	8b1b      	ldrh	r3, [r3, #24]
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	b292      	uxth	r2, r2
 8006384:	831a      	strh	r2, [r3, #24]
}
 8006386:	bf00      	nop
 8006388:	3770      	adds	r7, #112	@ 0x70
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40008000 	.word	0x40008000

08006394 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <__cvt>:
 80063a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	ec57 6b10 	vmov	r6, r7, d0
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4619      	mov	r1, r3
 80063b6:	463b      	mov	r3, r7
 80063b8:	bfbb      	ittet	lt
 80063ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063be:	461f      	movlt	r7, r3
 80063c0:	2300      	movge	r3, #0
 80063c2:	232d      	movlt	r3, #45	@ 0x2d
 80063c4:	700b      	strb	r3, [r1, #0]
 80063c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063cc:	4691      	mov	r9, r2
 80063ce:	f023 0820 	bic.w	r8, r3, #32
 80063d2:	bfbc      	itt	lt
 80063d4:	4632      	movlt	r2, r6
 80063d6:	4616      	movlt	r6, r2
 80063d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063dc:	d005      	beq.n	80063ea <__cvt+0x42>
 80063de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063e2:	d100      	bne.n	80063e6 <__cvt+0x3e>
 80063e4:	3401      	adds	r4, #1
 80063e6:	2102      	movs	r1, #2
 80063e8:	e000      	b.n	80063ec <__cvt+0x44>
 80063ea:	2103      	movs	r1, #3
 80063ec:	ab03      	add	r3, sp, #12
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	ab02      	add	r3, sp, #8
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	ec47 6b10 	vmov	d0, r6, r7
 80063f8:	4653      	mov	r3, sl
 80063fa:	4622      	mov	r2, r4
 80063fc:	f001 f8e8 	bl	80075d0 <_dtoa_r>
 8006400:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006404:	4605      	mov	r5, r0
 8006406:	d119      	bne.n	800643c <__cvt+0x94>
 8006408:	f019 0f01 	tst.w	r9, #1
 800640c:	d00e      	beq.n	800642c <__cvt+0x84>
 800640e:	eb00 0904 	add.w	r9, r0, r4
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7fa fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800641e:	b108      	cbz	r0, 8006424 <__cvt+0x7c>
 8006420:	f8cd 900c 	str.w	r9, [sp, #12]
 8006424:	2230      	movs	r2, #48	@ 0x30
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	454b      	cmp	r3, r9
 800642a:	d31e      	bcc.n	800646a <__cvt+0xc2>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006430:	1b5b      	subs	r3, r3, r5
 8006432:	4628      	mov	r0, r5
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	b004      	add	sp, #16
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006440:	eb00 0904 	add.w	r9, r0, r4
 8006444:	d1e5      	bne.n	8006412 <__cvt+0x6a>
 8006446:	7803      	ldrb	r3, [r0, #0]
 8006448:	2b30      	cmp	r3, #48	@ 0x30
 800644a:	d10a      	bne.n	8006462 <__cvt+0xba>
 800644c:	2200      	movs	r2, #0
 800644e:	2300      	movs	r3, #0
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7fa fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006458:	b918      	cbnz	r0, 8006462 <__cvt+0xba>
 800645a:	f1c4 0401 	rsb	r4, r4, #1
 800645e:	f8ca 4000 	str.w	r4, [sl]
 8006462:	f8da 3000 	ldr.w	r3, [sl]
 8006466:	4499      	add	r9, r3
 8006468:	e7d3      	b.n	8006412 <__cvt+0x6a>
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	9103      	str	r1, [sp, #12]
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e7d9      	b.n	8006426 <__cvt+0x7e>

08006472 <__exponent>:
 8006472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006474:	2900      	cmp	r1, #0
 8006476:	bfba      	itte	lt
 8006478:	4249      	neglt	r1, r1
 800647a:	232d      	movlt	r3, #45	@ 0x2d
 800647c:	232b      	movge	r3, #43	@ 0x2b
 800647e:	2909      	cmp	r1, #9
 8006480:	7002      	strb	r2, [r0, #0]
 8006482:	7043      	strb	r3, [r0, #1]
 8006484:	dd29      	ble.n	80064da <__exponent+0x68>
 8006486:	f10d 0307 	add.w	r3, sp, #7
 800648a:	461d      	mov	r5, r3
 800648c:	270a      	movs	r7, #10
 800648e:	461a      	mov	r2, r3
 8006490:	fbb1 f6f7 	udiv	r6, r1, r7
 8006494:	fb07 1416 	mls	r4, r7, r6, r1
 8006498:	3430      	adds	r4, #48	@ 0x30
 800649a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800649e:	460c      	mov	r4, r1
 80064a0:	2c63      	cmp	r4, #99	@ 0x63
 80064a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80064a6:	4631      	mov	r1, r6
 80064a8:	dcf1      	bgt.n	800648e <__exponent+0x1c>
 80064aa:	3130      	adds	r1, #48	@ 0x30
 80064ac:	1e94      	subs	r4, r2, #2
 80064ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064b2:	1c41      	adds	r1, r0, #1
 80064b4:	4623      	mov	r3, r4
 80064b6:	42ab      	cmp	r3, r5
 80064b8:	d30a      	bcc.n	80064d0 <__exponent+0x5e>
 80064ba:	f10d 0309 	add.w	r3, sp, #9
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	42ac      	cmp	r4, r5
 80064c2:	bf88      	it	hi
 80064c4:	2300      	movhi	r3, #0
 80064c6:	3302      	adds	r3, #2
 80064c8:	4403      	add	r3, r0
 80064ca:	1a18      	subs	r0, r3, r0
 80064cc:	b003      	add	sp, #12
 80064ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064d8:	e7ed      	b.n	80064b6 <__exponent+0x44>
 80064da:	2330      	movs	r3, #48	@ 0x30
 80064dc:	3130      	adds	r1, #48	@ 0x30
 80064de:	7083      	strb	r3, [r0, #2]
 80064e0:	70c1      	strb	r1, [r0, #3]
 80064e2:	1d03      	adds	r3, r0, #4
 80064e4:	e7f1      	b.n	80064ca <__exponent+0x58>
	...

080064e8 <_printf_float>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	b08d      	sub	sp, #52	@ 0x34
 80064ee:	460c      	mov	r4, r1
 80064f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064f4:	4616      	mov	r6, r2
 80064f6:	461f      	mov	r7, r3
 80064f8:	4605      	mov	r5, r0
 80064fa:	f000 ff45 	bl	8007388 <_localeconv_r>
 80064fe:	6803      	ldr	r3, [r0, #0]
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	4618      	mov	r0, r3
 8006504:	f7f9 feb4 	bl	8000270 <strlen>
 8006508:	2300      	movs	r3, #0
 800650a:	930a      	str	r3, [sp, #40]	@ 0x28
 800650c:	f8d8 3000 	ldr.w	r3, [r8]
 8006510:	9005      	str	r0, [sp, #20]
 8006512:	3307      	adds	r3, #7
 8006514:	f023 0307 	bic.w	r3, r3, #7
 8006518:	f103 0208 	add.w	r2, r3, #8
 800651c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006520:	f8d4 b000 	ldr.w	fp, [r4]
 8006524:	f8c8 2000 	str.w	r2, [r8]
 8006528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800652c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006530:	9307      	str	r3, [sp, #28]
 8006532:	f8cd 8018 	str.w	r8, [sp, #24]
 8006536:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800653a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800653e:	4b9c      	ldr	r3, [pc, #624]	@ (80067b0 <_printf_float+0x2c8>)
 8006540:	f04f 32ff 	mov.w	r2, #4294967295
 8006544:	f7fa faf2 	bl	8000b2c <__aeabi_dcmpun>
 8006548:	bb70      	cbnz	r0, 80065a8 <_printf_float+0xc0>
 800654a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800654e:	4b98      	ldr	r3, [pc, #608]	@ (80067b0 <_printf_float+0x2c8>)
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	f7fa facc 	bl	8000af0 <__aeabi_dcmple>
 8006558:	bb30      	cbnz	r0, 80065a8 <_printf_float+0xc0>
 800655a:	2200      	movs	r2, #0
 800655c:	2300      	movs	r3, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa fabb 	bl	8000adc <__aeabi_dcmplt>
 8006566:	b110      	cbz	r0, 800656e <_printf_float+0x86>
 8006568:	232d      	movs	r3, #45	@ 0x2d
 800656a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656e:	4a91      	ldr	r2, [pc, #580]	@ (80067b4 <_printf_float+0x2cc>)
 8006570:	4b91      	ldr	r3, [pc, #580]	@ (80067b8 <_printf_float+0x2d0>)
 8006572:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006576:	bf8c      	ite	hi
 8006578:	4690      	movhi	r8, r2
 800657a:	4698      	movls	r8, r3
 800657c:	2303      	movs	r3, #3
 800657e:	6123      	str	r3, [r4, #16]
 8006580:	f02b 0304 	bic.w	r3, fp, #4
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	f04f 0900 	mov.w	r9, #0
 800658a:	9700      	str	r7, [sp, #0]
 800658c:	4633      	mov	r3, r6
 800658e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006590:	4621      	mov	r1, r4
 8006592:	4628      	mov	r0, r5
 8006594:	f000 f9d2 	bl	800693c <_printf_common>
 8006598:	3001      	adds	r0, #1
 800659a:	f040 808d 	bne.w	80066b8 <_printf_float+0x1d0>
 800659e:	f04f 30ff 	mov.w	r0, #4294967295
 80065a2:	b00d      	add	sp, #52	@ 0x34
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f7fa fabc 	bl	8000b2c <__aeabi_dcmpun>
 80065b4:	b140      	cbz	r0, 80065c8 <_printf_float+0xe0>
 80065b6:	464b      	mov	r3, r9
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfbc      	itt	lt
 80065bc:	232d      	movlt	r3, #45	@ 0x2d
 80065be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065c2:	4a7e      	ldr	r2, [pc, #504]	@ (80067bc <_printf_float+0x2d4>)
 80065c4:	4b7e      	ldr	r3, [pc, #504]	@ (80067c0 <_printf_float+0x2d8>)
 80065c6:	e7d4      	b.n	8006572 <_printf_float+0x8a>
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065ce:	9206      	str	r2, [sp, #24]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	d13b      	bne.n	800664c <_printf_float+0x164>
 80065d4:	2306      	movs	r3, #6
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065dc:	2300      	movs	r3, #0
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	9303      	str	r3, [sp, #12]
 80065e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80065e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065e8:	ab09      	add	r3, sp, #36	@ 0x24
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	6861      	ldr	r1, [r4, #4]
 80065ee:	ec49 8b10 	vmov	d0, r8, r9
 80065f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7ff fed6 	bl	80063a8 <__cvt>
 80065fc:	9b06      	ldr	r3, [sp, #24]
 80065fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006600:	2b47      	cmp	r3, #71	@ 0x47
 8006602:	4680      	mov	r8, r0
 8006604:	d129      	bne.n	800665a <_printf_float+0x172>
 8006606:	1cc8      	adds	r0, r1, #3
 8006608:	db02      	blt.n	8006610 <_printf_float+0x128>
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	4299      	cmp	r1, r3
 800660e:	dd41      	ble.n	8006694 <_printf_float+0x1ac>
 8006610:	f1aa 0a02 	sub.w	sl, sl, #2
 8006614:	fa5f fa8a 	uxtb.w	sl, sl
 8006618:	3901      	subs	r1, #1
 800661a:	4652      	mov	r2, sl
 800661c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006620:	9109      	str	r1, [sp, #36]	@ 0x24
 8006622:	f7ff ff26 	bl	8006472 <__exponent>
 8006626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006628:	1813      	adds	r3, r2, r0
 800662a:	2a01      	cmp	r2, #1
 800662c:	4681      	mov	r9, r0
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	dc02      	bgt.n	8006638 <_printf_float+0x150>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	07d2      	lsls	r2, r2, #31
 8006636:	d501      	bpl.n	800663c <_printf_float+0x154>
 8006638:	3301      	adds	r3, #1
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0a2      	beq.n	800658a <_printf_float+0xa2>
 8006644:	232d      	movs	r3, #45	@ 0x2d
 8006646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800664a:	e79e      	b.n	800658a <_printf_float+0xa2>
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	2a47      	cmp	r2, #71	@ 0x47
 8006650:	d1c2      	bne.n	80065d8 <_printf_float+0xf0>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1c0      	bne.n	80065d8 <_printf_float+0xf0>
 8006656:	2301      	movs	r3, #1
 8006658:	e7bd      	b.n	80065d6 <_printf_float+0xee>
 800665a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800665e:	d9db      	bls.n	8006618 <_printf_float+0x130>
 8006660:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006664:	d118      	bne.n	8006698 <_printf_float+0x1b0>
 8006666:	2900      	cmp	r1, #0
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	dd0b      	ble.n	8006684 <_printf_float+0x19c>
 800666c:	6121      	str	r1, [r4, #16]
 800666e:	b913      	cbnz	r3, 8006676 <_printf_float+0x18e>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	07d0      	lsls	r0, r2, #31
 8006674:	d502      	bpl.n	800667c <_printf_float+0x194>
 8006676:	3301      	adds	r3, #1
 8006678:	440b      	add	r3, r1
 800667a:	6123      	str	r3, [r4, #16]
 800667c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800667e:	f04f 0900 	mov.w	r9, #0
 8006682:	e7db      	b.n	800663c <_printf_float+0x154>
 8006684:	b913      	cbnz	r3, 800668c <_printf_float+0x1a4>
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	07d2      	lsls	r2, r2, #31
 800668a:	d501      	bpl.n	8006690 <_printf_float+0x1a8>
 800668c:	3302      	adds	r3, #2
 800668e:	e7f4      	b.n	800667a <_printf_float+0x192>
 8006690:	2301      	movs	r3, #1
 8006692:	e7f2      	b.n	800667a <_printf_float+0x192>
 8006694:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669a:	4299      	cmp	r1, r3
 800669c:	db05      	blt.n	80066aa <_printf_float+0x1c2>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	6121      	str	r1, [r4, #16]
 80066a2:	07d8      	lsls	r0, r3, #31
 80066a4:	d5ea      	bpl.n	800667c <_printf_float+0x194>
 80066a6:	1c4b      	adds	r3, r1, #1
 80066a8:	e7e7      	b.n	800667a <_printf_float+0x192>
 80066aa:	2900      	cmp	r1, #0
 80066ac:	bfd4      	ite	le
 80066ae:	f1c1 0202 	rsble	r2, r1, #2
 80066b2:	2201      	movgt	r2, #1
 80066b4:	4413      	add	r3, r2
 80066b6:	e7e0      	b.n	800667a <_printf_float+0x192>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	055a      	lsls	r2, r3, #21
 80066bc:	d407      	bmi.n	80066ce <_printf_float+0x1e6>
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	4642      	mov	r2, r8
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	d12b      	bne.n	8006724 <_printf_float+0x23c>
 80066cc:	e767      	b.n	800659e <_printf_float+0xb6>
 80066ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066d2:	f240 80dd 	bls.w	8006890 <_printf_float+0x3a8>
 80066d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	f7fa f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d033      	beq.n	800674e <_printf_float+0x266>
 80066e6:	4a37      	ldr	r2, [pc, #220]	@ (80067c4 <_printf_float+0x2dc>)
 80066e8:	2301      	movs	r3, #1
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f af54 	beq.w	800659e <_printf_float+0xb6>
 80066f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066fa:	4543      	cmp	r3, r8
 80066fc:	db02      	blt.n	8006704 <_printf_float+0x21c>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	07d8      	lsls	r0, r3, #31
 8006702:	d50f      	bpl.n	8006724 <_printf_float+0x23c>
 8006704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	f43f af45 	beq.w	800659e <_printf_float+0xb6>
 8006714:	f04f 0900 	mov.w	r9, #0
 8006718:	f108 38ff 	add.w	r8, r8, #4294967295
 800671c:	f104 0a1a 	add.w	sl, r4, #26
 8006720:	45c8      	cmp	r8, r9
 8006722:	dc09      	bgt.n	8006738 <_printf_float+0x250>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	079b      	lsls	r3, r3, #30
 8006728:	f100 8103 	bmi.w	8006932 <_printf_float+0x44a>
 800672c:	68e0      	ldr	r0, [r4, #12]
 800672e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006730:	4298      	cmp	r0, r3
 8006732:	bfb8      	it	lt
 8006734:	4618      	movlt	r0, r3
 8006736:	e734      	b.n	80065a2 <_printf_float+0xba>
 8006738:	2301      	movs	r3, #1
 800673a:	4652      	mov	r2, sl
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af2b 	beq.w	800659e <_printf_float+0xb6>
 8006748:	f109 0901 	add.w	r9, r9, #1
 800674c:	e7e8      	b.n	8006720 <_printf_float+0x238>
 800674e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc39      	bgt.n	80067c8 <_printf_float+0x2e0>
 8006754:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <_printf_float+0x2dc>)
 8006756:	2301      	movs	r3, #1
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af1d 	beq.w	800659e <_printf_float+0xb6>
 8006764:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006768:	ea59 0303 	orrs.w	r3, r9, r3
 800676c:	d102      	bne.n	8006774 <_printf_float+0x28c>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	07d9      	lsls	r1, r3, #31
 8006772:	d5d7      	bpl.n	8006724 <_printf_float+0x23c>
 8006774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af0d 	beq.w	800659e <_printf_float+0xb6>
 8006784:	f04f 0a00 	mov.w	sl, #0
 8006788:	f104 0b1a 	add.w	fp, r4, #26
 800678c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678e:	425b      	negs	r3, r3
 8006790:	4553      	cmp	r3, sl
 8006792:	dc01      	bgt.n	8006798 <_printf_float+0x2b0>
 8006794:	464b      	mov	r3, r9
 8006796:	e793      	b.n	80066c0 <_printf_float+0x1d8>
 8006798:	2301      	movs	r3, #1
 800679a:	465a      	mov	r2, fp
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f aefb 	beq.w	800659e <_printf_float+0xb6>
 80067a8:	f10a 0a01 	add.w	sl, sl, #1
 80067ac:	e7ee      	b.n	800678c <_printf_float+0x2a4>
 80067ae:	bf00      	nop
 80067b0:	7fefffff 	.word	0x7fefffff
 80067b4:	0800ab94 	.word	0x0800ab94
 80067b8:	0800ab90 	.word	0x0800ab90
 80067bc:	0800ab9c 	.word	0x0800ab9c
 80067c0:	0800ab98 	.word	0x0800ab98
 80067c4:	0800aba0 	.word	0x0800aba0
 80067c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ce:	4553      	cmp	r3, sl
 80067d0:	bfa8      	it	ge
 80067d2:	4653      	movge	r3, sl
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	4699      	mov	r9, r3
 80067d8:	dc36      	bgt.n	8006848 <_printf_float+0x360>
 80067da:	f04f 0b00 	mov.w	fp, #0
 80067de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e2:	f104 021a 	add.w	r2, r4, #26
 80067e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067e8:	9306      	str	r3, [sp, #24]
 80067ea:	eba3 0309 	sub.w	r3, r3, r9
 80067ee:	455b      	cmp	r3, fp
 80067f0:	dc31      	bgt.n	8006856 <_printf_float+0x36e>
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	459a      	cmp	sl, r3
 80067f6:	dc3a      	bgt.n	800686e <_printf_float+0x386>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d437      	bmi.n	800686e <_printf_float+0x386>
 80067fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006800:	ebaa 0903 	sub.w	r9, sl, r3
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	ebaa 0303 	sub.w	r3, sl, r3
 800680a:	4599      	cmp	r9, r3
 800680c:	bfa8      	it	ge
 800680e:	4699      	movge	r9, r3
 8006810:	f1b9 0f00 	cmp.w	r9, #0
 8006814:	dc33      	bgt.n	800687e <_printf_float+0x396>
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681e:	f104 0b1a 	add.w	fp, r4, #26
 8006822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006824:	ebaa 0303 	sub.w	r3, sl, r3
 8006828:	eba3 0309 	sub.w	r3, r3, r9
 800682c:	4543      	cmp	r3, r8
 800682e:	f77f af79 	ble.w	8006724 <_printf_float+0x23c>
 8006832:	2301      	movs	r3, #1
 8006834:	465a      	mov	r2, fp
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f aeae 	beq.w	800659e <_printf_float+0xb6>
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	e7ec      	b.n	8006822 <_printf_float+0x33a>
 8006848:	4642      	mov	r2, r8
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d1c2      	bne.n	80067da <_printf_float+0x2f2>
 8006854:	e6a3      	b.n	800659e <_printf_float+0xb6>
 8006856:	2301      	movs	r3, #1
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	9206      	str	r2, [sp, #24]
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f ae9c 	beq.w	800659e <_printf_float+0xb6>
 8006866:	9a06      	ldr	r2, [sp, #24]
 8006868:	f10b 0b01 	add.w	fp, fp, #1
 800686c:	e7bb      	b.n	80067e6 <_printf_float+0x2fe>
 800686e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	d1c0      	bne.n	80067fe <_printf_float+0x316>
 800687c:	e68f      	b.n	800659e <_printf_float+0xb6>
 800687e:	9a06      	ldr	r2, [sp, #24]
 8006880:	464b      	mov	r3, r9
 8006882:	4442      	add	r2, r8
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	d1c3      	bne.n	8006816 <_printf_float+0x32e>
 800688e:	e686      	b.n	800659e <_printf_float+0xb6>
 8006890:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006894:	f1ba 0f01 	cmp.w	sl, #1
 8006898:	dc01      	bgt.n	800689e <_printf_float+0x3b6>
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	d536      	bpl.n	800690c <_printf_float+0x424>
 800689e:	2301      	movs	r3, #1
 80068a0:	4642      	mov	r2, r8
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f ae78 	beq.w	800659e <_printf_float+0xb6>
 80068ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	f43f ae70 	beq.w	800659e <_printf_float+0xb6>
 80068be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ca:	f7fa f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ce:	b9c0      	cbnz	r0, 8006902 <_printf_float+0x41a>
 80068d0:	4653      	mov	r3, sl
 80068d2:	f108 0201 	add.w	r2, r8, #1
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	d10c      	bne.n	80068fa <_printf_float+0x412>
 80068e0:	e65d      	b.n	800659e <_printf_float+0xb6>
 80068e2:	2301      	movs	r3, #1
 80068e4:	465a      	mov	r2, fp
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae56 	beq.w	800659e <_printf_float+0xb6>
 80068f2:	f108 0801 	add.w	r8, r8, #1
 80068f6:	45d0      	cmp	r8, sl
 80068f8:	dbf3      	blt.n	80068e2 <_printf_float+0x3fa>
 80068fa:	464b      	mov	r3, r9
 80068fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006900:	e6df      	b.n	80066c2 <_printf_float+0x1da>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	f104 0b1a 	add.w	fp, r4, #26
 800690a:	e7f4      	b.n	80068f6 <_printf_float+0x40e>
 800690c:	2301      	movs	r3, #1
 800690e:	4642      	mov	r2, r8
 8006910:	e7e1      	b.n	80068d6 <_printf_float+0x3ee>
 8006912:	2301      	movs	r3, #1
 8006914:	464a      	mov	r2, r9
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae3e 	beq.w	800659e <_printf_float+0xb6>
 8006922:	f108 0801 	add.w	r8, r8, #1
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800692a:	1a5b      	subs	r3, r3, r1
 800692c:	4543      	cmp	r3, r8
 800692e:	dcf0      	bgt.n	8006912 <_printf_float+0x42a>
 8006930:	e6fc      	b.n	800672c <_printf_float+0x244>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	f104 0919 	add.w	r9, r4, #25
 800693a:	e7f4      	b.n	8006926 <_printf_float+0x43e>

0800693c <_printf_common>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	4616      	mov	r6, r2
 8006942:	4698      	mov	r8, r3
 8006944:	688a      	ldr	r2, [r1, #8]
 8006946:	690b      	ldr	r3, [r1, #16]
 8006948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800694c:	4293      	cmp	r3, r2
 800694e:	bfb8      	it	lt
 8006950:	4613      	movlt	r3, r2
 8006952:	6033      	str	r3, [r6, #0]
 8006954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006958:	4607      	mov	r7, r0
 800695a:	460c      	mov	r4, r1
 800695c:	b10a      	cbz	r2, 8006962 <_printf_common+0x26>
 800695e:	3301      	adds	r3, #1
 8006960:	6033      	str	r3, [r6, #0]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	0699      	lsls	r1, r3, #26
 8006966:	bf42      	ittt	mi
 8006968:	6833      	ldrmi	r3, [r6, #0]
 800696a:	3302      	addmi	r3, #2
 800696c:	6033      	strmi	r3, [r6, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	f015 0506 	ands.w	r5, r5, #6
 8006974:	d106      	bne.n	8006984 <_printf_common+0x48>
 8006976:	f104 0a19 	add.w	sl, r4, #25
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	6832      	ldr	r2, [r6, #0]
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	42ab      	cmp	r3, r5
 8006982:	dc26      	bgt.n	80069d2 <_printf_common+0x96>
 8006984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	3b00      	subs	r3, #0
 800698c:	bf18      	it	ne
 800698e:	2301      	movne	r3, #1
 8006990:	0692      	lsls	r2, r2, #26
 8006992:	d42b      	bmi.n	80069ec <_printf_common+0xb0>
 8006994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006998:	4641      	mov	r1, r8
 800699a:	4638      	mov	r0, r7
 800699c:	47c8      	blx	r9
 800699e:	3001      	adds	r0, #1
 80069a0:	d01e      	beq.n	80069e0 <_printf_common+0xa4>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	6922      	ldr	r2, [r4, #16]
 80069a6:	f003 0306 	and.w	r3, r3, #6
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	bf02      	ittt	eq
 80069ae:	68e5      	ldreq	r5, [r4, #12]
 80069b0:	6833      	ldreq	r3, [r6, #0]
 80069b2:	1aed      	subeq	r5, r5, r3
 80069b4:	68a3      	ldr	r3, [r4, #8]
 80069b6:	bf0c      	ite	eq
 80069b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069bc:	2500      	movne	r5, #0
 80069be:	4293      	cmp	r3, r2
 80069c0:	bfc4      	itt	gt
 80069c2:	1a9b      	subgt	r3, r3, r2
 80069c4:	18ed      	addgt	r5, r5, r3
 80069c6:	2600      	movs	r6, #0
 80069c8:	341a      	adds	r4, #26
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d11a      	bne.n	8006a04 <_printf_common+0xc8>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e008      	b.n	80069e4 <_printf_common+0xa8>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4641      	mov	r1, r8
 80069d8:	4638      	mov	r0, r7
 80069da:	47c8      	blx	r9
 80069dc:	3001      	adds	r0, #1
 80069de:	d103      	bne.n	80069e8 <_printf_common+0xac>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	3501      	adds	r5, #1
 80069ea:	e7c6      	b.n	800697a <_printf_common+0x3e>
 80069ec:	18e1      	adds	r1, r4, r3
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	2030      	movs	r0, #48	@ 0x30
 80069f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069f6:	4422      	add	r2, r4
 80069f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a00:	3302      	adds	r3, #2
 8006a02:	e7c7      	b.n	8006994 <_printf_common+0x58>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4622      	mov	r2, r4
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c8      	blx	r9
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d0e6      	beq.n	80069e0 <_printf_common+0xa4>
 8006a12:	3601      	adds	r6, #1
 8006a14:	e7d9      	b.n	80069ca <_printf_common+0x8e>
	...

08006a18 <_printf_i>:
 8006a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	7e0f      	ldrb	r7, [r1, #24]
 8006a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a20:	2f78      	cmp	r7, #120	@ 0x78
 8006a22:	4691      	mov	r9, r2
 8006a24:	4680      	mov	r8, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	469a      	mov	sl, r3
 8006a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a2e:	d807      	bhi.n	8006a40 <_printf_i+0x28>
 8006a30:	2f62      	cmp	r7, #98	@ 0x62
 8006a32:	d80a      	bhi.n	8006a4a <_printf_i+0x32>
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f000 80d1 	beq.w	8006bdc <_printf_i+0x1c4>
 8006a3a:	2f58      	cmp	r7, #88	@ 0x58
 8006a3c:	f000 80b8 	beq.w	8006bb0 <_printf_i+0x198>
 8006a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a48:	e03a      	b.n	8006ac0 <_printf_i+0xa8>
 8006a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a4e:	2b15      	cmp	r3, #21
 8006a50:	d8f6      	bhi.n	8006a40 <_printf_i+0x28>
 8006a52:	a101      	add	r1, pc, #4	@ (adr r1, 8006a58 <_printf_i+0x40>)
 8006a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ac5 	.word	0x08006ac5
 8006a60:	08006a41 	.word	0x08006a41
 8006a64:	08006a41 	.word	0x08006a41
 8006a68:	08006a41 	.word	0x08006a41
 8006a6c:	08006a41 	.word	0x08006a41
 8006a70:	08006ac5 	.word	0x08006ac5
 8006a74:	08006a41 	.word	0x08006a41
 8006a78:	08006a41 	.word	0x08006a41
 8006a7c:	08006a41 	.word	0x08006a41
 8006a80:	08006a41 	.word	0x08006a41
 8006a84:	08006bc3 	.word	0x08006bc3
 8006a88:	08006aef 	.word	0x08006aef
 8006a8c:	08006b7d 	.word	0x08006b7d
 8006a90:	08006a41 	.word	0x08006a41
 8006a94:	08006a41 	.word	0x08006a41
 8006a98:	08006be5 	.word	0x08006be5
 8006a9c:	08006a41 	.word	0x08006a41
 8006aa0:	08006aef 	.word	0x08006aef
 8006aa4:	08006a41 	.word	0x08006a41
 8006aa8:	08006a41 	.word	0x08006a41
 8006aac:	08006b85 	.word	0x08006b85
 8006ab0:	6833      	ldr	r3, [r6, #0]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6032      	str	r2, [r6, #0]
 8006ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e09c      	b.n	8006bfe <_printf_i+0x1e6>
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	1d19      	adds	r1, r3, #4
 8006aca:	6031      	str	r1, [r6, #0]
 8006acc:	0606      	lsls	r6, r0, #24
 8006ace:	d501      	bpl.n	8006ad4 <_printf_i+0xbc>
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	e003      	b.n	8006adc <_printf_i+0xc4>
 8006ad4:	0645      	lsls	r5, r0, #25
 8006ad6:	d5fb      	bpl.n	8006ad0 <_printf_i+0xb8>
 8006ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	da03      	bge.n	8006ae8 <_printf_i+0xd0>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	426d      	negs	r5, r5
 8006ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae8:	4858      	ldr	r0, [pc, #352]	@ (8006c4c <_printf_i+0x234>)
 8006aea:	230a      	movs	r3, #10
 8006aec:	e011      	b.n	8006b12 <_printf_i+0xfa>
 8006aee:	6821      	ldr	r1, [r4, #0]
 8006af0:	6833      	ldr	r3, [r6, #0]
 8006af2:	0608      	lsls	r0, r1, #24
 8006af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006af8:	d402      	bmi.n	8006b00 <_printf_i+0xe8>
 8006afa:	0649      	lsls	r1, r1, #25
 8006afc:	bf48      	it	mi
 8006afe:	b2ad      	uxthmi	r5, r5
 8006b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b02:	4852      	ldr	r0, [pc, #328]	@ (8006c4c <_printf_i+0x234>)
 8006b04:	6033      	str	r3, [r6, #0]
 8006b06:	bf14      	ite	ne
 8006b08:	230a      	movne	r3, #10
 8006b0a:	2308      	moveq	r3, #8
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b12:	6866      	ldr	r6, [r4, #4]
 8006b14:	60a6      	str	r6, [r4, #8]
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	db05      	blt.n	8006b26 <_printf_i+0x10e>
 8006b1a:	6821      	ldr	r1, [r4, #0]
 8006b1c:	432e      	orrs	r6, r5
 8006b1e:	f021 0104 	bic.w	r1, r1, #4
 8006b22:	6021      	str	r1, [r4, #0]
 8006b24:	d04b      	beq.n	8006bbe <_printf_i+0x1a6>
 8006b26:	4616      	mov	r6, r2
 8006b28:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b2c:	fb03 5711 	mls	r7, r3, r1, r5
 8006b30:	5dc7      	ldrb	r7, [r0, r7]
 8006b32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b36:	462f      	mov	r7, r5
 8006b38:	42bb      	cmp	r3, r7
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	d9f4      	bls.n	8006b28 <_printf_i+0x110>
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d10b      	bne.n	8006b5a <_printf_i+0x142>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	07df      	lsls	r7, r3, #31
 8006b46:	d508      	bpl.n	8006b5a <_printf_i+0x142>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	6861      	ldr	r1, [r4, #4]
 8006b4c:	4299      	cmp	r1, r3
 8006b4e:	bfde      	ittt	le
 8006b50:	2330      	movle	r3, #48	@ 0x30
 8006b52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b5a:	1b92      	subs	r2, r2, r6
 8006b5c:	6122      	str	r2, [r4, #16]
 8006b5e:	f8cd a000 	str.w	sl, [sp]
 8006b62:	464b      	mov	r3, r9
 8006b64:	aa03      	add	r2, sp, #12
 8006b66:	4621      	mov	r1, r4
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f7ff fee7 	bl	800693c <_printf_common>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d14a      	bne.n	8006c08 <_printf_i+0x1f0>
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	b004      	add	sp, #16
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f043 0320 	orr.w	r3, r3, #32
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	4832      	ldr	r0, [pc, #200]	@ (8006c50 <_printf_i+0x238>)
 8006b86:	2778      	movs	r7, #120	@ 0x78
 8006b88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6831      	ldr	r1, [r6, #0]
 8006b90:	061f      	lsls	r7, r3, #24
 8006b92:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b96:	d402      	bmi.n	8006b9e <_printf_i+0x186>
 8006b98:	065f      	lsls	r7, r3, #25
 8006b9a:	bf48      	it	mi
 8006b9c:	b2ad      	uxthmi	r5, r5
 8006b9e:	6031      	str	r1, [r6, #0]
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	bf44      	itt	mi
 8006ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba8:	6023      	strmi	r3, [r4, #0]
 8006baa:	b11d      	cbz	r5, 8006bb4 <_printf_i+0x19c>
 8006bac:	2310      	movs	r3, #16
 8006bae:	e7ad      	b.n	8006b0c <_printf_i+0xf4>
 8006bb0:	4826      	ldr	r0, [pc, #152]	@ (8006c4c <_printf_i+0x234>)
 8006bb2:	e7e9      	b.n	8006b88 <_printf_i+0x170>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	f023 0320 	bic.w	r3, r3, #32
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	e7f6      	b.n	8006bac <_printf_i+0x194>
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	e7bd      	b.n	8006b3e <_printf_i+0x126>
 8006bc2:	6833      	ldr	r3, [r6, #0]
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	6961      	ldr	r1, [r4, #20]
 8006bc8:	1d18      	adds	r0, r3, #4
 8006bca:	6030      	str	r0, [r6, #0]
 8006bcc:	062e      	lsls	r6, r5, #24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	d501      	bpl.n	8006bd6 <_printf_i+0x1be>
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	e002      	b.n	8006bdc <_printf_i+0x1c4>
 8006bd6:	0668      	lsls	r0, r5, #25
 8006bd8:	d5fb      	bpl.n	8006bd2 <_printf_i+0x1ba>
 8006bda:	8019      	strh	r1, [r3, #0]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	4616      	mov	r6, r2
 8006be2:	e7bc      	b.n	8006b5e <_printf_i+0x146>
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	6032      	str	r2, [r6, #0]
 8006bea:	681e      	ldr	r6, [r3, #0]
 8006bec:	6862      	ldr	r2, [r4, #4]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7f9 faed 	bl	80001d0 <memchr>
 8006bf6:	b108      	cbz	r0, 8006bfc <_printf_i+0x1e4>
 8006bf8:	1b80      	subs	r0, r0, r6
 8006bfa:	6060      	str	r0, [r4, #4]
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	2300      	movs	r3, #0
 8006c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c06:	e7aa      	b.n	8006b5e <_printf_i+0x146>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	4640      	mov	r0, r8
 8006c10:	47d0      	blx	sl
 8006c12:	3001      	adds	r0, #1
 8006c14:	d0ad      	beq.n	8006b72 <_printf_i+0x15a>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	079b      	lsls	r3, r3, #30
 8006c1a:	d413      	bmi.n	8006c44 <_printf_i+0x22c>
 8006c1c:	68e0      	ldr	r0, [r4, #12]
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	4298      	cmp	r0, r3
 8006c22:	bfb8      	it	lt
 8006c24:	4618      	movlt	r0, r3
 8006c26:	e7a6      	b.n	8006b76 <_printf_i+0x15e>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4640      	mov	r0, r8
 8006c30:	47d0      	blx	sl
 8006c32:	3001      	adds	r0, #1
 8006c34:	d09d      	beq.n	8006b72 <_printf_i+0x15a>
 8006c36:	3501      	adds	r5, #1
 8006c38:	68e3      	ldr	r3, [r4, #12]
 8006c3a:	9903      	ldr	r1, [sp, #12]
 8006c3c:	1a5b      	subs	r3, r3, r1
 8006c3e:	42ab      	cmp	r3, r5
 8006c40:	dcf2      	bgt.n	8006c28 <_printf_i+0x210>
 8006c42:	e7eb      	b.n	8006c1c <_printf_i+0x204>
 8006c44:	2500      	movs	r5, #0
 8006c46:	f104 0619 	add.w	r6, r4, #25
 8006c4a:	e7f5      	b.n	8006c38 <_printf_i+0x220>
 8006c4c:	0800aba2 	.word	0x0800aba2
 8006c50:	0800abb3 	.word	0x0800abb3

08006c54 <_scanf_float>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	4691      	mov	r9, r2
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	688b      	ldr	r3, [r1, #8]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c66:	bf81      	itttt	hi
 8006c68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c6c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c74:	608b      	strhi	r3, [r1, #8]
 8006c76:	680b      	ldr	r3, [r1, #0]
 8006c78:	460a      	mov	r2, r1
 8006c7a:	f04f 0500 	mov.w	r5, #0
 8006c7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c82:	f842 3b1c 	str.w	r3, [r2], #28
 8006c86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	bf98      	it	ls
 8006c90:	f04f 0b00 	movls.w	fp, #0
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	4616      	mov	r6, r2
 8006c98:	46aa      	mov	sl, r5
 8006c9a:	462f      	mov	r7, r5
 8006c9c:	9502      	str	r5, [sp, #8]
 8006c9e:	68a2      	ldr	r2, [r4, #8]
 8006ca0:	b15a      	cbz	r2, 8006cba <_scanf_float+0x66>
 8006ca2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b4e      	cmp	r3, #78	@ 0x4e
 8006caa:	d863      	bhi.n	8006d74 <_scanf_float+0x120>
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	d83b      	bhi.n	8006d28 <_scanf_float+0xd4>
 8006cb0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006cb4:	b2c8      	uxtb	r0, r1
 8006cb6:	280e      	cmp	r0, #14
 8006cb8:	d939      	bls.n	8006d2e <_scanf_float+0xda>
 8006cba:	b11f      	cbz	r7, 8006cc4 <_scanf_float+0x70>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc8:	f1ba 0f01 	cmp.w	sl, #1
 8006ccc:	f200 8114 	bhi.w	8006ef8 <_scanf_float+0x2a4>
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	429e      	cmp	r6, r3
 8006cd4:	f200 8105 	bhi.w	8006ee2 <_scanf_float+0x28e>
 8006cd8:	2001      	movs	r0, #1
 8006cda:	b007      	add	sp, #28
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006ce4:	2a0d      	cmp	r2, #13
 8006ce6:	d8e8      	bhi.n	8006cba <_scanf_float+0x66>
 8006ce8:	a101      	add	r1, pc, #4	@ (adr r1, 8006cf0 <_scanf_float+0x9c>)
 8006cea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006e39 	.word	0x08006e39
 8006cf4:	08006cbb 	.word	0x08006cbb
 8006cf8:	08006cbb 	.word	0x08006cbb
 8006cfc:	08006cbb 	.word	0x08006cbb
 8006d00:	08006e95 	.word	0x08006e95
 8006d04:	08006e6f 	.word	0x08006e6f
 8006d08:	08006cbb 	.word	0x08006cbb
 8006d0c:	08006cbb 	.word	0x08006cbb
 8006d10:	08006e47 	.word	0x08006e47
 8006d14:	08006cbb 	.word	0x08006cbb
 8006d18:	08006cbb 	.word	0x08006cbb
 8006d1c:	08006cbb 	.word	0x08006cbb
 8006d20:	08006cbb 	.word	0x08006cbb
 8006d24:	08006e03 	.word	0x08006e03
 8006d28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d2c:	e7da      	b.n	8006ce4 <_scanf_float+0x90>
 8006d2e:	290e      	cmp	r1, #14
 8006d30:	d8c3      	bhi.n	8006cba <_scanf_float+0x66>
 8006d32:	a001      	add	r0, pc, #4	@ (adr r0, 8006d38 <_scanf_float+0xe4>)
 8006d34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d38:	08006df3 	.word	0x08006df3
 8006d3c:	08006cbb 	.word	0x08006cbb
 8006d40:	08006df3 	.word	0x08006df3
 8006d44:	08006e83 	.word	0x08006e83
 8006d48:	08006cbb 	.word	0x08006cbb
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006dd9 	.word	0x08006dd9
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006dd9 	.word	0x08006dd9
 8006d5c:	08006dd9 	.word	0x08006dd9
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006dd9 	.word	0x08006dd9
 8006d68:	08006dd9 	.word	0x08006dd9
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006dd9 	.word	0x08006dd9
 8006d74:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d76:	d809      	bhi.n	8006d8c <_scanf_float+0x138>
 8006d78:	2b60      	cmp	r3, #96	@ 0x60
 8006d7a:	d8b1      	bhi.n	8006ce0 <_scanf_float+0x8c>
 8006d7c:	2b54      	cmp	r3, #84	@ 0x54
 8006d7e:	d07b      	beq.n	8006e78 <_scanf_float+0x224>
 8006d80:	2b59      	cmp	r3, #89	@ 0x59
 8006d82:	d19a      	bne.n	8006cba <_scanf_float+0x66>
 8006d84:	2d07      	cmp	r5, #7
 8006d86:	d198      	bne.n	8006cba <_scanf_float+0x66>
 8006d88:	2508      	movs	r5, #8
 8006d8a:	e02f      	b.n	8006dec <_scanf_float+0x198>
 8006d8c:	2b74      	cmp	r3, #116	@ 0x74
 8006d8e:	d073      	beq.n	8006e78 <_scanf_float+0x224>
 8006d90:	2b79      	cmp	r3, #121	@ 0x79
 8006d92:	e7f6      	b.n	8006d82 <_scanf_float+0x12e>
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	05c8      	lsls	r0, r1, #23
 8006d98:	d51e      	bpl.n	8006dd8 <_scanf_float+0x184>
 8006d9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d9e:	6021      	str	r1, [r4, #0]
 8006da0:	3701      	adds	r7, #1
 8006da2:	f1bb 0f00 	cmp.w	fp, #0
 8006da6:	d003      	beq.n	8006db0 <_scanf_float+0x15c>
 8006da8:	3201      	adds	r2, #1
 8006daa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dae:	60a2      	str	r2, [r4, #8]
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f8c9 3004 	str.w	r3, [r9, #4]
 8006dc8:	f340 8082 	ble.w	8006ed0 <_scanf_float+0x27c>
 8006dcc:	f8d9 3000 	ldr.w	r3, [r9]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f8c9 3000 	str.w	r3, [r9]
 8006dd6:	e762      	b.n	8006c9e <_scanf_float+0x4a>
 8006dd8:	eb1a 0105 	adds.w	r1, sl, r5
 8006ddc:	f47f af6d 	bne.w	8006cba <_scanf_float+0x66>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	460d      	mov	r5, r1
 8006dea:	468a      	mov	sl, r1
 8006dec:	f806 3b01 	strb.w	r3, [r6], #1
 8006df0:	e7de      	b.n	8006db0 <_scanf_float+0x15c>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	0610      	lsls	r0, r2, #24
 8006df6:	f57f af60 	bpl.w	8006cba <_scanf_float+0x66>
 8006dfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	e7f4      	b.n	8006dec <_scanf_float+0x198>
 8006e02:	f1ba 0f00 	cmp.w	sl, #0
 8006e06:	d10c      	bne.n	8006e22 <_scanf_float+0x1ce>
 8006e08:	b977      	cbnz	r7, 8006e28 <_scanf_float+0x1d4>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e14:	d108      	bne.n	8006e28 <_scanf_float+0x1d4>
 8006e16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	f04f 0a01 	mov.w	sl, #1
 8006e20:	e7e4      	b.n	8006dec <_scanf_float+0x198>
 8006e22:	f1ba 0f02 	cmp.w	sl, #2
 8006e26:	d050      	beq.n	8006eca <_scanf_float+0x276>
 8006e28:	2d01      	cmp	r5, #1
 8006e2a:	d002      	beq.n	8006e32 <_scanf_float+0x1de>
 8006e2c:	2d04      	cmp	r5, #4
 8006e2e:	f47f af44 	bne.w	8006cba <_scanf_float+0x66>
 8006e32:	3501      	adds	r5, #1
 8006e34:	b2ed      	uxtb	r5, r5
 8006e36:	e7d9      	b.n	8006dec <_scanf_float+0x198>
 8006e38:	f1ba 0f01 	cmp.w	sl, #1
 8006e3c:	f47f af3d 	bne.w	8006cba <_scanf_float+0x66>
 8006e40:	f04f 0a02 	mov.w	sl, #2
 8006e44:	e7d2      	b.n	8006dec <_scanf_float+0x198>
 8006e46:	b975      	cbnz	r5, 8006e66 <_scanf_float+0x212>
 8006e48:	2f00      	cmp	r7, #0
 8006e4a:	f47f af37 	bne.w	8006cbc <_scanf_float+0x68>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e58:	f040 8103 	bne.w	8007062 <_scanf_float+0x40e>
 8006e5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	2501      	movs	r5, #1
 8006e64:	e7c2      	b.n	8006dec <_scanf_float+0x198>
 8006e66:	2d03      	cmp	r5, #3
 8006e68:	d0e3      	beq.n	8006e32 <_scanf_float+0x1de>
 8006e6a:	2d05      	cmp	r5, #5
 8006e6c:	e7df      	b.n	8006e2e <_scanf_float+0x1da>
 8006e6e:	2d02      	cmp	r5, #2
 8006e70:	f47f af23 	bne.w	8006cba <_scanf_float+0x66>
 8006e74:	2503      	movs	r5, #3
 8006e76:	e7b9      	b.n	8006dec <_scanf_float+0x198>
 8006e78:	2d06      	cmp	r5, #6
 8006e7a:	f47f af1e 	bne.w	8006cba <_scanf_float+0x66>
 8006e7e:	2507      	movs	r5, #7
 8006e80:	e7b4      	b.n	8006dec <_scanf_float+0x198>
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	0591      	lsls	r1, r2, #22
 8006e86:	f57f af18 	bpl.w	8006cba <_scanf_float+0x66>
 8006e8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e8e:	6022      	str	r2, [r4, #0]
 8006e90:	9702      	str	r7, [sp, #8]
 8006e92:	e7ab      	b.n	8006dec <_scanf_float+0x198>
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e9a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e9e:	d005      	beq.n	8006eac <_scanf_float+0x258>
 8006ea0:	0550      	lsls	r0, r2, #21
 8006ea2:	f57f af0a 	bpl.w	8006cba <_scanf_float+0x66>
 8006ea6:	2f00      	cmp	r7, #0
 8006ea8:	f000 80db 	beq.w	8007062 <_scanf_float+0x40e>
 8006eac:	0591      	lsls	r1, r2, #22
 8006eae:	bf58      	it	pl
 8006eb0:	9902      	ldrpl	r1, [sp, #8]
 8006eb2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eb6:	bf58      	it	pl
 8006eb8:	1a79      	subpl	r1, r7, r1
 8006eba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ebe:	bf58      	it	pl
 8006ec0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ec4:	6022      	str	r2, [r4, #0]
 8006ec6:	2700      	movs	r7, #0
 8006ec8:	e790      	b.n	8006dec <_scanf_float+0x198>
 8006eca:	f04f 0a03 	mov.w	sl, #3
 8006ece:	e78d      	b.n	8006dec <_scanf_float+0x198>
 8006ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4798      	blx	r3
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f aedf 	beq.w	8006c9e <_scanf_float+0x4a>
 8006ee0:	e6eb      	b.n	8006cba <_scanf_float+0x66>
 8006ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eea:	464a      	mov	r2, r9
 8006eec:	4640      	mov	r0, r8
 8006eee:	4798      	blx	r3
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	e6eb      	b.n	8006cd0 <_scanf_float+0x7c>
 8006ef8:	1e6b      	subs	r3, r5, #1
 8006efa:	2b06      	cmp	r3, #6
 8006efc:	d824      	bhi.n	8006f48 <_scanf_float+0x2f4>
 8006efe:	2d02      	cmp	r5, #2
 8006f00:	d836      	bhi.n	8006f70 <_scanf_float+0x31c>
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	429e      	cmp	r6, r3
 8006f06:	f67f aee7 	bls.w	8006cd8 <_scanf_float+0x84>
 8006f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f12:	464a      	mov	r2, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	4798      	blx	r3
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6123      	str	r3, [r4, #16]
 8006f1e:	e7f0      	b.n	8006f02 <_scanf_float+0x2ae>
 8006f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f28:	464a      	mov	r2, r9
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4798      	blx	r3
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f38:	fa5f fa8a 	uxtb.w	sl, sl
 8006f3c:	f1ba 0f02 	cmp.w	sl, #2
 8006f40:	d1ee      	bne.n	8006f20 <_scanf_float+0x2cc>
 8006f42:	3d03      	subs	r5, #3
 8006f44:	b2ed      	uxtb	r5, r5
 8006f46:	1b76      	subs	r6, r6, r5
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	05da      	lsls	r2, r3, #23
 8006f4c:	d530      	bpl.n	8006fb0 <_scanf_float+0x35c>
 8006f4e:	055b      	lsls	r3, r3, #21
 8006f50:	d511      	bpl.n	8006f76 <_scanf_float+0x322>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	429e      	cmp	r6, r3
 8006f56:	f67f aebf 	bls.w	8006cd8 <_scanf_float+0x84>
 8006f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f62:	464a      	mov	r2, r9
 8006f64:	4640      	mov	r0, r8
 8006f66:	4798      	blx	r3
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	e7f0      	b.n	8006f52 <_scanf_float+0x2fe>
 8006f70:	46aa      	mov	sl, r5
 8006f72:	46b3      	mov	fp, r6
 8006f74:	e7de      	b.n	8006f34 <_scanf_float+0x2e0>
 8006f76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	2965      	cmp	r1, #101	@ 0x65
 8006f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f82:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	d00c      	beq.n	8006fa4 <_scanf_float+0x350>
 8006f8a:	2945      	cmp	r1, #69	@ 0x45
 8006f8c:	d00a      	beq.n	8006fa4 <_scanf_float+0x350>
 8006f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f92:	464a      	mov	r2, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	4798      	blx	r3
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	1eb5      	subs	r5, r6, #2
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fa8:	464a      	mov	r2, r9
 8006faa:	4640      	mov	r0, r8
 8006fac:	4798      	blx	r3
 8006fae:	462e      	mov	r6, r5
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	f012 0210 	ands.w	r2, r2, #16
 8006fb6:	d001      	beq.n	8006fbc <_scanf_float+0x368>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	e68e      	b.n	8006cda <_scanf_float+0x86>
 8006fbc:	7032      	strb	r2, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc8:	d125      	bne.n	8007016 <_scanf_float+0x3c2>
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	429f      	cmp	r7, r3
 8006fce:	d00a      	beq.n	8006fe6 <_scanf_float+0x392>
 8006fd0:	1bda      	subs	r2, r3, r7
 8006fd2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006fd6:	429e      	cmp	r6, r3
 8006fd8:	bf28      	it	cs
 8006fda:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006fde:	4922      	ldr	r1, [pc, #136]	@ (8007068 <_scanf_float+0x414>)
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f907 	bl	80071f4 <siprintf>
 8006fe6:	9901      	ldr	r1, [sp, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4640      	mov	r0, r8
 8006fec:	f002 fc6c 	bl	80098c8 <_strtod_r>
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f011 0f02 	tst.w	r1, #2
 8006ffa:	ec57 6b10 	vmov	r6, r7, d0
 8006ffe:	f103 0204 	add.w	r2, r3, #4
 8007002:	d015      	beq.n	8007030 <_scanf_float+0x3dc>
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	600a      	str	r2, [r1, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	e9c3 6700 	strd	r6, r7, [r3]
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60e3      	str	r3, [r4, #12]
 8007014:	e7d0      	b.n	8006fb8 <_scanf_float+0x364>
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0e4      	beq.n	8006fe6 <_scanf_float+0x392>
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	230a      	movs	r3, #10
 8007020:	3101      	adds	r1, #1
 8007022:	4640      	mov	r0, r8
 8007024:	f002 fcd0 	bl	80099c8 <_strtol_r>
 8007028:	9b04      	ldr	r3, [sp, #16]
 800702a:	9e05      	ldr	r6, [sp, #20]
 800702c:	1ac2      	subs	r2, r0, r3
 800702e:	e7d0      	b.n	8006fd2 <_scanf_float+0x37e>
 8007030:	f011 0f04 	tst.w	r1, #4
 8007034:	9903      	ldr	r1, [sp, #12]
 8007036:	600a      	str	r2, [r1, #0]
 8007038:	d1e6      	bne.n	8007008 <_scanf_float+0x3b4>
 800703a:	681d      	ldr	r5, [r3, #0]
 800703c:	4632      	mov	r2, r6
 800703e:	463b      	mov	r3, r7
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 fd72 	bl	8000b2c <__aeabi_dcmpun>
 8007048:	b128      	cbz	r0, 8007056 <_scanf_float+0x402>
 800704a:	4808      	ldr	r0, [pc, #32]	@ (800706c <_scanf_float+0x418>)
 800704c:	f000 fa14 	bl	8007478 <nanf>
 8007050:	ed85 0a00 	vstr	s0, [r5]
 8007054:	e7db      	b.n	800700e <_scanf_float+0x3ba>
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 fdc5 	bl	8000be8 <__aeabi_d2f>
 800705e:	6028      	str	r0, [r5, #0]
 8007060:	e7d5      	b.n	800700e <_scanf_float+0x3ba>
 8007062:	2700      	movs	r7, #0
 8007064:	e62e      	b.n	8006cc4 <_scanf_float+0x70>
 8007066:	bf00      	nop
 8007068:	0800abc4 	.word	0x0800abc4
 800706c:	0800ac75 	.word	0x0800ac75

08007070 <std>:
 8007070:	2300      	movs	r3, #0
 8007072:	b510      	push	{r4, lr}
 8007074:	4604      	mov	r4, r0
 8007076:	e9c0 3300 	strd	r3, r3, [r0]
 800707a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800707e:	6083      	str	r3, [r0, #8]
 8007080:	8181      	strh	r1, [r0, #12]
 8007082:	6643      	str	r3, [r0, #100]	@ 0x64
 8007084:	81c2      	strh	r2, [r0, #14]
 8007086:	6183      	str	r3, [r0, #24]
 8007088:	4619      	mov	r1, r3
 800708a:	2208      	movs	r2, #8
 800708c:	305c      	adds	r0, #92	@ 0x5c
 800708e:	f000 f916 	bl	80072be <memset>
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <std+0x58>)
 8007094:	6263      	str	r3, [r4, #36]	@ 0x24
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <std+0x5c>)
 8007098:	62a3      	str	r3, [r4, #40]	@ 0x28
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <std+0x60>)
 800709c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <std+0x64>)
 80070a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <std+0x68>)
 80070a4:	6224      	str	r4, [r4, #32]
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d006      	beq.n	80070b8 <std+0x48>
 80070aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070ae:	4294      	cmp	r4, r2
 80070b0:	d002      	beq.n	80070b8 <std+0x48>
 80070b2:	33d0      	adds	r3, #208	@ 0xd0
 80070b4:	429c      	cmp	r4, r3
 80070b6:	d105      	bne.n	80070c4 <std+0x54>
 80070b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c0:	f000 b9d6 	b.w	8007470 <__retarget_lock_init_recursive>
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	bf00      	nop
 80070c8:	08007239 	.word	0x08007239
 80070cc:	0800725b 	.word	0x0800725b
 80070d0:	08007293 	.word	0x08007293
 80070d4:	080072b7 	.word	0x080072b7
 80070d8:	200002fc 	.word	0x200002fc

080070dc <stdio_exit_handler>:
 80070dc:	4a02      	ldr	r2, [pc, #8]	@ (80070e8 <stdio_exit_handler+0xc>)
 80070de:	4903      	ldr	r1, [pc, #12]	@ (80070ec <stdio_exit_handler+0x10>)
 80070e0:	4803      	ldr	r0, [pc, #12]	@ (80070f0 <stdio_exit_handler+0x14>)
 80070e2:	f000 b869 	b.w	80071b8 <_fwalk_sglue>
 80070e6:	bf00      	nop
 80070e8:	2000000c 	.word	0x2000000c
 80070ec:	08009d85 	.word	0x08009d85
 80070f0:	2000001c 	.word	0x2000001c

080070f4 <cleanup_stdio>:
 80070f4:	6841      	ldr	r1, [r0, #4]
 80070f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <cleanup_stdio+0x34>)
 80070f8:	4299      	cmp	r1, r3
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	d001      	beq.n	8007104 <cleanup_stdio+0x10>
 8007100:	f002 fe40 	bl	8009d84 <_fflush_r>
 8007104:	68a1      	ldr	r1, [r4, #8]
 8007106:	4b09      	ldr	r3, [pc, #36]	@ (800712c <cleanup_stdio+0x38>)
 8007108:	4299      	cmp	r1, r3
 800710a:	d002      	beq.n	8007112 <cleanup_stdio+0x1e>
 800710c:	4620      	mov	r0, r4
 800710e:	f002 fe39 	bl	8009d84 <_fflush_r>
 8007112:	68e1      	ldr	r1, [r4, #12]
 8007114:	4b06      	ldr	r3, [pc, #24]	@ (8007130 <cleanup_stdio+0x3c>)
 8007116:	4299      	cmp	r1, r3
 8007118:	d004      	beq.n	8007124 <cleanup_stdio+0x30>
 800711a:	4620      	mov	r0, r4
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f002 be30 	b.w	8009d84 <_fflush_r>
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	200002fc 	.word	0x200002fc
 800712c:	20000364 	.word	0x20000364
 8007130:	200003cc 	.word	0x200003cc

08007134 <global_stdio_init.part.0>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <global_stdio_init.part.0+0x30>)
 8007138:	4c0b      	ldr	r4, [pc, #44]	@ (8007168 <global_stdio_init.part.0+0x34>)
 800713a:	4a0c      	ldr	r2, [pc, #48]	@ (800716c <global_stdio_init.part.0+0x38>)
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	4620      	mov	r0, r4
 8007140:	2200      	movs	r2, #0
 8007142:	2104      	movs	r1, #4
 8007144:	f7ff ff94 	bl	8007070 <std>
 8007148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800714c:	2201      	movs	r2, #1
 800714e:	2109      	movs	r1, #9
 8007150:	f7ff ff8e 	bl	8007070 <std>
 8007154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007158:	2202      	movs	r2, #2
 800715a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715e:	2112      	movs	r1, #18
 8007160:	f7ff bf86 	b.w	8007070 <std>
 8007164:	20000434 	.word	0x20000434
 8007168:	200002fc 	.word	0x200002fc
 800716c:	080070dd 	.word	0x080070dd

08007170 <__sfp_lock_acquire>:
 8007170:	4801      	ldr	r0, [pc, #4]	@ (8007178 <__sfp_lock_acquire+0x8>)
 8007172:	f000 b97e 	b.w	8007472 <__retarget_lock_acquire_recursive>
 8007176:	bf00      	nop
 8007178:	2000043d 	.word	0x2000043d

0800717c <__sfp_lock_release>:
 800717c:	4801      	ldr	r0, [pc, #4]	@ (8007184 <__sfp_lock_release+0x8>)
 800717e:	f000 b979 	b.w	8007474 <__retarget_lock_release_recursive>
 8007182:	bf00      	nop
 8007184:	2000043d 	.word	0x2000043d

08007188 <__sinit>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4604      	mov	r4, r0
 800718c:	f7ff fff0 	bl	8007170 <__sfp_lock_acquire>
 8007190:	6a23      	ldr	r3, [r4, #32]
 8007192:	b11b      	cbz	r3, 800719c <__sinit+0x14>
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	f7ff bff0 	b.w	800717c <__sfp_lock_release>
 800719c:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <__sinit+0x28>)
 800719e:	6223      	str	r3, [r4, #32]
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <__sinit+0x2c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f5      	bne.n	8007194 <__sinit+0xc>
 80071a8:	f7ff ffc4 	bl	8007134 <global_stdio_init.part.0>
 80071ac:	e7f2      	b.n	8007194 <__sinit+0xc>
 80071ae:	bf00      	nop
 80071b0:	080070f5 	.word	0x080070f5
 80071b4:	20000434 	.word	0x20000434

080071b8 <_fwalk_sglue>:
 80071b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071bc:	4607      	mov	r7, r0
 80071be:	4688      	mov	r8, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	2600      	movs	r6, #0
 80071c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c8:	f1b9 0901 	subs.w	r9, r9, #1
 80071cc:	d505      	bpl.n	80071da <_fwalk_sglue+0x22>
 80071ce:	6824      	ldr	r4, [r4, #0]
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	d1f7      	bne.n	80071c4 <_fwalk_sglue+0xc>
 80071d4:	4630      	mov	r0, r6
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d907      	bls.n	80071f0 <_fwalk_sglue+0x38>
 80071e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071e4:	3301      	adds	r3, #1
 80071e6:	d003      	beq.n	80071f0 <_fwalk_sglue+0x38>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	4306      	orrs	r6, r0
 80071f0:	3568      	adds	r5, #104	@ 0x68
 80071f2:	e7e9      	b.n	80071c8 <_fwalk_sglue+0x10>

080071f4 <siprintf>:
 80071f4:	b40e      	push	{r1, r2, r3}
 80071f6:	b510      	push	{r4, lr}
 80071f8:	b09d      	sub	sp, #116	@ 0x74
 80071fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80071fc:	9002      	str	r0, [sp, #8]
 80071fe:	9006      	str	r0, [sp, #24]
 8007200:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007204:	480a      	ldr	r0, [pc, #40]	@ (8007230 <siprintf+0x3c>)
 8007206:	9107      	str	r1, [sp, #28]
 8007208:	9104      	str	r1, [sp, #16]
 800720a:	490a      	ldr	r1, [pc, #40]	@ (8007234 <siprintf+0x40>)
 800720c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007210:	9105      	str	r1, [sp, #20]
 8007212:	2400      	movs	r4, #0
 8007214:	a902      	add	r1, sp, #8
 8007216:	6800      	ldr	r0, [r0, #0]
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800721c:	f002 fc32 	bl	8009a84 <_svfiprintf_r>
 8007220:	9b02      	ldr	r3, [sp, #8]
 8007222:	701c      	strb	r4, [r3, #0]
 8007224:	b01d      	add	sp, #116	@ 0x74
 8007226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722a:	b003      	add	sp, #12
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000018 	.word	0x20000018
 8007234:	ffff0208 	.word	0xffff0208

08007238 <__sread>:
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
 800723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007240:	f000 f8c8 	bl	80073d4 <_read_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	bfab      	itete	ge
 8007248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800724a:	89a3      	ldrhlt	r3, [r4, #12]
 800724c:	181b      	addge	r3, r3, r0
 800724e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007252:	bfac      	ite	ge
 8007254:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007256:	81a3      	strhlt	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__swrite>:
 800725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	461f      	mov	r7, r3
 8007260:	898b      	ldrh	r3, [r1, #12]
 8007262:	05db      	lsls	r3, r3, #23
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	4616      	mov	r6, r2
 800726a:	d505      	bpl.n	8007278 <__swrite+0x1e>
 800726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007270:	2302      	movs	r3, #2
 8007272:	2200      	movs	r2, #0
 8007274:	f000 f89c 	bl	80073b0 <_lseek_r>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	4632      	mov	r2, r6
 8007286:	463b      	mov	r3, r7
 8007288:	4628      	mov	r0, r5
 800728a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	f000 b8b3 	b.w	80073f8 <_write_r>

08007292 <__sseek>:
 8007292:	b510      	push	{r4, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 f889 	bl	80073b0 <_lseek_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	bf15      	itete	ne
 80072a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072ae:	81a3      	strheq	r3, [r4, #12]
 80072b0:	bf18      	it	ne
 80072b2:	81a3      	strhne	r3, [r4, #12]
 80072b4:	bd10      	pop	{r4, pc}

080072b6 <__sclose>:
 80072b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ba:	f000 b869 	b.w	8007390 <_close_r>

080072be <memset>:
 80072be:	4402      	add	r2, r0
 80072c0:	4603      	mov	r3, r0
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d100      	bne.n	80072c8 <memset+0xa>
 80072c6:	4770      	bx	lr
 80072c8:	f803 1b01 	strb.w	r1, [r3], #1
 80072cc:	e7f9      	b.n	80072c2 <memset+0x4>
	...

080072d0 <strtok>:
 80072d0:	4b16      	ldr	r3, [pc, #88]	@ (800732c <strtok+0x5c>)
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	681f      	ldr	r7, [r3, #0]
 80072d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80072da:	4605      	mov	r5, r0
 80072dc:	460e      	mov	r6, r1
 80072de:	b9ec      	cbnz	r4, 800731c <strtok+0x4c>
 80072e0:	2050      	movs	r0, #80	@ 0x50
 80072e2:	f000 ff8f 	bl	8008204 <malloc>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80072ea:	b920      	cbnz	r0, 80072f6 <strtok+0x26>
 80072ec:	4b10      	ldr	r3, [pc, #64]	@ (8007330 <strtok+0x60>)
 80072ee:	4811      	ldr	r0, [pc, #68]	@ (8007334 <strtok+0x64>)
 80072f0:	215b      	movs	r1, #91	@ 0x5b
 80072f2:	f000 f8c7 	bl	8007484 <__assert_func>
 80072f6:	e9c0 4400 	strd	r4, r4, [r0]
 80072fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80072fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007302:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007306:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800730a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800730e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007312:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007316:	6184      	str	r4, [r0, #24]
 8007318:	7704      	strb	r4, [r0, #28]
 800731a:	6244      	str	r4, [r0, #36]	@ 0x24
 800731c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	2301      	movs	r3, #1
 8007324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	f000 b806 	b.w	8007338 <__strtok_r>
 800732c:	20000018 	.word	0x20000018
 8007330:	0800abc9 	.word	0x0800abc9
 8007334:	0800abe0 	.word	0x0800abe0

08007338 <__strtok_r>:
 8007338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733a:	4604      	mov	r4, r0
 800733c:	b908      	cbnz	r0, 8007342 <__strtok_r+0xa>
 800733e:	6814      	ldr	r4, [r2, #0]
 8007340:	b144      	cbz	r4, 8007354 <__strtok_r+0x1c>
 8007342:	4620      	mov	r0, r4
 8007344:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007348:	460f      	mov	r7, r1
 800734a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800734e:	b91e      	cbnz	r6, 8007358 <__strtok_r+0x20>
 8007350:	b965      	cbnz	r5, 800736c <__strtok_r+0x34>
 8007352:	6015      	str	r5, [r2, #0]
 8007354:	2000      	movs	r0, #0
 8007356:	e005      	b.n	8007364 <__strtok_r+0x2c>
 8007358:	42b5      	cmp	r5, r6
 800735a:	d1f6      	bne.n	800734a <__strtok_r+0x12>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <__strtok_r+0xa>
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	7003      	strb	r3, [r0, #0]
 8007364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007366:	461c      	mov	r4, r3
 8007368:	e00c      	b.n	8007384 <__strtok_r+0x4c>
 800736a:	b91d      	cbnz	r5, 8007374 <__strtok_r+0x3c>
 800736c:	4627      	mov	r7, r4
 800736e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007372:	460e      	mov	r6, r1
 8007374:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007378:	42ab      	cmp	r3, r5
 800737a:	d1f6      	bne.n	800736a <__strtok_r+0x32>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0f2      	beq.n	8007366 <__strtok_r+0x2e>
 8007380:	2300      	movs	r3, #0
 8007382:	703b      	strb	r3, [r7, #0]
 8007384:	6014      	str	r4, [r2, #0]
 8007386:	e7ed      	b.n	8007364 <__strtok_r+0x2c>

08007388 <_localeconv_r>:
 8007388:	4800      	ldr	r0, [pc, #0]	@ (800738c <_localeconv_r+0x4>)
 800738a:	4770      	bx	lr
 800738c:	20000158 	.word	0x20000158

08007390 <_close_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	@ (80073ac <_close_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa fc6e 	bl	8001c7c <_close>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_close_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_close_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20000438 	.word	0x20000438

080073b0 <_lseek_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d07      	ldr	r5, [pc, #28]	@ (80073d0 <_lseek_r+0x20>)
 80073b4:	4604      	mov	r4, r0
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	602a      	str	r2, [r5, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	f7fa fc83 	bl	8001cca <_lseek>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_lseek_r+0x1e>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_lseek_r+0x1e>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	20000438 	.word	0x20000438

080073d4 <_read_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	@ (80073f4 <_read_r+0x20>)
 80073d8:	4604      	mov	r4, r0
 80073da:	4608      	mov	r0, r1
 80073dc:	4611      	mov	r1, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	602a      	str	r2, [r5, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f7fa fc11 	bl	8001c0a <_read>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_read_r+0x1e>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_read_r+0x1e>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20000438 	.word	0x20000438

080073f8 <_write_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d07      	ldr	r5, [pc, #28]	@ (8007418 <_write_r+0x20>)
 80073fc:	4604      	mov	r4, r0
 80073fe:	4608      	mov	r0, r1
 8007400:	4611      	mov	r1, r2
 8007402:	2200      	movs	r2, #0
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f7fa fc1c 	bl	8001c44 <_write>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_write_r+0x1e>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_write_r+0x1e>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20000438 	.word	0x20000438

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	@ (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000018 	.word	0x20000018

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4d0d      	ldr	r5, [pc, #52]	@ (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	@ (8007464 <__libc_init_array+0x3c>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2600      	movs	r6, #0
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4d0b      	ldr	r5, [pc, #44]	@ (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	@ (800746c <__libc_init_array+0x44>)
 800743c:	f003 fb76 	bl	800ab2c <_init>
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2600      	movs	r6, #0
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f855 3b04 	ldr.w	r3, [r5], #4
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	0800b01c 	.word	0x0800b01c
 8007464:	0800b01c 	.word	0x0800b01c
 8007468:	0800b01c 	.word	0x0800b01c
 800746c:	0800b020 	.word	0x0800b020

08007470 <__retarget_lock_init_recursive>:
 8007470:	4770      	bx	lr

08007472 <__retarget_lock_acquire_recursive>:
 8007472:	4770      	bx	lr

08007474 <__retarget_lock_release_recursive>:
 8007474:	4770      	bx	lr
	...

08007478 <nanf>:
 8007478:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007480 <nanf+0x8>
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	7fc00000 	.word	0x7fc00000

08007484 <__assert_func>:
 8007484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007486:	4614      	mov	r4, r2
 8007488:	461a      	mov	r2, r3
 800748a:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <__assert_func+0x2c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4605      	mov	r5, r0
 8007490:	68d8      	ldr	r0, [r3, #12]
 8007492:	b14c      	cbz	r4, 80074a8 <__assert_func+0x24>
 8007494:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <__assert_func+0x30>)
 8007496:	9100      	str	r1, [sp, #0]
 8007498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800749c:	4906      	ldr	r1, [pc, #24]	@ (80074b8 <__assert_func+0x34>)
 800749e:	462b      	mov	r3, r5
 80074a0:	f002 fc98 	bl	8009dd4 <fiprintf>
 80074a4:	f002 fcfc 	bl	8009ea0 <abort>
 80074a8:	4b04      	ldr	r3, [pc, #16]	@ (80074bc <__assert_func+0x38>)
 80074aa:	461c      	mov	r4, r3
 80074ac:	e7f3      	b.n	8007496 <__assert_func+0x12>
 80074ae:	bf00      	nop
 80074b0:	20000018 	.word	0x20000018
 80074b4:	0800ac3a 	.word	0x0800ac3a
 80074b8:	0800ac47 	.word	0x0800ac47
 80074bc:	0800ac75 	.word	0x0800ac75

080074c0 <quorem>:
 80074c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	6903      	ldr	r3, [r0, #16]
 80074c6:	690c      	ldr	r4, [r1, #16]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	4607      	mov	r7, r0
 80074cc:	db7e      	blt.n	80075cc <quorem+0x10c>
 80074ce:	3c01      	subs	r4, #1
 80074d0:	f101 0814 	add.w	r8, r1, #20
 80074d4:	00a3      	lsls	r3, r4, #2
 80074d6:	f100 0514 	add.w	r5, r0, #20
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ea:	3301      	adds	r3, #1
 80074ec:	429a      	cmp	r2, r3
 80074ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80074f6:	d32e      	bcc.n	8007556 <quorem+0x96>
 80074f8:	f04f 0a00 	mov.w	sl, #0
 80074fc:	46c4      	mov	ip, r8
 80074fe:	46ae      	mov	lr, r5
 8007500:	46d3      	mov	fp, sl
 8007502:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007506:	b298      	uxth	r0, r3
 8007508:	fb06 a000 	mla	r0, r6, r0, sl
 800750c:	0c02      	lsrs	r2, r0, #16
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	fb06 2303 	mla	r3, r6, r3, r2
 8007514:	f8de 2000 	ldr.w	r2, [lr]
 8007518:	b280      	uxth	r0, r0
 800751a:	b292      	uxth	r2, r2
 800751c:	1a12      	subs	r2, r2, r0
 800751e:	445a      	add	r2, fp
 8007520:	f8de 0000 	ldr.w	r0, [lr]
 8007524:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007528:	b29b      	uxth	r3, r3
 800752a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800752e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007532:	b292      	uxth	r2, r2
 8007534:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007538:	45e1      	cmp	r9, ip
 800753a:	f84e 2b04 	str.w	r2, [lr], #4
 800753e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007542:	d2de      	bcs.n	8007502 <quorem+0x42>
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	58eb      	ldr	r3, [r5, r3]
 8007548:	b92b      	cbnz	r3, 8007556 <quorem+0x96>
 800754a:	9b01      	ldr	r3, [sp, #4]
 800754c:	3b04      	subs	r3, #4
 800754e:	429d      	cmp	r5, r3
 8007550:	461a      	mov	r2, r3
 8007552:	d32f      	bcc.n	80075b4 <quorem+0xf4>
 8007554:	613c      	str	r4, [r7, #16]
 8007556:	4638      	mov	r0, r7
 8007558:	f001 f9c6 	bl	80088e8 <__mcmp>
 800755c:	2800      	cmp	r0, #0
 800755e:	db25      	blt.n	80075ac <quorem+0xec>
 8007560:	4629      	mov	r1, r5
 8007562:	2000      	movs	r0, #0
 8007564:	f858 2b04 	ldr.w	r2, [r8], #4
 8007568:	f8d1 c000 	ldr.w	ip, [r1]
 800756c:	fa1f fe82 	uxth.w	lr, r2
 8007570:	fa1f f38c 	uxth.w	r3, ip
 8007574:	eba3 030e 	sub.w	r3, r3, lr
 8007578:	4403      	add	r3, r0
 800757a:	0c12      	lsrs	r2, r2, #16
 800757c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007580:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007584:	b29b      	uxth	r3, r3
 8007586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800758a:	45c1      	cmp	r9, r8
 800758c:	f841 3b04 	str.w	r3, [r1], #4
 8007590:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007594:	d2e6      	bcs.n	8007564 <quorem+0xa4>
 8007596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800759a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759e:	b922      	cbnz	r2, 80075aa <quorem+0xea>
 80075a0:	3b04      	subs	r3, #4
 80075a2:	429d      	cmp	r5, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	d30b      	bcc.n	80075c0 <quorem+0x100>
 80075a8:	613c      	str	r4, [r7, #16]
 80075aa:	3601      	adds	r6, #1
 80075ac:	4630      	mov	r0, r6
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	3b04      	subs	r3, #4
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d1cb      	bne.n	8007554 <quorem+0x94>
 80075bc:	3c01      	subs	r4, #1
 80075be:	e7c6      	b.n	800754e <quorem+0x8e>
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	3b04      	subs	r3, #4
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	d1ef      	bne.n	80075a8 <quorem+0xe8>
 80075c8:	3c01      	subs	r4, #1
 80075ca:	e7ea      	b.n	80075a2 <quorem+0xe2>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7ee      	b.n	80075ae <quorem+0xee>

080075d0 <_dtoa_r>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	69c7      	ldr	r7, [r0, #28]
 80075d6:	b097      	sub	sp, #92	@ 0x5c
 80075d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80075dc:	ec55 4b10 	vmov	r4, r5, d0
 80075e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80075e2:	9107      	str	r1, [sp, #28]
 80075e4:	4681      	mov	r9, r0
 80075e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80075e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80075ea:	b97f      	cbnz	r7, 800760c <_dtoa_r+0x3c>
 80075ec:	2010      	movs	r0, #16
 80075ee:	f000 fe09 	bl	8008204 <malloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80075f8:	b920      	cbnz	r0, 8007604 <_dtoa_r+0x34>
 80075fa:	4ba9      	ldr	r3, [pc, #676]	@ (80078a0 <_dtoa_r+0x2d0>)
 80075fc:	21ef      	movs	r1, #239	@ 0xef
 80075fe:	48a9      	ldr	r0, [pc, #676]	@ (80078a4 <_dtoa_r+0x2d4>)
 8007600:	f7ff ff40 	bl	8007484 <__assert_func>
 8007604:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007608:	6007      	str	r7, [r0, #0]
 800760a:	60c7      	str	r7, [r0, #12]
 800760c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	b159      	cbz	r1, 800762c <_dtoa_r+0x5c>
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	604a      	str	r2, [r1, #4]
 8007618:	2301      	movs	r3, #1
 800761a:	4093      	lsls	r3, r2
 800761c:	608b      	str	r3, [r1, #8]
 800761e:	4648      	mov	r0, r9
 8007620:	f000 fee6 	bl	80083f0 <_Bfree>
 8007624:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	1e2b      	subs	r3, r5, #0
 800762e:	bfb9      	ittee	lt
 8007630:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007634:	9305      	strlt	r3, [sp, #20]
 8007636:	2300      	movge	r3, #0
 8007638:	6033      	strge	r3, [r6, #0]
 800763a:	9f05      	ldr	r7, [sp, #20]
 800763c:	4b9a      	ldr	r3, [pc, #616]	@ (80078a8 <_dtoa_r+0x2d8>)
 800763e:	bfbc      	itt	lt
 8007640:	2201      	movlt	r2, #1
 8007642:	6032      	strlt	r2, [r6, #0]
 8007644:	43bb      	bics	r3, r7
 8007646:	d112      	bne.n	800766e <_dtoa_r+0x9e>
 8007648:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800764a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007654:	4323      	orrs	r3, r4
 8007656:	f000 855a 	beq.w	800810e <_dtoa_r+0xb3e>
 800765a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800765c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80078bc <_dtoa_r+0x2ec>
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 855c 	beq.w	800811e <_dtoa_r+0xb4e>
 8007666:	f10a 0303 	add.w	r3, sl, #3
 800766a:	f000 bd56 	b.w	800811a <_dtoa_r+0xb4a>
 800766e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007672:	2200      	movs	r2, #0
 8007674:	ec51 0b17 	vmov	r0, r1, d7
 8007678:	2300      	movs	r3, #0
 800767a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800767e:	f7f9 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8007682:	4680      	mov	r8, r0
 8007684:	b158      	cbz	r0, 800769e <_dtoa_r+0xce>
 8007686:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007688:	2301      	movs	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800768e:	b113      	cbz	r3, 8007696 <_dtoa_r+0xc6>
 8007690:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007692:	4b86      	ldr	r3, [pc, #536]	@ (80078ac <_dtoa_r+0x2dc>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80078c0 <_dtoa_r+0x2f0>
 800769a:	f000 bd40 	b.w	800811e <_dtoa_r+0xb4e>
 800769e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80076a2:	aa14      	add	r2, sp, #80	@ 0x50
 80076a4:	a915      	add	r1, sp, #84	@ 0x54
 80076a6:	4648      	mov	r0, r9
 80076a8:	f001 fa3e 	bl	8008b28 <__d2b>
 80076ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80076b0:	9002      	str	r0, [sp, #8]
 80076b2:	2e00      	cmp	r6, #0
 80076b4:	d078      	beq.n	80077a8 <_dtoa_r+0x1d8>
 80076b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80076bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80076c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80076cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076d0:	4619      	mov	r1, r3
 80076d2:	2200      	movs	r2, #0
 80076d4:	4b76      	ldr	r3, [pc, #472]	@ (80078b0 <_dtoa_r+0x2e0>)
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	a36b      	add	r3, pc, #428	@ (adr r3, 8007888 <_dtoa_r+0x2b8>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 ff8a 	bl	80005f8 <__aeabi_dmul>
 80076e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007890 <_dtoa_r+0x2c0>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fdcf 	bl	800028c <__adddf3>
 80076ee:	4604      	mov	r4, r0
 80076f0:	4630      	mov	r0, r6
 80076f2:	460d      	mov	r5, r1
 80076f4:	f7f8 ff16 	bl	8000524 <__aeabi_i2d>
 80076f8:	a367      	add	r3, pc, #412	@ (adr r3, 8007898 <_dtoa_r+0x2c8>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f8 fdbf 	bl	800028c <__adddf3>
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	f7f9 fa21 	bl	8000b58 <__aeabi_d2iz>
 8007716:	2200      	movs	r2, #0
 8007718:	4607      	mov	r7, r0
 800771a:	2300      	movs	r3, #0
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	f7f9 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8007724:	b140      	cbz	r0, 8007738 <_dtoa_r+0x168>
 8007726:	4638      	mov	r0, r7
 8007728:	f7f8 fefc 	bl	8000524 <__aeabi_i2d>
 800772c:	4622      	mov	r2, r4
 800772e:	462b      	mov	r3, r5
 8007730:	f7f9 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007734:	b900      	cbnz	r0, 8007738 <_dtoa_r+0x168>
 8007736:	3f01      	subs	r7, #1
 8007738:	2f16      	cmp	r7, #22
 800773a:	d852      	bhi.n	80077e2 <_dtoa_r+0x212>
 800773c:	4b5d      	ldr	r3, [pc, #372]	@ (80078b4 <_dtoa_r+0x2e4>)
 800773e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800774a:	f7f9 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800774e:	2800      	cmp	r0, #0
 8007750:	d049      	beq.n	80077e6 <_dtoa_r+0x216>
 8007752:	3f01      	subs	r7, #1
 8007754:	2300      	movs	r3, #0
 8007756:	9310      	str	r3, [sp, #64]	@ 0x40
 8007758:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800775a:	1b9b      	subs	r3, r3, r6
 800775c:	1e5a      	subs	r2, r3, #1
 800775e:	bf45      	ittet	mi
 8007760:	f1c3 0301 	rsbmi	r3, r3, #1
 8007764:	9300      	strmi	r3, [sp, #0]
 8007766:	2300      	movpl	r3, #0
 8007768:	2300      	movmi	r3, #0
 800776a:	9206      	str	r2, [sp, #24]
 800776c:	bf54      	ite	pl
 800776e:	9300      	strpl	r3, [sp, #0]
 8007770:	9306      	strmi	r3, [sp, #24]
 8007772:	2f00      	cmp	r7, #0
 8007774:	db39      	blt.n	80077ea <_dtoa_r+0x21a>
 8007776:	9b06      	ldr	r3, [sp, #24]
 8007778:	970d      	str	r7, [sp, #52]	@ 0x34
 800777a:	443b      	add	r3, r7
 800777c:	9306      	str	r3, [sp, #24]
 800777e:	2300      	movs	r3, #0
 8007780:	9308      	str	r3, [sp, #32]
 8007782:	9b07      	ldr	r3, [sp, #28]
 8007784:	2b09      	cmp	r3, #9
 8007786:	d863      	bhi.n	8007850 <_dtoa_r+0x280>
 8007788:	2b05      	cmp	r3, #5
 800778a:	bfc4      	itt	gt
 800778c:	3b04      	subgt	r3, #4
 800778e:	9307      	strgt	r3, [sp, #28]
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	f1a3 0302 	sub.w	r3, r3, #2
 8007796:	bfcc      	ite	gt
 8007798:	2400      	movgt	r4, #0
 800779a:	2401      	movle	r4, #1
 800779c:	2b03      	cmp	r3, #3
 800779e:	d863      	bhi.n	8007868 <_dtoa_r+0x298>
 80077a0:	e8df f003 	tbb	[pc, r3]
 80077a4:	2b375452 	.word	0x2b375452
 80077a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80077ac:	441e      	add	r6, r3
 80077ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	bfc1      	itttt	gt
 80077b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80077ba:	409f      	lslgt	r7, r3
 80077bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80077c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80077c4:	bfd6      	itet	le
 80077c6:	f1c3 0320 	rsble	r3, r3, #32
 80077ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80077ce:	fa04 f003 	lslle.w	r0, r4, r3
 80077d2:	f7f8 fe97 	bl	8000504 <__aeabi_ui2d>
 80077d6:	2201      	movs	r2, #1
 80077d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80077dc:	3e01      	subs	r6, #1
 80077de:	9212      	str	r2, [sp, #72]	@ 0x48
 80077e0:	e776      	b.n	80076d0 <_dtoa_r+0x100>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7b7      	b.n	8007756 <_dtoa_r+0x186>
 80077e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80077e8:	e7b6      	b.n	8007758 <_dtoa_r+0x188>
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	1bdb      	subs	r3, r3, r7
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	427b      	negs	r3, r7
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	2300      	movs	r3, #0
 80077f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80077f8:	e7c3      	b.n	8007782 <_dtoa_r+0x1b2>
 80077fa:	2301      	movs	r3, #1
 80077fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007800:	eb07 0b03 	add.w	fp, r7, r3
 8007804:	f10b 0301 	add.w	r3, fp, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	bfb8      	it	lt
 800780e:	2301      	movlt	r3, #1
 8007810:	e006      	b.n	8007820 <_dtoa_r+0x250>
 8007812:	2301      	movs	r3, #1
 8007814:	9309      	str	r3, [sp, #36]	@ 0x24
 8007816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007818:	2b00      	cmp	r3, #0
 800781a:	dd28      	ble.n	800786e <_dtoa_r+0x29e>
 800781c:	469b      	mov	fp, r3
 800781e:	9303      	str	r3, [sp, #12]
 8007820:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007824:	2100      	movs	r1, #0
 8007826:	2204      	movs	r2, #4
 8007828:	f102 0514 	add.w	r5, r2, #20
 800782c:	429d      	cmp	r5, r3
 800782e:	d926      	bls.n	800787e <_dtoa_r+0x2ae>
 8007830:	6041      	str	r1, [r0, #4]
 8007832:	4648      	mov	r0, r9
 8007834:	f000 fd9c 	bl	8008370 <_Balloc>
 8007838:	4682      	mov	sl, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d142      	bne.n	80078c4 <_dtoa_r+0x2f4>
 800783e:	4b1e      	ldr	r3, [pc, #120]	@ (80078b8 <_dtoa_r+0x2e8>)
 8007840:	4602      	mov	r2, r0
 8007842:	f240 11af 	movw	r1, #431	@ 0x1af
 8007846:	e6da      	b.n	80075fe <_dtoa_r+0x2e>
 8007848:	2300      	movs	r3, #0
 800784a:	e7e3      	b.n	8007814 <_dtoa_r+0x244>
 800784c:	2300      	movs	r3, #0
 800784e:	e7d5      	b.n	80077fc <_dtoa_r+0x22c>
 8007850:	2401      	movs	r4, #1
 8007852:	2300      	movs	r3, #0
 8007854:	9307      	str	r3, [sp, #28]
 8007856:	9409      	str	r4, [sp, #36]	@ 0x24
 8007858:	f04f 3bff 	mov.w	fp, #4294967295
 800785c:	2200      	movs	r2, #0
 800785e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007862:	2312      	movs	r3, #18
 8007864:	920c      	str	r2, [sp, #48]	@ 0x30
 8007866:	e7db      	b.n	8007820 <_dtoa_r+0x250>
 8007868:	2301      	movs	r3, #1
 800786a:	9309      	str	r3, [sp, #36]	@ 0x24
 800786c:	e7f4      	b.n	8007858 <_dtoa_r+0x288>
 800786e:	f04f 0b01 	mov.w	fp, #1
 8007872:	f8cd b00c 	str.w	fp, [sp, #12]
 8007876:	465b      	mov	r3, fp
 8007878:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800787c:	e7d0      	b.n	8007820 <_dtoa_r+0x250>
 800787e:	3101      	adds	r1, #1
 8007880:	0052      	lsls	r2, r2, #1
 8007882:	e7d1      	b.n	8007828 <_dtoa_r+0x258>
 8007884:	f3af 8000 	nop.w
 8007888:	636f4361 	.word	0x636f4361
 800788c:	3fd287a7 	.word	0x3fd287a7
 8007890:	8b60c8b3 	.word	0x8b60c8b3
 8007894:	3fc68a28 	.word	0x3fc68a28
 8007898:	509f79fb 	.word	0x509f79fb
 800789c:	3fd34413 	.word	0x3fd34413
 80078a0:	0800abc9 	.word	0x0800abc9
 80078a4:	0800ac83 	.word	0x0800ac83
 80078a8:	7ff00000 	.word	0x7ff00000
 80078ac:	0800aba1 	.word	0x0800aba1
 80078b0:	3ff80000 	.word	0x3ff80000
 80078b4:	0800adf8 	.word	0x0800adf8
 80078b8:	0800acdb 	.word	0x0800acdb
 80078bc:	0800ac7f 	.word	0x0800ac7f
 80078c0:	0800aba0 	.word	0x0800aba0
 80078c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	2b0e      	cmp	r3, #14
 80078ce:	f200 80a1 	bhi.w	8007a14 <_dtoa_r+0x444>
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	f000 809e 	beq.w	8007a14 <_dtoa_r+0x444>
 80078d8:	2f00      	cmp	r7, #0
 80078da:	dd33      	ble.n	8007944 <_dtoa_r+0x374>
 80078dc:	4b9c      	ldr	r3, [pc, #624]	@ (8007b50 <_dtoa_r+0x580>)
 80078de:	f007 020f 	and.w	r2, r7, #15
 80078e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e6:	ed93 7b00 	vldr	d7, [r3]
 80078ea:	05f8      	lsls	r0, r7, #23
 80078ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80078f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80078f4:	d516      	bpl.n	8007924 <_dtoa_r+0x354>
 80078f6:	4b97      	ldr	r3, [pc, #604]	@ (8007b54 <_dtoa_r+0x584>)
 80078f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007900:	f7f8 ffa4 	bl	800084c <__aeabi_ddiv>
 8007904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007908:	f004 040f 	and.w	r4, r4, #15
 800790c:	2603      	movs	r6, #3
 800790e:	4d91      	ldr	r5, [pc, #580]	@ (8007b54 <_dtoa_r+0x584>)
 8007910:	b954      	cbnz	r4, 8007928 <_dtoa_r+0x358>
 8007912:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800791a:	f7f8 ff97 	bl	800084c <__aeabi_ddiv>
 800791e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007922:	e028      	b.n	8007976 <_dtoa_r+0x3a6>
 8007924:	2602      	movs	r6, #2
 8007926:	e7f2      	b.n	800790e <_dtoa_r+0x33e>
 8007928:	07e1      	lsls	r1, r4, #31
 800792a:	d508      	bpl.n	800793e <_dtoa_r+0x36e>
 800792c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007930:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007934:	f7f8 fe60 	bl	80005f8 <__aeabi_dmul>
 8007938:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800793c:	3601      	adds	r6, #1
 800793e:	1064      	asrs	r4, r4, #1
 8007940:	3508      	adds	r5, #8
 8007942:	e7e5      	b.n	8007910 <_dtoa_r+0x340>
 8007944:	f000 80af 	beq.w	8007aa6 <_dtoa_r+0x4d6>
 8007948:	427c      	negs	r4, r7
 800794a:	4b81      	ldr	r3, [pc, #516]	@ (8007b50 <_dtoa_r+0x580>)
 800794c:	4d81      	ldr	r5, [pc, #516]	@ (8007b54 <_dtoa_r+0x584>)
 800794e:	f004 020f 	and.w	r2, r4, #15
 8007952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007966:	1124      	asrs	r4, r4, #4
 8007968:	2300      	movs	r3, #0
 800796a:	2602      	movs	r6, #2
 800796c:	2c00      	cmp	r4, #0
 800796e:	f040 808f 	bne.w	8007a90 <_dtoa_r+0x4c0>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1d3      	bne.n	800791e <_dtoa_r+0x34e>
 8007976:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007978:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8094 	beq.w	8007aaa <_dtoa_r+0x4da>
 8007982:	4b75      	ldr	r3, [pc, #468]	@ (8007b58 <_dtoa_r+0x588>)
 8007984:	2200      	movs	r2, #0
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f9 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	f000 808b 	beq.w	8007aaa <_dtoa_r+0x4da>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8087 	beq.w	8007aaa <_dtoa_r+0x4da>
 800799c:	f1bb 0f00 	cmp.w	fp, #0
 80079a0:	dd34      	ble.n	8007a0c <_dtoa_r+0x43c>
 80079a2:	4620      	mov	r0, r4
 80079a4:	4b6d      	ldr	r3, [pc, #436]	@ (8007b5c <_dtoa_r+0x58c>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fe25 	bl	80005f8 <__aeabi_dmul>
 80079ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80079b6:	3601      	adds	r6, #1
 80079b8:	465c      	mov	r4, fp
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7f8 fdb2 	bl	8000524 <__aeabi_i2d>
 80079c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079c4:	f7f8 fe18 	bl	80005f8 <__aeabi_dmul>
 80079c8:	4b65      	ldr	r3, [pc, #404]	@ (8007b60 <_dtoa_r+0x590>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fc5e 	bl	800028c <__adddf3>
 80079d0:	4605      	mov	r5, r0
 80079d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80079d6:	2c00      	cmp	r4, #0
 80079d8:	d16a      	bne.n	8007ab0 <_dtoa_r+0x4e0>
 80079da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079de:	4b61      	ldr	r3, [pc, #388]	@ (8007b64 <_dtoa_r+0x594>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7f8 fc51 	bl	8000288 <__aeabi_dsub>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079ee:	462a      	mov	r2, r5
 80079f0:	4633      	mov	r3, r6
 80079f2:	f7f9 f891 	bl	8000b18 <__aeabi_dcmpgt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f040 8298 	bne.w	8007f2c <_dtoa_r+0x95c>
 80079fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a00:	462a      	mov	r2, r5
 8007a02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a06:	f7f9 f869 	bl	8000adc <__aeabi_dcmplt>
 8007a0a:	bb38      	cbnz	r0, 8007a5c <_dtoa_r+0x48c>
 8007a0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007a10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f2c0 8157 	blt.w	8007cca <_dtoa_r+0x6fa>
 8007a1c:	2f0e      	cmp	r7, #14
 8007a1e:	f300 8154 	bgt.w	8007cca <_dtoa_r+0x6fa>
 8007a22:	4b4b      	ldr	r3, [pc, #300]	@ (8007b50 <_dtoa_r+0x580>)
 8007a24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a28:	ed93 7b00 	vldr	d7, [r3]
 8007a2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	ed8d 7b00 	vstr	d7, [sp]
 8007a34:	f280 80e5 	bge.w	8007c02 <_dtoa_r+0x632>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f300 80e1 	bgt.w	8007c02 <_dtoa_r+0x632>
 8007a40:	d10c      	bne.n	8007a5c <_dtoa_r+0x48c>
 8007a42:	4b48      	ldr	r3, [pc, #288]	@ (8007b64 <_dtoa_r+0x594>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	ec51 0b17 	vmov	r0, r1, d7
 8007a4a:	f7f8 fdd5 	bl	80005f8 <__aeabi_dmul>
 8007a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a52:	f7f9 f857 	bl	8000b04 <__aeabi_dcmpge>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f000 8266 	beq.w	8007f28 <_dtoa_r+0x958>
 8007a5c:	2400      	movs	r4, #0
 8007a5e:	4625      	mov	r5, r4
 8007a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a62:	4656      	mov	r6, sl
 8007a64:	ea6f 0803 	mvn.w	r8, r3
 8007a68:	2700      	movs	r7, #0
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4648      	mov	r0, r9
 8007a6e:	f000 fcbf 	bl	80083f0 <_Bfree>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	f000 80bd 	beq.w	8007bf2 <_dtoa_r+0x622>
 8007a78:	b12f      	cbz	r7, 8007a86 <_dtoa_r+0x4b6>
 8007a7a:	42af      	cmp	r7, r5
 8007a7c:	d003      	beq.n	8007a86 <_dtoa_r+0x4b6>
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4648      	mov	r0, r9
 8007a82:	f000 fcb5 	bl	80083f0 <_Bfree>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4648      	mov	r0, r9
 8007a8a:	f000 fcb1 	bl	80083f0 <_Bfree>
 8007a8e:	e0b0      	b.n	8007bf2 <_dtoa_r+0x622>
 8007a90:	07e2      	lsls	r2, r4, #31
 8007a92:	d505      	bpl.n	8007aa0 <_dtoa_r+0x4d0>
 8007a94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a98:	f7f8 fdae 	bl	80005f8 <__aeabi_dmul>
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	1064      	asrs	r4, r4, #1
 8007aa2:	3508      	adds	r5, #8
 8007aa4:	e762      	b.n	800796c <_dtoa_r+0x39c>
 8007aa6:	2602      	movs	r6, #2
 8007aa8:	e765      	b.n	8007976 <_dtoa_r+0x3a6>
 8007aaa:	9c03      	ldr	r4, [sp, #12]
 8007aac:	46b8      	mov	r8, r7
 8007aae:	e784      	b.n	80079ba <_dtoa_r+0x3ea>
 8007ab0:	4b27      	ldr	r3, [pc, #156]	@ (8007b50 <_dtoa_r+0x580>)
 8007ab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ab4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ab8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007abc:	4454      	add	r4, sl
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d054      	beq.n	8007b6c <_dtoa_r+0x59c>
 8007ac2:	4929      	ldr	r1, [pc, #164]	@ (8007b68 <_dtoa_r+0x598>)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7f8 fec1 	bl	800084c <__aeabi_ddiv>
 8007aca:	4633      	mov	r3, r6
 8007acc:	462a      	mov	r2, r5
 8007ace:	f7f8 fbdb 	bl	8000288 <__aeabi_dsub>
 8007ad2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ad6:	4656      	mov	r6, sl
 8007ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007adc:	f7f9 f83c 	bl	8000b58 <__aeabi_d2iz>
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	f7f8 fd1f 	bl	8000524 <__aeabi_i2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aee:	f7f8 fbcb 	bl	8000288 <__aeabi_dsub>
 8007af2:	3530      	adds	r5, #48	@ 0x30
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007afc:	f806 5b01 	strb.w	r5, [r6], #1
 8007b00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b04:	f7f8 ffea 	bl	8000adc <__aeabi_dcmplt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d172      	bne.n	8007bf2 <_dtoa_r+0x622>
 8007b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b10:	4911      	ldr	r1, [pc, #68]	@ (8007b58 <_dtoa_r+0x588>)
 8007b12:	2000      	movs	r0, #0
 8007b14:	f7f8 fbb8 	bl	8000288 <__aeabi_dsub>
 8007b18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b1c:	f7f8 ffde 	bl	8000adc <__aeabi_dcmplt>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f040 80b4 	bne.w	8007c8e <_dtoa_r+0x6be>
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	f43f af70 	beq.w	8007a0c <_dtoa_r+0x43c>
 8007b2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b30:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <_dtoa_r+0x58c>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <_dtoa_r+0x58c>)
 8007b3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b3e:	2200      	movs	r2, #0
 8007b40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4c:	e7c4      	b.n	8007ad8 <_dtoa_r+0x508>
 8007b4e:	bf00      	nop
 8007b50:	0800adf8 	.word	0x0800adf8
 8007b54:	0800add0 	.word	0x0800add0
 8007b58:	3ff00000 	.word	0x3ff00000
 8007b5c:	40240000 	.word	0x40240000
 8007b60:	401c0000 	.word	0x401c0000
 8007b64:	40140000 	.word	0x40140000
 8007b68:	3fe00000 	.word	0x3fe00000
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007b7a:	4656      	mov	r6, sl
 8007b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b80:	f7f8 ffea 	bl	8000b58 <__aeabi_d2iz>
 8007b84:	4605      	mov	r5, r0
 8007b86:	f7f8 fccd 	bl	8000524 <__aeabi_i2d>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b92:	f7f8 fb79 	bl	8000288 <__aeabi_dsub>
 8007b96:	3530      	adds	r5, #48	@ 0x30
 8007b98:	f806 5b01 	strb.w	r5, [r6], #1
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	d124      	bne.n	8007bf6 <_dtoa_r+0x626>
 8007bac:	4baf      	ldr	r3, [pc, #700]	@ (8007e6c <_dtoa_r+0x89c>)
 8007bae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007bb2:	f7f8 fb6b 	bl	800028c <__adddf3>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bbe:	f7f8 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d163      	bne.n	8007c8e <_dtoa_r+0x6be>
 8007bc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007bca:	49a8      	ldr	r1, [pc, #672]	@ (8007e6c <_dtoa_r+0x89c>)
 8007bcc:	2000      	movs	r0, #0
 8007bce:	f7f8 fb5b 	bl	8000288 <__aeabi_dsub>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bda:	f7f8 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f43f af14 	beq.w	8007a0c <_dtoa_r+0x43c>
 8007be4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007be6:	1e73      	subs	r3, r6, #1
 8007be8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bee:	2b30      	cmp	r3, #48	@ 0x30
 8007bf0:	d0f8      	beq.n	8007be4 <_dtoa_r+0x614>
 8007bf2:	4647      	mov	r7, r8
 8007bf4:	e03b      	b.n	8007c6e <_dtoa_r+0x69e>
 8007bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8007e70 <_dtoa_r+0x8a0>)
 8007bf8:	f7f8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8007bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c00:	e7bc      	b.n	8007b7c <_dtoa_r+0x5ac>
 8007c02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007c06:	4656      	mov	r6, sl
 8007c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7f8 fe1c 	bl	800084c <__aeabi_ddiv>
 8007c14:	f7f8 ffa0 	bl	8000b58 <__aeabi_d2iz>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	f7f8 fc83 	bl	8000524 <__aeabi_i2d>
 8007c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c22:	f7f8 fce9 	bl	80005f8 <__aeabi_dmul>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c32:	f7f8 fb29 	bl	8000288 <__aeabi_dsub>
 8007c36:	f806 4b01 	strb.w	r4, [r6], #1
 8007c3a:	9d03      	ldr	r5, [sp, #12]
 8007c3c:	eba6 040a 	sub.w	r4, r6, sl
 8007c40:	42a5      	cmp	r5, r4
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	d133      	bne.n	8007cb0 <_dtoa_r+0x6e0>
 8007c48:	f7f8 fb20 	bl	800028c <__adddf3>
 8007c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c50:	4604      	mov	r4, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	f7f8 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8007c58:	b9c0      	cbnz	r0, 8007c8c <_dtoa_r+0x6bc>
 8007c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c66:	b110      	cbz	r0, 8007c6e <_dtoa_r+0x69e>
 8007c68:	f018 0f01 	tst.w	r8, #1
 8007c6c:	d10e      	bne.n	8007c8c <_dtoa_r+0x6bc>
 8007c6e:	9902      	ldr	r1, [sp, #8]
 8007c70:	4648      	mov	r0, r9
 8007c72:	f000 fbbd 	bl	80083f0 <_Bfree>
 8007c76:	2300      	movs	r3, #0
 8007c78:	7033      	strb	r3, [r6, #0]
 8007c7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c7c:	3701      	adds	r7, #1
 8007c7e:	601f      	str	r7, [r3, #0]
 8007c80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 824b 	beq.w	800811e <_dtoa_r+0xb4e>
 8007c88:	601e      	str	r6, [r3, #0]
 8007c8a:	e248      	b.n	800811e <_dtoa_r+0xb4e>
 8007c8c:	46b8      	mov	r8, r7
 8007c8e:	4633      	mov	r3, r6
 8007c90:	461e      	mov	r6, r3
 8007c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c96:	2a39      	cmp	r2, #57	@ 0x39
 8007c98:	d106      	bne.n	8007ca8 <_dtoa_r+0x6d8>
 8007c9a:	459a      	cmp	sl, r3
 8007c9c:	d1f8      	bne.n	8007c90 <_dtoa_r+0x6c0>
 8007c9e:	2230      	movs	r2, #48	@ 0x30
 8007ca0:	f108 0801 	add.w	r8, r8, #1
 8007ca4:	f88a 2000 	strb.w	r2, [sl]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	3201      	adds	r2, #1
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e7a0      	b.n	8007bf2 <_dtoa_r+0x622>
 8007cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8007e70 <_dtoa_r+0x8a0>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	460d      	mov	r5, r1
 8007cc0:	f7f8 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d09f      	beq.n	8007c08 <_dtoa_r+0x638>
 8007cc8:	e7d1      	b.n	8007c6e <_dtoa_r+0x69e>
 8007cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	f000 80ea 	beq.w	8007ea6 <_dtoa_r+0x8d6>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	2a01      	cmp	r2, #1
 8007cd6:	f300 80cd 	bgt.w	8007e74 <_dtoa_r+0x8a4>
 8007cda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	f000 80c1 	beq.w	8007e64 <_dtoa_r+0x894>
 8007ce2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ce6:	9c08      	ldr	r4, [sp, #32]
 8007ce8:	9e00      	ldr	r6, [sp, #0]
 8007cea:	9a00      	ldr	r2, [sp, #0]
 8007cec:	441a      	add	r2, r3
 8007cee:	9200      	str	r2, [sp, #0]
 8007cf0:	9a06      	ldr	r2, [sp, #24]
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	441a      	add	r2, r3
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	9206      	str	r2, [sp, #24]
 8007cfa:	f000 fc77 	bl	80085ec <__i2b>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b166      	cbz	r6, 8007d1c <_dtoa_r+0x74c>
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd09      	ble.n	8007d1c <_dtoa_r+0x74c>
 8007d08:	42b3      	cmp	r3, r6
 8007d0a:	9a00      	ldr	r2, [sp, #0]
 8007d0c:	bfa8      	it	ge
 8007d0e:	4633      	movge	r3, r6
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	9200      	str	r2, [sp, #0]
 8007d14:	9a06      	ldr	r2, [sp, #24]
 8007d16:	1af6      	subs	r6, r6, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	b30b      	cbz	r3, 8007d64 <_dtoa_r+0x794>
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80c6 	beq.w	8007eb4 <_dtoa_r+0x8e4>
 8007d28:	2c00      	cmp	r4, #0
 8007d2a:	f000 80c0 	beq.w	8007eae <_dtoa_r+0x8de>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4622      	mov	r2, r4
 8007d32:	4648      	mov	r0, r9
 8007d34:	f000 fd12 	bl	800875c <__pow5mult>
 8007d38:	9a02      	ldr	r2, [sp, #8]
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	4648      	mov	r0, r9
 8007d40:	f000 fc6a 	bl	8008618 <__multiply>
 8007d44:	9902      	ldr	r1, [sp, #8]
 8007d46:	4680      	mov	r8, r0
 8007d48:	4648      	mov	r0, r9
 8007d4a:	f000 fb51 	bl	80083f0 <_Bfree>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	1b1b      	subs	r3, r3, r4
 8007d52:	9308      	str	r3, [sp, #32]
 8007d54:	f000 80b1 	beq.w	8007eba <_dtoa_r+0x8ea>
 8007d58:	9a08      	ldr	r2, [sp, #32]
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f000 fcfd 	bl	800875c <__pow5mult>
 8007d62:	9002      	str	r0, [sp, #8]
 8007d64:	2101      	movs	r1, #1
 8007d66:	4648      	mov	r0, r9
 8007d68:	f000 fc40 	bl	80085ec <__i2b>
 8007d6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d6e:	4604      	mov	r4, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 81d8 	beq.w	8008126 <_dtoa_r+0xb56>
 8007d76:	461a      	mov	r2, r3
 8007d78:	4601      	mov	r1, r0
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	f000 fcee 	bl	800875c <__pow5mult>
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	4604      	mov	r4, r0
 8007d86:	f300 809f 	bgt.w	8007ec8 <_dtoa_r+0x8f8>
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 8097 	bne.w	8007ec0 <_dtoa_r+0x8f0>
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 8093 	bne.w	8007ec4 <_dtoa_r+0x8f4>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007da4:	0d1b      	lsrs	r3, r3, #20
 8007da6:	051b      	lsls	r3, r3, #20
 8007da8:	b133      	cbz	r3, 8007db8 <_dtoa_r+0x7e8>
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	9b06      	ldr	r3, [sp, #24]
 8007db2:	3301      	adds	r3, #1
 8007db4:	9306      	str	r3, [sp, #24]
 8007db6:	2301      	movs	r3, #1
 8007db8:	9308      	str	r3, [sp, #32]
 8007dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 81b8 	beq.w	8008132 <_dtoa_r+0xb62>
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007dc8:	6918      	ldr	r0, [r3, #16]
 8007dca:	f000 fbc3 	bl	8008554 <__hi0bits>
 8007dce:	f1c0 0020 	rsb	r0, r0, #32
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	4418      	add	r0, r3
 8007dd6:	f010 001f 	ands.w	r0, r0, #31
 8007dda:	f000 8082 	beq.w	8007ee2 <_dtoa_r+0x912>
 8007dde:	f1c0 0320 	rsb	r3, r0, #32
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	dd73      	ble.n	8007ece <_dtoa_r+0x8fe>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	f1c0 001c 	rsb	r0, r0, #28
 8007dec:	4403      	add	r3, r0
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	9b06      	ldr	r3, [sp, #24]
 8007df2:	4403      	add	r3, r0
 8007df4:	4406      	add	r6, r0
 8007df6:	9306      	str	r3, [sp, #24]
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dd05      	ble.n	8007e0a <_dtoa_r+0x83a>
 8007dfe:	9902      	ldr	r1, [sp, #8]
 8007e00:	461a      	mov	r2, r3
 8007e02:	4648      	mov	r0, r9
 8007e04:	f000 fd04 	bl	8008810 <__lshift>
 8007e08:	9002      	str	r0, [sp, #8]
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dd05      	ble.n	8007e1c <_dtoa_r+0x84c>
 8007e10:	4621      	mov	r1, r4
 8007e12:	461a      	mov	r2, r3
 8007e14:	4648      	mov	r0, r9
 8007e16:	f000 fcfb 	bl	8008810 <__lshift>
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d061      	beq.n	8007ee6 <_dtoa_r+0x916>
 8007e22:	9802      	ldr	r0, [sp, #8]
 8007e24:	4621      	mov	r1, r4
 8007e26:	f000 fd5f 	bl	80088e8 <__mcmp>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	da5b      	bge.n	8007ee6 <_dtoa_r+0x916>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9902      	ldr	r1, [sp, #8]
 8007e32:	220a      	movs	r2, #10
 8007e34:	4648      	mov	r0, r9
 8007e36:	f000 fafd 	bl	8008434 <__multadd>
 8007e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3c:	9002      	str	r0, [sp, #8]
 8007e3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8177 	beq.w	8008136 <_dtoa_r+0xb66>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	220a      	movs	r2, #10
 8007e4e:	4648      	mov	r0, r9
 8007e50:	f000 faf0 	bl	8008434 <__multadd>
 8007e54:	f1bb 0f00 	cmp.w	fp, #0
 8007e58:	4605      	mov	r5, r0
 8007e5a:	dc6f      	bgt.n	8007f3c <_dtoa_r+0x96c>
 8007e5c:	9b07      	ldr	r3, [sp, #28]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	dc49      	bgt.n	8007ef6 <_dtoa_r+0x926>
 8007e62:	e06b      	b.n	8007f3c <_dtoa_r+0x96c>
 8007e64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007e6a:	e73c      	b.n	8007ce6 <_dtoa_r+0x716>
 8007e6c:	3fe00000 	.word	0x3fe00000
 8007e70:	40240000 	.word	0x40240000
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	1e5c      	subs	r4, r3, #1
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	db09      	blt.n	8007e92 <_dtoa_r+0x8c2>
 8007e7e:	1b1c      	subs	r4, r3, r4
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f6bf af30 	bge.w	8007ce8 <_dtoa_r+0x718>
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	9a03      	ldr	r2, [sp, #12]
 8007e8c:	1a9e      	subs	r6, r3, r2
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e72b      	b.n	8007cea <_dtoa_r+0x71a>
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e96:	9408      	str	r4, [sp, #32]
 8007e98:	1ae3      	subs	r3, r4, r3
 8007e9a:	441a      	add	r2, r3
 8007e9c:	9e00      	ldr	r6, [sp, #0]
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ea2:	2400      	movs	r4, #0
 8007ea4:	e721      	b.n	8007cea <_dtoa_r+0x71a>
 8007ea6:	9c08      	ldr	r4, [sp, #32]
 8007ea8:	9e00      	ldr	r6, [sp, #0]
 8007eaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007eac:	e728      	b.n	8007d00 <_dtoa_r+0x730>
 8007eae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007eb2:	e751      	b.n	8007d58 <_dtoa_r+0x788>
 8007eb4:	9a08      	ldr	r2, [sp, #32]
 8007eb6:	9902      	ldr	r1, [sp, #8]
 8007eb8:	e750      	b.n	8007d5c <_dtoa_r+0x78c>
 8007eba:	f8cd 8008 	str.w	r8, [sp, #8]
 8007ebe:	e751      	b.n	8007d64 <_dtoa_r+0x794>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e779      	b.n	8007db8 <_dtoa_r+0x7e8>
 8007ec4:	9b04      	ldr	r3, [sp, #16]
 8007ec6:	e777      	b.n	8007db8 <_dtoa_r+0x7e8>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	e779      	b.n	8007dc2 <_dtoa_r+0x7f2>
 8007ece:	d093      	beq.n	8007df8 <_dtoa_r+0x828>
 8007ed0:	9a00      	ldr	r2, [sp, #0]
 8007ed2:	331c      	adds	r3, #28
 8007ed4:	441a      	add	r2, r3
 8007ed6:	9200      	str	r2, [sp, #0]
 8007ed8:	9a06      	ldr	r2, [sp, #24]
 8007eda:	441a      	add	r2, r3
 8007edc:	441e      	add	r6, r3
 8007ede:	9206      	str	r2, [sp, #24]
 8007ee0:	e78a      	b.n	8007df8 <_dtoa_r+0x828>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	e7f4      	b.n	8007ed0 <_dtoa_r+0x900>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	46b8      	mov	r8, r7
 8007eec:	dc20      	bgt.n	8007f30 <_dtoa_r+0x960>
 8007eee:	469b      	mov	fp, r3
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dd1e      	ble.n	8007f34 <_dtoa_r+0x964>
 8007ef6:	f1bb 0f00 	cmp.w	fp, #0
 8007efa:	f47f adb1 	bne.w	8007a60 <_dtoa_r+0x490>
 8007efe:	4621      	mov	r1, r4
 8007f00:	465b      	mov	r3, fp
 8007f02:	2205      	movs	r2, #5
 8007f04:	4648      	mov	r0, r9
 8007f06:	f000 fa95 	bl	8008434 <__multadd>
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	9802      	ldr	r0, [sp, #8]
 8007f10:	f000 fcea 	bl	80088e8 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f77f ada3 	ble.w	8007a60 <_dtoa_r+0x490>
 8007f1a:	4656      	mov	r6, sl
 8007f1c:	2331      	movs	r3, #49	@ 0x31
 8007f1e:	f806 3b01 	strb.w	r3, [r6], #1
 8007f22:	f108 0801 	add.w	r8, r8, #1
 8007f26:	e59f      	b.n	8007a68 <_dtoa_r+0x498>
 8007f28:	9c03      	ldr	r4, [sp, #12]
 8007f2a:	46b8      	mov	r8, r7
 8007f2c:	4625      	mov	r5, r4
 8007f2e:	e7f4      	b.n	8007f1a <_dtoa_r+0x94a>
 8007f30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8101 	beq.w	800813e <_dtoa_r+0xb6e>
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	dd05      	ble.n	8007f4c <_dtoa_r+0x97c>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4632      	mov	r2, r6
 8007f44:	4648      	mov	r0, r9
 8007f46:	f000 fc63 	bl	8008810 <__lshift>
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d05c      	beq.n	800800c <_dtoa_r+0xa3c>
 8007f52:	6869      	ldr	r1, [r5, #4]
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fa0b 	bl	8008370 <_Balloc>
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	b928      	cbnz	r0, 8007f6a <_dtoa_r+0x99a>
 8007f5e:	4b82      	ldr	r3, [pc, #520]	@ (8008168 <_dtoa_r+0xb98>)
 8007f60:	4602      	mov	r2, r0
 8007f62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f66:	f7ff bb4a 	b.w	80075fe <_dtoa_r+0x2e>
 8007f6a:	692a      	ldr	r2, [r5, #16]
 8007f6c:	3202      	adds	r2, #2
 8007f6e:	0092      	lsls	r2, r2, #2
 8007f70:	f105 010c 	add.w	r1, r5, #12
 8007f74:	300c      	adds	r0, #12
 8007f76:	f001 ff7b 	bl	8009e70 <memcpy>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f000 fc46 	bl	8008810 <__lshift>
 8007f84:	f10a 0301 	add.w	r3, sl, #1
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	eb0a 030b 	add.w	r3, sl, fp
 8007f8e:	9308      	str	r3, [sp, #32]
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	462f      	mov	r7, r5
 8007f98:	9306      	str	r3, [sp, #24]
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	9802      	ldr	r0, [sp, #8]
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fa6:	f7ff fa8b 	bl	80074c0 <quorem>
 8007faa:	4603      	mov	r3, r0
 8007fac:	3330      	adds	r3, #48	@ 0x30
 8007fae:	9003      	str	r0, [sp, #12]
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	9802      	ldr	r0, [sp, #8]
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	f000 fc97 	bl	80088e8 <__mcmp>
 8007fba:	462a      	mov	r2, r5
 8007fbc:	9004      	str	r0, [sp, #16]
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	f000 fcad 	bl	8008920 <__mdiff>
 8007fc6:	68c2      	ldr	r2, [r0, #12]
 8007fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fca:	4606      	mov	r6, r0
 8007fcc:	bb02      	cbnz	r2, 8008010 <_dtoa_r+0xa40>
 8007fce:	4601      	mov	r1, r0
 8007fd0:	9802      	ldr	r0, [sp, #8]
 8007fd2:	f000 fc89 	bl	80088e8 <__mcmp>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4648      	mov	r0, r9
 8007fde:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe2:	f000 fa05 	bl	80083f0 <_Bfree>
 8007fe6:	9b07      	ldr	r3, [sp, #28]
 8007fe8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007fea:	9e00      	ldr	r6, [sp, #0]
 8007fec:	ea42 0103 	orr.w	r1, r2, r3
 8007ff0:	9b06      	ldr	r3, [sp, #24]
 8007ff2:	4319      	orrs	r1, r3
 8007ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff6:	d10d      	bne.n	8008014 <_dtoa_r+0xa44>
 8007ff8:	2b39      	cmp	r3, #57	@ 0x39
 8007ffa:	d027      	beq.n	800804c <_dtoa_r+0xa7c>
 8007ffc:	9a04      	ldr	r2, [sp, #16]
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	dd01      	ble.n	8008006 <_dtoa_r+0xa36>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	3331      	adds	r3, #49	@ 0x31
 8008006:	f88b 3000 	strb.w	r3, [fp]
 800800a:	e52e      	b.n	8007a6a <_dtoa_r+0x49a>
 800800c:	4628      	mov	r0, r5
 800800e:	e7b9      	b.n	8007f84 <_dtoa_r+0x9b4>
 8008010:	2201      	movs	r2, #1
 8008012:	e7e2      	b.n	8007fda <_dtoa_r+0xa0a>
 8008014:	9904      	ldr	r1, [sp, #16]
 8008016:	2900      	cmp	r1, #0
 8008018:	db04      	blt.n	8008024 <_dtoa_r+0xa54>
 800801a:	9807      	ldr	r0, [sp, #28]
 800801c:	4301      	orrs	r1, r0
 800801e:	9806      	ldr	r0, [sp, #24]
 8008020:	4301      	orrs	r1, r0
 8008022:	d120      	bne.n	8008066 <_dtoa_r+0xa96>
 8008024:	2a00      	cmp	r2, #0
 8008026:	ddee      	ble.n	8008006 <_dtoa_r+0xa36>
 8008028:	9902      	ldr	r1, [sp, #8]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2201      	movs	r2, #1
 800802e:	4648      	mov	r0, r9
 8008030:	f000 fbee 	bl	8008810 <__lshift>
 8008034:	4621      	mov	r1, r4
 8008036:	9002      	str	r0, [sp, #8]
 8008038:	f000 fc56 	bl	80088e8 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	dc02      	bgt.n	8008048 <_dtoa_r+0xa78>
 8008042:	d1e0      	bne.n	8008006 <_dtoa_r+0xa36>
 8008044:	07da      	lsls	r2, r3, #31
 8008046:	d5de      	bpl.n	8008006 <_dtoa_r+0xa36>
 8008048:	2b39      	cmp	r3, #57	@ 0x39
 800804a:	d1da      	bne.n	8008002 <_dtoa_r+0xa32>
 800804c:	2339      	movs	r3, #57	@ 0x39
 800804e:	f88b 3000 	strb.w	r3, [fp]
 8008052:	4633      	mov	r3, r6
 8008054:	461e      	mov	r6, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800805c:	2a39      	cmp	r2, #57	@ 0x39
 800805e:	d04e      	beq.n	80080fe <_dtoa_r+0xb2e>
 8008060:	3201      	adds	r2, #1
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e501      	b.n	8007a6a <_dtoa_r+0x49a>
 8008066:	2a00      	cmp	r2, #0
 8008068:	dd03      	ble.n	8008072 <_dtoa_r+0xaa2>
 800806a:	2b39      	cmp	r3, #57	@ 0x39
 800806c:	d0ee      	beq.n	800804c <_dtoa_r+0xa7c>
 800806e:	3301      	adds	r3, #1
 8008070:	e7c9      	b.n	8008006 <_dtoa_r+0xa36>
 8008072:	9a00      	ldr	r2, [sp, #0]
 8008074:	9908      	ldr	r1, [sp, #32]
 8008076:	f802 3c01 	strb.w	r3, [r2, #-1]
 800807a:	428a      	cmp	r2, r1
 800807c:	d028      	beq.n	80080d0 <_dtoa_r+0xb00>
 800807e:	9902      	ldr	r1, [sp, #8]
 8008080:	2300      	movs	r3, #0
 8008082:	220a      	movs	r2, #10
 8008084:	4648      	mov	r0, r9
 8008086:	f000 f9d5 	bl	8008434 <__multadd>
 800808a:	42af      	cmp	r7, r5
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	f04f 020a 	mov.w	r2, #10
 8008096:	4639      	mov	r1, r7
 8008098:	4648      	mov	r0, r9
 800809a:	d107      	bne.n	80080ac <_dtoa_r+0xadc>
 800809c:	f000 f9ca 	bl	8008434 <__multadd>
 80080a0:	4607      	mov	r7, r0
 80080a2:	4605      	mov	r5, r0
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	3301      	adds	r3, #1
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	e777      	b.n	8007f9c <_dtoa_r+0x9cc>
 80080ac:	f000 f9c2 	bl	8008434 <__multadd>
 80080b0:	4629      	mov	r1, r5
 80080b2:	4607      	mov	r7, r0
 80080b4:	2300      	movs	r3, #0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4648      	mov	r0, r9
 80080ba:	f000 f9bb 	bl	8008434 <__multadd>
 80080be:	4605      	mov	r5, r0
 80080c0:	e7f0      	b.n	80080a4 <_dtoa_r+0xad4>
 80080c2:	f1bb 0f00 	cmp.w	fp, #0
 80080c6:	bfcc      	ite	gt
 80080c8:	465e      	movgt	r6, fp
 80080ca:	2601      	movle	r6, #1
 80080cc:	4456      	add	r6, sl
 80080ce:	2700      	movs	r7, #0
 80080d0:	9902      	ldr	r1, [sp, #8]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	4648      	mov	r0, r9
 80080d8:	f000 fb9a 	bl	8008810 <__lshift>
 80080dc:	4621      	mov	r1, r4
 80080de:	9002      	str	r0, [sp, #8]
 80080e0:	f000 fc02 	bl	80088e8 <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	dcb4      	bgt.n	8008052 <_dtoa_r+0xa82>
 80080e8:	d102      	bne.n	80080f0 <_dtoa_r+0xb20>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	07db      	lsls	r3, r3, #31
 80080ee:	d4b0      	bmi.n	8008052 <_dtoa_r+0xa82>
 80080f0:	4633      	mov	r3, r6
 80080f2:	461e      	mov	r6, r3
 80080f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f8:	2a30      	cmp	r2, #48	@ 0x30
 80080fa:	d0fa      	beq.n	80080f2 <_dtoa_r+0xb22>
 80080fc:	e4b5      	b.n	8007a6a <_dtoa_r+0x49a>
 80080fe:	459a      	cmp	sl, r3
 8008100:	d1a8      	bne.n	8008054 <_dtoa_r+0xa84>
 8008102:	2331      	movs	r3, #49	@ 0x31
 8008104:	f108 0801 	add.w	r8, r8, #1
 8008108:	f88a 3000 	strb.w	r3, [sl]
 800810c:	e4ad      	b.n	8007a6a <_dtoa_r+0x49a>
 800810e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008110:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800816c <_dtoa_r+0xb9c>
 8008114:	b11b      	cbz	r3, 800811e <_dtoa_r+0xb4e>
 8008116:	f10a 0308 	add.w	r3, sl, #8
 800811a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4650      	mov	r0, sl
 8008120:	b017      	add	sp, #92	@ 0x5c
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	9b07      	ldr	r3, [sp, #28]
 8008128:	2b01      	cmp	r3, #1
 800812a:	f77f ae2e 	ble.w	8007d8a <_dtoa_r+0x7ba>
 800812e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	2001      	movs	r0, #1
 8008134:	e64d      	b.n	8007dd2 <_dtoa_r+0x802>
 8008136:	f1bb 0f00 	cmp.w	fp, #0
 800813a:	f77f aed9 	ble.w	8007ef0 <_dtoa_r+0x920>
 800813e:	4656      	mov	r6, sl
 8008140:	9802      	ldr	r0, [sp, #8]
 8008142:	4621      	mov	r1, r4
 8008144:	f7ff f9bc 	bl	80074c0 <quorem>
 8008148:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800814c:	f806 3b01 	strb.w	r3, [r6], #1
 8008150:	eba6 020a 	sub.w	r2, r6, sl
 8008154:	4593      	cmp	fp, r2
 8008156:	ddb4      	ble.n	80080c2 <_dtoa_r+0xaf2>
 8008158:	9902      	ldr	r1, [sp, #8]
 800815a:	2300      	movs	r3, #0
 800815c:	220a      	movs	r2, #10
 800815e:	4648      	mov	r0, r9
 8008160:	f000 f968 	bl	8008434 <__multadd>
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	e7eb      	b.n	8008140 <_dtoa_r+0xb70>
 8008168:	0800acdb 	.word	0x0800acdb
 800816c:	0800ac76 	.word	0x0800ac76

08008170 <_free_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4605      	mov	r5, r0
 8008174:	2900      	cmp	r1, #0
 8008176:	d041      	beq.n	80081fc <_free_r+0x8c>
 8008178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800817c:	1f0c      	subs	r4, r1, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfb8      	it	lt
 8008182:	18e4      	addlt	r4, r4, r3
 8008184:	f000 f8e8 	bl	8008358 <__malloc_lock>
 8008188:	4a1d      	ldr	r2, [pc, #116]	@ (8008200 <_free_r+0x90>)
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	b933      	cbnz	r3, 800819c <_free_r+0x2c>
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	6014      	str	r4, [r2, #0]
 8008192:	4628      	mov	r0, r5
 8008194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008198:	f000 b8e4 	b.w	8008364 <__malloc_unlock>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d908      	bls.n	80081b2 <_free_r+0x42>
 80081a0:	6820      	ldr	r0, [r4, #0]
 80081a2:	1821      	adds	r1, r4, r0
 80081a4:	428b      	cmp	r3, r1
 80081a6:	bf01      	itttt	eq
 80081a8:	6819      	ldreq	r1, [r3, #0]
 80081aa:	685b      	ldreq	r3, [r3, #4]
 80081ac:	1809      	addeq	r1, r1, r0
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	e7ed      	b.n	800818e <_free_r+0x1e>
 80081b2:	461a      	mov	r2, r3
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b10b      	cbz	r3, 80081bc <_free_r+0x4c>
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d9fa      	bls.n	80081b2 <_free_r+0x42>
 80081bc:	6811      	ldr	r1, [r2, #0]
 80081be:	1850      	adds	r0, r2, r1
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d10b      	bne.n	80081dc <_free_r+0x6c>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	4401      	add	r1, r0
 80081c8:	1850      	adds	r0, r2, r1
 80081ca:	4283      	cmp	r3, r0
 80081cc:	6011      	str	r1, [r2, #0]
 80081ce:	d1e0      	bne.n	8008192 <_free_r+0x22>
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	6053      	str	r3, [r2, #4]
 80081d6:	4408      	add	r0, r1
 80081d8:	6010      	str	r0, [r2, #0]
 80081da:	e7da      	b.n	8008192 <_free_r+0x22>
 80081dc:	d902      	bls.n	80081e4 <_free_r+0x74>
 80081de:	230c      	movs	r3, #12
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	e7d6      	b.n	8008192 <_free_r+0x22>
 80081e4:	6820      	ldr	r0, [r4, #0]
 80081e6:	1821      	adds	r1, r4, r0
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf04      	itt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	bf04      	itt	eq
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	6054      	str	r4, [r2, #4]
 80081fa:	e7ca      	b.n	8008192 <_free_r+0x22>
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	bf00      	nop
 8008200:	20000444 	.word	0x20000444

08008204 <malloc>:
 8008204:	4b02      	ldr	r3, [pc, #8]	@ (8008210 <malloc+0xc>)
 8008206:	4601      	mov	r1, r0
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f000 b825 	b.w	8008258 <_malloc_r>
 800820e:	bf00      	nop
 8008210:	20000018 	.word	0x20000018

08008214 <sbrk_aligned>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	4e0f      	ldr	r6, [pc, #60]	@ (8008254 <sbrk_aligned+0x40>)
 8008218:	460c      	mov	r4, r1
 800821a:	6831      	ldr	r1, [r6, #0]
 800821c:	4605      	mov	r5, r0
 800821e:	b911      	cbnz	r1, 8008226 <sbrk_aligned+0x12>
 8008220:	f001 fe16 	bl	8009e50 <_sbrk_r>
 8008224:	6030      	str	r0, [r6, #0]
 8008226:	4621      	mov	r1, r4
 8008228:	4628      	mov	r0, r5
 800822a:	f001 fe11 	bl	8009e50 <_sbrk_r>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d103      	bne.n	800823a <sbrk_aligned+0x26>
 8008232:	f04f 34ff 	mov.w	r4, #4294967295
 8008236:	4620      	mov	r0, r4
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	1cc4      	adds	r4, r0, #3
 800823c:	f024 0403 	bic.w	r4, r4, #3
 8008240:	42a0      	cmp	r0, r4
 8008242:	d0f8      	beq.n	8008236 <sbrk_aligned+0x22>
 8008244:	1a21      	subs	r1, r4, r0
 8008246:	4628      	mov	r0, r5
 8008248:	f001 fe02 	bl	8009e50 <_sbrk_r>
 800824c:	3001      	adds	r0, #1
 800824e:	d1f2      	bne.n	8008236 <sbrk_aligned+0x22>
 8008250:	e7ef      	b.n	8008232 <sbrk_aligned+0x1e>
 8008252:	bf00      	nop
 8008254:	20000440 	.word	0x20000440

08008258 <_malloc_r>:
 8008258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800825c:	1ccd      	adds	r5, r1, #3
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	2d00      	cmp	r5, #0
 800826c:	4606      	mov	r6, r0
 800826e:	db01      	blt.n	8008274 <_malloc_r+0x1c>
 8008270:	42a9      	cmp	r1, r5
 8008272:	d904      	bls.n	800827e <_malloc_r+0x26>
 8008274:	230c      	movs	r3, #12
 8008276:	6033      	str	r3, [r6, #0]
 8008278:	2000      	movs	r0, #0
 800827a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008354 <_malloc_r+0xfc>
 8008282:	f000 f869 	bl	8008358 <__malloc_lock>
 8008286:	f8d8 3000 	ldr.w	r3, [r8]
 800828a:	461c      	mov	r4, r3
 800828c:	bb44      	cbnz	r4, 80082e0 <_malloc_r+0x88>
 800828e:	4629      	mov	r1, r5
 8008290:	4630      	mov	r0, r6
 8008292:	f7ff ffbf 	bl	8008214 <sbrk_aligned>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	4604      	mov	r4, r0
 800829a:	d158      	bne.n	800834e <_malloc_r+0xf6>
 800829c:	f8d8 4000 	ldr.w	r4, [r8]
 80082a0:	4627      	mov	r7, r4
 80082a2:	2f00      	cmp	r7, #0
 80082a4:	d143      	bne.n	800832e <_malloc_r+0xd6>
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	d04b      	beq.n	8008342 <_malloc_r+0xea>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	4639      	mov	r1, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	eb04 0903 	add.w	r9, r4, r3
 80082b4:	f001 fdcc 	bl	8009e50 <_sbrk_r>
 80082b8:	4581      	cmp	r9, r0
 80082ba:	d142      	bne.n	8008342 <_malloc_r+0xea>
 80082bc:	6821      	ldr	r1, [r4, #0]
 80082be:	1a6d      	subs	r5, r5, r1
 80082c0:	4629      	mov	r1, r5
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ffa6 	bl	8008214 <sbrk_aligned>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d03a      	beq.n	8008342 <_malloc_r+0xea>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	442b      	add	r3, r5
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	f8d8 3000 	ldr.w	r3, [r8]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	bb62      	cbnz	r2, 8008334 <_malloc_r+0xdc>
 80082da:	f8c8 7000 	str.w	r7, [r8]
 80082de:	e00f      	b.n	8008300 <_malloc_r+0xa8>
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	1b52      	subs	r2, r2, r5
 80082e4:	d420      	bmi.n	8008328 <_malloc_r+0xd0>
 80082e6:	2a0b      	cmp	r2, #11
 80082e8:	d917      	bls.n	800831a <_malloc_r+0xc2>
 80082ea:	1961      	adds	r1, r4, r5
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	6025      	str	r5, [r4, #0]
 80082f0:	bf18      	it	ne
 80082f2:	6059      	strne	r1, [r3, #4]
 80082f4:	6863      	ldr	r3, [r4, #4]
 80082f6:	bf08      	it	eq
 80082f8:	f8c8 1000 	streq.w	r1, [r8]
 80082fc:	5162      	str	r2, [r4, r5]
 80082fe:	604b      	str	r3, [r1, #4]
 8008300:	4630      	mov	r0, r6
 8008302:	f000 f82f 	bl	8008364 <__malloc_unlock>
 8008306:	f104 000b 	add.w	r0, r4, #11
 800830a:	1d23      	adds	r3, r4, #4
 800830c:	f020 0007 	bic.w	r0, r0, #7
 8008310:	1ac2      	subs	r2, r0, r3
 8008312:	bf1c      	itt	ne
 8008314:	1a1b      	subne	r3, r3, r0
 8008316:	50a3      	strne	r3, [r4, r2]
 8008318:	e7af      	b.n	800827a <_malloc_r+0x22>
 800831a:	6862      	ldr	r2, [r4, #4]
 800831c:	42a3      	cmp	r3, r4
 800831e:	bf0c      	ite	eq
 8008320:	f8c8 2000 	streq.w	r2, [r8]
 8008324:	605a      	strne	r2, [r3, #4]
 8008326:	e7eb      	b.n	8008300 <_malloc_r+0xa8>
 8008328:	4623      	mov	r3, r4
 800832a:	6864      	ldr	r4, [r4, #4]
 800832c:	e7ae      	b.n	800828c <_malloc_r+0x34>
 800832e:	463c      	mov	r4, r7
 8008330:	687f      	ldr	r7, [r7, #4]
 8008332:	e7b6      	b.n	80082a2 <_malloc_r+0x4a>
 8008334:	461a      	mov	r2, r3
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	42a3      	cmp	r3, r4
 800833a:	d1fb      	bne.n	8008334 <_malloc_r+0xdc>
 800833c:	2300      	movs	r3, #0
 800833e:	6053      	str	r3, [r2, #4]
 8008340:	e7de      	b.n	8008300 <_malloc_r+0xa8>
 8008342:	230c      	movs	r3, #12
 8008344:	6033      	str	r3, [r6, #0]
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f80c 	bl	8008364 <__malloc_unlock>
 800834c:	e794      	b.n	8008278 <_malloc_r+0x20>
 800834e:	6005      	str	r5, [r0, #0]
 8008350:	e7d6      	b.n	8008300 <_malloc_r+0xa8>
 8008352:	bf00      	nop
 8008354:	20000444 	.word	0x20000444

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	@ (8008360 <__malloc_lock+0x8>)
 800835a:	f7ff b88a 	b.w	8007472 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	2000043c 	.word	0x2000043c

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	@ (800836c <__malloc_unlock+0x8>)
 8008366:	f7ff b885 	b.w	8007474 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	2000043c 	.word	0x2000043c

08008370 <_Balloc>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	69c6      	ldr	r6, [r0, #28]
 8008374:	4604      	mov	r4, r0
 8008376:	460d      	mov	r5, r1
 8008378:	b976      	cbnz	r6, 8008398 <_Balloc+0x28>
 800837a:	2010      	movs	r0, #16
 800837c:	f7ff ff42 	bl	8008204 <malloc>
 8008380:	4602      	mov	r2, r0
 8008382:	61e0      	str	r0, [r4, #28]
 8008384:	b920      	cbnz	r0, 8008390 <_Balloc+0x20>
 8008386:	4b18      	ldr	r3, [pc, #96]	@ (80083e8 <_Balloc+0x78>)
 8008388:	4818      	ldr	r0, [pc, #96]	@ (80083ec <_Balloc+0x7c>)
 800838a:	216b      	movs	r1, #107	@ 0x6b
 800838c:	f7ff f87a 	bl	8007484 <__assert_func>
 8008390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008394:	6006      	str	r6, [r0, #0]
 8008396:	60c6      	str	r6, [r0, #12]
 8008398:	69e6      	ldr	r6, [r4, #28]
 800839a:	68f3      	ldr	r3, [r6, #12]
 800839c:	b183      	cbz	r3, 80083c0 <_Balloc+0x50>
 800839e:	69e3      	ldr	r3, [r4, #28]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083a6:	b9b8      	cbnz	r0, 80083d8 <_Balloc+0x68>
 80083a8:	2101      	movs	r1, #1
 80083aa:	fa01 f605 	lsl.w	r6, r1, r5
 80083ae:	1d72      	adds	r2, r6, #5
 80083b0:	0092      	lsls	r2, r2, #2
 80083b2:	4620      	mov	r0, r4
 80083b4:	f001 fd7b 	bl	8009eae <_calloc_r>
 80083b8:	b160      	cbz	r0, 80083d4 <_Balloc+0x64>
 80083ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083be:	e00e      	b.n	80083de <_Balloc+0x6e>
 80083c0:	2221      	movs	r2, #33	@ 0x21
 80083c2:	2104      	movs	r1, #4
 80083c4:	4620      	mov	r0, r4
 80083c6:	f001 fd72 	bl	8009eae <_calloc_r>
 80083ca:	69e3      	ldr	r3, [r4, #28]
 80083cc:	60f0      	str	r0, [r6, #12]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e4      	bne.n	800839e <_Balloc+0x2e>
 80083d4:	2000      	movs	r0, #0
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	6802      	ldr	r2, [r0, #0]
 80083da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083de:	2300      	movs	r3, #0
 80083e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083e4:	e7f7      	b.n	80083d6 <_Balloc+0x66>
 80083e6:	bf00      	nop
 80083e8:	0800abc9 	.word	0x0800abc9
 80083ec:	0800acec 	.word	0x0800acec

080083f0 <_Bfree>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	69c6      	ldr	r6, [r0, #28]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b976      	cbnz	r6, 8008418 <_Bfree+0x28>
 80083fa:	2010      	movs	r0, #16
 80083fc:	f7ff ff02 	bl	8008204 <malloc>
 8008400:	4602      	mov	r2, r0
 8008402:	61e8      	str	r0, [r5, #28]
 8008404:	b920      	cbnz	r0, 8008410 <_Bfree+0x20>
 8008406:	4b09      	ldr	r3, [pc, #36]	@ (800842c <_Bfree+0x3c>)
 8008408:	4809      	ldr	r0, [pc, #36]	@ (8008430 <_Bfree+0x40>)
 800840a:	218f      	movs	r1, #143	@ 0x8f
 800840c:	f7ff f83a 	bl	8007484 <__assert_func>
 8008410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008414:	6006      	str	r6, [r0, #0]
 8008416:	60c6      	str	r6, [r0, #12]
 8008418:	b13c      	cbz	r4, 800842a <_Bfree+0x3a>
 800841a:	69eb      	ldr	r3, [r5, #28]
 800841c:	6862      	ldr	r2, [r4, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008424:	6021      	str	r1, [r4, #0]
 8008426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	0800abc9 	.word	0x0800abc9
 8008430:	0800acec 	.word	0x0800acec

08008434 <__multadd>:
 8008434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008438:	690d      	ldr	r5, [r1, #16]
 800843a:	4607      	mov	r7, r0
 800843c:	460c      	mov	r4, r1
 800843e:	461e      	mov	r6, r3
 8008440:	f101 0c14 	add.w	ip, r1, #20
 8008444:	2000      	movs	r0, #0
 8008446:	f8dc 3000 	ldr.w	r3, [ip]
 800844a:	b299      	uxth	r1, r3
 800844c:	fb02 6101 	mla	r1, r2, r1, r6
 8008450:	0c1e      	lsrs	r6, r3, #16
 8008452:	0c0b      	lsrs	r3, r1, #16
 8008454:	fb02 3306 	mla	r3, r2, r6, r3
 8008458:	b289      	uxth	r1, r1
 800845a:	3001      	adds	r0, #1
 800845c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008460:	4285      	cmp	r5, r0
 8008462:	f84c 1b04 	str.w	r1, [ip], #4
 8008466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800846a:	dcec      	bgt.n	8008446 <__multadd+0x12>
 800846c:	b30e      	cbz	r6, 80084b2 <__multadd+0x7e>
 800846e:	68a3      	ldr	r3, [r4, #8]
 8008470:	42ab      	cmp	r3, r5
 8008472:	dc19      	bgt.n	80084a8 <__multadd+0x74>
 8008474:	6861      	ldr	r1, [r4, #4]
 8008476:	4638      	mov	r0, r7
 8008478:	3101      	adds	r1, #1
 800847a:	f7ff ff79 	bl	8008370 <_Balloc>
 800847e:	4680      	mov	r8, r0
 8008480:	b928      	cbnz	r0, 800848e <__multadd+0x5a>
 8008482:	4602      	mov	r2, r0
 8008484:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <__multadd+0x84>)
 8008486:	480d      	ldr	r0, [pc, #52]	@ (80084bc <__multadd+0x88>)
 8008488:	21ba      	movs	r1, #186	@ 0xba
 800848a:	f7fe fffb 	bl	8007484 <__assert_func>
 800848e:	6922      	ldr	r2, [r4, #16]
 8008490:	3202      	adds	r2, #2
 8008492:	f104 010c 	add.w	r1, r4, #12
 8008496:	0092      	lsls	r2, r2, #2
 8008498:	300c      	adds	r0, #12
 800849a:	f001 fce9 	bl	8009e70 <memcpy>
 800849e:	4621      	mov	r1, r4
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff ffa5 	bl	80083f0 <_Bfree>
 80084a6:	4644      	mov	r4, r8
 80084a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084ac:	3501      	adds	r5, #1
 80084ae:	615e      	str	r6, [r3, #20]
 80084b0:	6125      	str	r5, [r4, #16]
 80084b2:	4620      	mov	r0, r4
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	0800acdb 	.word	0x0800acdb
 80084bc:	0800acec 	.word	0x0800acec

080084c0 <__s2b>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	460c      	mov	r4, r1
 80084c6:	4615      	mov	r5, r2
 80084c8:	461f      	mov	r7, r3
 80084ca:	2209      	movs	r2, #9
 80084cc:	3308      	adds	r3, #8
 80084ce:	4606      	mov	r6, r0
 80084d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d4:	2100      	movs	r1, #0
 80084d6:	2201      	movs	r2, #1
 80084d8:	429a      	cmp	r2, r3
 80084da:	db09      	blt.n	80084f0 <__s2b+0x30>
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff ff47 	bl	8008370 <_Balloc>
 80084e2:	b940      	cbnz	r0, 80084f6 <__s2b+0x36>
 80084e4:	4602      	mov	r2, r0
 80084e6:	4b19      	ldr	r3, [pc, #100]	@ (800854c <__s2b+0x8c>)
 80084e8:	4819      	ldr	r0, [pc, #100]	@ (8008550 <__s2b+0x90>)
 80084ea:	21d3      	movs	r1, #211	@ 0xd3
 80084ec:	f7fe ffca 	bl	8007484 <__assert_func>
 80084f0:	0052      	lsls	r2, r2, #1
 80084f2:	3101      	adds	r1, #1
 80084f4:	e7f0      	b.n	80084d8 <__s2b+0x18>
 80084f6:	9b08      	ldr	r3, [sp, #32]
 80084f8:	6143      	str	r3, [r0, #20]
 80084fa:	2d09      	cmp	r5, #9
 80084fc:	f04f 0301 	mov.w	r3, #1
 8008500:	6103      	str	r3, [r0, #16]
 8008502:	dd16      	ble.n	8008532 <__s2b+0x72>
 8008504:	f104 0909 	add.w	r9, r4, #9
 8008508:	46c8      	mov	r8, r9
 800850a:	442c      	add	r4, r5
 800850c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008510:	4601      	mov	r1, r0
 8008512:	3b30      	subs	r3, #48	@ 0x30
 8008514:	220a      	movs	r2, #10
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff8c 	bl	8008434 <__multadd>
 800851c:	45a0      	cmp	r8, r4
 800851e:	d1f5      	bne.n	800850c <__s2b+0x4c>
 8008520:	f1a5 0408 	sub.w	r4, r5, #8
 8008524:	444c      	add	r4, r9
 8008526:	1b2d      	subs	r5, r5, r4
 8008528:	1963      	adds	r3, r4, r5
 800852a:	42bb      	cmp	r3, r7
 800852c:	db04      	blt.n	8008538 <__s2b+0x78>
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008532:	340a      	adds	r4, #10
 8008534:	2509      	movs	r5, #9
 8008536:	e7f6      	b.n	8008526 <__s2b+0x66>
 8008538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800853c:	4601      	mov	r1, r0
 800853e:	3b30      	subs	r3, #48	@ 0x30
 8008540:	220a      	movs	r2, #10
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff ff76 	bl	8008434 <__multadd>
 8008548:	e7ee      	b.n	8008528 <__s2b+0x68>
 800854a:	bf00      	nop
 800854c:	0800acdb 	.word	0x0800acdb
 8008550:	0800acec 	.word	0x0800acec

08008554 <__hi0bits>:
 8008554:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008558:	4603      	mov	r3, r0
 800855a:	bf36      	itet	cc
 800855c:	0403      	lslcc	r3, r0, #16
 800855e:	2000      	movcs	r0, #0
 8008560:	2010      	movcc	r0, #16
 8008562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008566:	bf3c      	itt	cc
 8008568:	021b      	lslcc	r3, r3, #8
 800856a:	3008      	addcc	r0, #8
 800856c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008570:	bf3c      	itt	cc
 8008572:	011b      	lslcc	r3, r3, #4
 8008574:	3004      	addcc	r0, #4
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857a:	bf3c      	itt	cc
 800857c:	009b      	lslcc	r3, r3, #2
 800857e:	3002      	addcc	r0, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	db05      	blt.n	8008590 <__hi0bits+0x3c>
 8008584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008588:	f100 0001 	add.w	r0, r0, #1
 800858c:	bf08      	it	eq
 800858e:	2020      	moveq	r0, #32
 8008590:	4770      	bx	lr

08008592 <__lo0bits>:
 8008592:	6803      	ldr	r3, [r0, #0]
 8008594:	4602      	mov	r2, r0
 8008596:	f013 0007 	ands.w	r0, r3, #7
 800859a:	d00b      	beq.n	80085b4 <__lo0bits+0x22>
 800859c:	07d9      	lsls	r1, r3, #31
 800859e:	d421      	bmi.n	80085e4 <__lo0bits+0x52>
 80085a0:	0798      	lsls	r0, r3, #30
 80085a2:	bf49      	itett	mi
 80085a4:	085b      	lsrmi	r3, r3, #1
 80085a6:	089b      	lsrpl	r3, r3, #2
 80085a8:	2001      	movmi	r0, #1
 80085aa:	6013      	strmi	r3, [r2, #0]
 80085ac:	bf5c      	itt	pl
 80085ae:	6013      	strpl	r3, [r2, #0]
 80085b0:	2002      	movpl	r0, #2
 80085b2:	4770      	bx	lr
 80085b4:	b299      	uxth	r1, r3
 80085b6:	b909      	cbnz	r1, 80085bc <__lo0bits+0x2a>
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	2010      	movs	r0, #16
 80085bc:	b2d9      	uxtb	r1, r3
 80085be:	b909      	cbnz	r1, 80085c4 <__lo0bits+0x32>
 80085c0:	3008      	adds	r0, #8
 80085c2:	0a1b      	lsrs	r3, r3, #8
 80085c4:	0719      	lsls	r1, r3, #28
 80085c6:	bf04      	itt	eq
 80085c8:	091b      	lsreq	r3, r3, #4
 80085ca:	3004      	addeq	r0, #4
 80085cc:	0799      	lsls	r1, r3, #30
 80085ce:	bf04      	itt	eq
 80085d0:	089b      	lsreq	r3, r3, #2
 80085d2:	3002      	addeq	r0, #2
 80085d4:	07d9      	lsls	r1, r3, #31
 80085d6:	d403      	bmi.n	80085e0 <__lo0bits+0x4e>
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	f100 0001 	add.w	r0, r0, #1
 80085de:	d003      	beq.n	80085e8 <__lo0bits+0x56>
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4770      	bx	lr
 80085e4:	2000      	movs	r0, #0
 80085e6:	4770      	bx	lr
 80085e8:	2020      	movs	r0, #32
 80085ea:	4770      	bx	lr

080085ec <__i2b>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	2101      	movs	r1, #1
 80085f2:	f7ff febd 	bl	8008370 <_Balloc>
 80085f6:	4602      	mov	r2, r0
 80085f8:	b928      	cbnz	r0, 8008606 <__i2b+0x1a>
 80085fa:	4b05      	ldr	r3, [pc, #20]	@ (8008610 <__i2b+0x24>)
 80085fc:	4805      	ldr	r0, [pc, #20]	@ (8008614 <__i2b+0x28>)
 80085fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008602:	f7fe ff3f 	bl	8007484 <__assert_func>
 8008606:	2301      	movs	r3, #1
 8008608:	6144      	str	r4, [r0, #20]
 800860a:	6103      	str	r3, [r0, #16]
 800860c:	bd10      	pop	{r4, pc}
 800860e:	bf00      	nop
 8008610:	0800acdb 	.word	0x0800acdb
 8008614:	0800acec 	.word	0x0800acec

08008618 <__multiply>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4617      	mov	r7, r2
 800861e:	690a      	ldr	r2, [r1, #16]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	bfa8      	it	ge
 8008626:	463b      	movge	r3, r7
 8008628:	4689      	mov	r9, r1
 800862a:	bfa4      	itt	ge
 800862c:	460f      	movge	r7, r1
 800862e:	4699      	movge	r9, r3
 8008630:	693d      	ldr	r5, [r7, #16]
 8008632:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	eb05 060a 	add.w	r6, r5, sl
 800863e:	42b3      	cmp	r3, r6
 8008640:	b085      	sub	sp, #20
 8008642:	bfb8      	it	lt
 8008644:	3101      	addlt	r1, #1
 8008646:	f7ff fe93 	bl	8008370 <_Balloc>
 800864a:	b930      	cbnz	r0, 800865a <__multiply+0x42>
 800864c:	4602      	mov	r2, r0
 800864e:	4b41      	ldr	r3, [pc, #260]	@ (8008754 <__multiply+0x13c>)
 8008650:	4841      	ldr	r0, [pc, #260]	@ (8008758 <__multiply+0x140>)
 8008652:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008656:	f7fe ff15 	bl	8007484 <__assert_func>
 800865a:	f100 0414 	add.w	r4, r0, #20
 800865e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008662:	4623      	mov	r3, r4
 8008664:	2200      	movs	r2, #0
 8008666:	4573      	cmp	r3, lr
 8008668:	d320      	bcc.n	80086ac <__multiply+0x94>
 800866a:	f107 0814 	add.w	r8, r7, #20
 800866e:	f109 0114 	add.w	r1, r9, #20
 8008672:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008676:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	1beb      	subs	r3, r5, r7
 800867e:	3b15      	subs	r3, #21
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	3304      	adds	r3, #4
 8008686:	3715      	adds	r7, #21
 8008688:	42bd      	cmp	r5, r7
 800868a:	bf38      	it	cc
 800868c:	2304      	movcc	r3, #4
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	9b02      	ldr	r3, [sp, #8]
 8008692:	9103      	str	r1, [sp, #12]
 8008694:	428b      	cmp	r3, r1
 8008696:	d80c      	bhi.n	80086b2 <__multiply+0x9a>
 8008698:	2e00      	cmp	r6, #0
 800869a:	dd03      	ble.n	80086a4 <__multiply+0x8c>
 800869c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d055      	beq.n	8008750 <__multiply+0x138>
 80086a4:	6106      	str	r6, [r0, #16]
 80086a6:	b005      	add	sp, #20
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	f843 2b04 	str.w	r2, [r3], #4
 80086b0:	e7d9      	b.n	8008666 <__multiply+0x4e>
 80086b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80086b6:	f1ba 0f00 	cmp.w	sl, #0
 80086ba:	d01f      	beq.n	80086fc <__multiply+0xe4>
 80086bc:	46c4      	mov	ip, r8
 80086be:	46a1      	mov	r9, r4
 80086c0:	2700      	movs	r7, #0
 80086c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086c6:	f8d9 3000 	ldr.w	r3, [r9]
 80086ca:	fa1f fb82 	uxth.w	fp, r2
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80086d4:	443b      	add	r3, r7
 80086d6:	f8d9 7000 	ldr.w	r7, [r9]
 80086da:	0c12      	lsrs	r2, r2, #16
 80086dc:	0c3f      	lsrs	r7, r7, #16
 80086de:	fb0a 7202 	mla	r2, sl, r2, r7
 80086e2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ec:	4565      	cmp	r5, ip
 80086ee:	f849 3b04 	str.w	r3, [r9], #4
 80086f2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086f6:	d8e4      	bhi.n	80086c2 <__multiply+0xaa>
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	50e7      	str	r7, [r4, r3]
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008702:	3104      	adds	r1, #4
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	d020      	beq.n	800874c <__multiply+0x134>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	4647      	mov	r7, r8
 800870e:	46a4      	mov	ip, r4
 8008710:	f04f 0a00 	mov.w	sl, #0
 8008714:	f8b7 b000 	ldrh.w	fp, [r7]
 8008718:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800871c:	fb09 220b 	mla	r2, r9, fp, r2
 8008720:	4452      	add	r2, sl
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008728:	f84c 3b04 	str.w	r3, [ip], #4
 800872c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008730:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008734:	f8bc 3000 	ldrh.w	r3, [ip]
 8008738:	fb09 330a 	mla	r3, r9, sl, r3
 800873c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008740:	42bd      	cmp	r5, r7
 8008742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008746:	d8e5      	bhi.n	8008714 <__multiply+0xfc>
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	50a3      	str	r3, [r4, r2]
 800874c:	3404      	adds	r4, #4
 800874e:	e79f      	b.n	8008690 <__multiply+0x78>
 8008750:	3e01      	subs	r6, #1
 8008752:	e7a1      	b.n	8008698 <__multiply+0x80>
 8008754:	0800acdb 	.word	0x0800acdb
 8008758:	0800acec 	.word	0x0800acec

0800875c <__pow5mult>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	4615      	mov	r5, r2
 8008762:	f012 0203 	ands.w	r2, r2, #3
 8008766:	4607      	mov	r7, r0
 8008768:	460e      	mov	r6, r1
 800876a:	d007      	beq.n	800877c <__pow5mult+0x20>
 800876c:	4c25      	ldr	r4, [pc, #148]	@ (8008804 <__pow5mult+0xa8>)
 800876e:	3a01      	subs	r2, #1
 8008770:	2300      	movs	r3, #0
 8008772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008776:	f7ff fe5d 	bl	8008434 <__multadd>
 800877a:	4606      	mov	r6, r0
 800877c:	10ad      	asrs	r5, r5, #2
 800877e:	d03d      	beq.n	80087fc <__pow5mult+0xa0>
 8008780:	69fc      	ldr	r4, [r7, #28]
 8008782:	b97c      	cbnz	r4, 80087a4 <__pow5mult+0x48>
 8008784:	2010      	movs	r0, #16
 8008786:	f7ff fd3d 	bl	8008204 <malloc>
 800878a:	4602      	mov	r2, r0
 800878c:	61f8      	str	r0, [r7, #28]
 800878e:	b928      	cbnz	r0, 800879c <__pow5mult+0x40>
 8008790:	4b1d      	ldr	r3, [pc, #116]	@ (8008808 <__pow5mult+0xac>)
 8008792:	481e      	ldr	r0, [pc, #120]	@ (800880c <__pow5mult+0xb0>)
 8008794:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008798:	f7fe fe74 	bl	8007484 <__assert_func>
 800879c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087a0:	6004      	str	r4, [r0, #0]
 80087a2:	60c4      	str	r4, [r0, #12]
 80087a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087ac:	b94c      	cbnz	r4, 80087c2 <__pow5mult+0x66>
 80087ae:	f240 2171 	movw	r1, #625	@ 0x271
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7ff ff1a 	bl	80085ec <__i2b>
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80087be:	4604      	mov	r4, r0
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	f04f 0900 	mov.w	r9, #0
 80087c6:	07eb      	lsls	r3, r5, #31
 80087c8:	d50a      	bpl.n	80087e0 <__pow5mult+0x84>
 80087ca:	4631      	mov	r1, r6
 80087cc:	4622      	mov	r2, r4
 80087ce:	4638      	mov	r0, r7
 80087d0:	f7ff ff22 	bl	8008618 <__multiply>
 80087d4:	4631      	mov	r1, r6
 80087d6:	4680      	mov	r8, r0
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff fe09 	bl	80083f0 <_Bfree>
 80087de:	4646      	mov	r6, r8
 80087e0:	106d      	asrs	r5, r5, #1
 80087e2:	d00b      	beq.n	80087fc <__pow5mult+0xa0>
 80087e4:	6820      	ldr	r0, [r4, #0]
 80087e6:	b938      	cbnz	r0, 80087f8 <__pow5mult+0x9c>
 80087e8:	4622      	mov	r2, r4
 80087ea:	4621      	mov	r1, r4
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7ff ff13 	bl	8008618 <__multiply>
 80087f2:	6020      	str	r0, [r4, #0]
 80087f4:	f8c0 9000 	str.w	r9, [r0]
 80087f8:	4604      	mov	r4, r0
 80087fa:	e7e4      	b.n	80087c6 <__pow5mult+0x6a>
 80087fc:	4630      	mov	r0, r6
 80087fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008802:	bf00      	nop
 8008804:	0800adc0 	.word	0x0800adc0
 8008808:	0800abc9 	.word	0x0800abc9
 800880c:	0800acec 	.word	0x0800acec

08008810 <__lshift>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	6849      	ldr	r1, [r1, #4]
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	4607      	mov	r7, r0
 8008822:	4691      	mov	r9, r2
 8008824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008828:	f108 0601 	add.w	r6, r8, #1
 800882c:	42b3      	cmp	r3, r6
 800882e:	db0b      	blt.n	8008848 <__lshift+0x38>
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff fd9d 	bl	8008370 <_Balloc>
 8008836:	4605      	mov	r5, r0
 8008838:	b948      	cbnz	r0, 800884e <__lshift+0x3e>
 800883a:	4602      	mov	r2, r0
 800883c:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <__lshift+0xd0>)
 800883e:	4829      	ldr	r0, [pc, #164]	@ (80088e4 <__lshift+0xd4>)
 8008840:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008844:	f7fe fe1e 	bl	8007484 <__assert_func>
 8008848:	3101      	adds	r1, #1
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	e7ee      	b.n	800882c <__lshift+0x1c>
 800884e:	2300      	movs	r3, #0
 8008850:	f100 0114 	add.w	r1, r0, #20
 8008854:	f100 0210 	add.w	r2, r0, #16
 8008858:	4618      	mov	r0, r3
 800885a:	4553      	cmp	r3, sl
 800885c:	db33      	blt.n	80088c6 <__lshift+0xb6>
 800885e:	6920      	ldr	r0, [r4, #16]
 8008860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008864:	f104 0314 	add.w	r3, r4, #20
 8008868:	f019 091f 	ands.w	r9, r9, #31
 800886c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008870:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008874:	d02b      	beq.n	80088ce <__lshift+0xbe>
 8008876:	f1c9 0e20 	rsb	lr, r9, #32
 800887a:	468a      	mov	sl, r1
 800887c:	2200      	movs	r2, #0
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	fa00 f009 	lsl.w	r0, r0, r9
 8008884:	4310      	orrs	r0, r2
 8008886:	f84a 0b04 	str.w	r0, [sl], #4
 800888a:	f853 2b04 	ldr.w	r2, [r3], #4
 800888e:	459c      	cmp	ip, r3
 8008890:	fa22 f20e 	lsr.w	r2, r2, lr
 8008894:	d8f3      	bhi.n	800887e <__lshift+0x6e>
 8008896:	ebac 0304 	sub.w	r3, ip, r4
 800889a:	3b15      	subs	r3, #21
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	3304      	adds	r3, #4
 80088a2:	f104 0015 	add.w	r0, r4, #21
 80088a6:	4560      	cmp	r0, ip
 80088a8:	bf88      	it	hi
 80088aa:	2304      	movhi	r3, #4
 80088ac:	50ca      	str	r2, [r1, r3]
 80088ae:	b10a      	cbz	r2, 80088b4 <__lshift+0xa4>
 80088b0:	f108 0602 	add.w	r6, r8, #2
 80088b4:	3e01      	subs	r6, #1
 80088b6:	4638      	mov	r0, r7
 80088b8:	612e      	str	r6, [r5, #16]
 80088ba:	4621      	mov	r1, r4
 80088bc:	f7ff fd98 	bl	80083f0 <_Bfree>
 80088c0:	4628      	mov	r0, r5
 80088c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ca:	3301      	adds	r3, #1
 80088cc:	e7c5      	b.n	800885a <__lshift+0x4a>
 80088ce:	3904      	subs	r1, #4
 80088d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80088d8:	459c      	cmp	ip, r3
 80088da:	d8f9      	bhi.n	80088d0 <__lshift+0xc0>
 80088dc:	e7ea      	b.n	80088b4 <__lshift+0xa4>
 80088de:	bf00      	nop
 80088e0:	0800acdb 	.word	0x0800acdb
 80088e4:	0800acec 	.word	0x0800acec

080088e8 <__mcmp>:
 80088e8:	690a      	ldr	r2, [r1, #16]
 80088ea:	4603      	mov	r3, r0
 80088ec:	6900      	ldr	r0, [r0, #16]
 80088ee:	1a80      	subs	r0, r0, r2
 80088f0:	b530      	push	{r4, r5, lr}
 80088f2:	d10e      	bne.n	8008912 <__mcmp+0x2a>
 80088f4:	3314      	adds	r3, #20
 80088f6:	3114      	adds	r1, #20
 80088f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008900:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008904:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008908:	4295      	cmp	r5, r2
 800890a:	d003      	beq.n	8008914 <__mcmp+0x2c>
 800890c:	d205      	bcs.n	800891a <__mcmp+0x32>
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	bd30      	pop	{r4, r5, pc}
 8008914:	42a3      	cmp	r3, r4
 8008916:	d3f3      	bcc.n	8008900 <__mcmp+0x18>
 8008918:	e7fb      	b.n	8008912 <__mcmp+0x2a>
 800891a:	2001      	movs	r0, #1
 800891c:	e7f9      	b.n	8008912 <__mcmp+0x2a>
	...

08008920 <__mdiff>:
 8008920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	4689      	mov	r9, r1
 8008926:	4606      	mov	r6, r0
 8008928:	4611      	mov	r1, r2
 800892a:	4648      	mov	r0, r9
 800892c:	4614      	mov	r4, r2
 800892e:	f7ff ffdb 	bl	80088e8 <__mcmp>
 8008932:	1e05      	subs	r5, r0, #0
 8008934:	d112      	bne.n	800895c <__mdiff+0x3c>
 8008936:	4629      	mov	r1, r5
 8008938:	4630      	mov	r0, r6
 800893a:	f7ff fd19 	bl	8008370 <_Balloc>
 800893e:	4602      	mov	r2, r0
 8008940:	b928      	cbnz	r0, 800894e <__mdiff+0x2e>
 8008942:	4b3f      	ldr	r3, [pc, #252]	@ (8008a40 <__mdiff+0x120>)
 8008944:	f240 2137 	movw	r1, #567	@ 0x237
 8008948:	483e      	ldr	r0, [pc, #248]	@ (8008a44 <__mdiff+0x124>)
 800894a:	f7fe fd9b 	bl	8007484 <__assert_func>
 800894e:	2301      	movs	r3, #1
 8008950:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008954:	4610      	mov	r0, r2
 8008956:	b003      	add	sp, #12
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	bfbc      	itt	lt
 800895e:	464b      	movlt	r3, r9
 8008960:	46a1      	movlt	r9, r4
 8008962:	4630      	mov	r0, r6
 8008964:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008968:	bfba      	itte	lt
 800896a:	461c      	movlt	r4, r3
 800896c:	2501      	movlt	r5, #1
 800896e:	2500      	movge	r5, #0
 8008970:	f7ff fcfe 	bl	8008370 <_Balloc>
 8008974:	4602      	mov	r2, r0
 8008976:	b918      	cbnz	r0, 8008980 <__mdiff+0x60>
 8008978:	4b31      	ldr	r3, [pc, #196]	@ (8008a40 <__mdiff+0x120>)
 800897a:	f240 2145 	movw	r1, #581	@ 0x245
 800897e:	e7e3      	b.n	8008948 <__mdiff+0x28>
 8008980:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008984:	6926      	ldr	r6, [r4, #16]
 8008986:	60c5      	str	r5, [r0, #12]
 8008988:	f109 0310 	add.w	r3, r9, #16
 800898c:	f109 0514 	add.w	r5, r9, #20
 8008990:	f104 0e14 	add.w	lr, r4, #20
 8008994:	f100 0b14 	add.w	fp, r0, #20
 8008998:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800899c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	46d9      	mov	r9, fp
 80089a4:	f04f 0c00 	mov.w	ip, #0
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	fa1f f38a 	uxth.w	r3, sl
 80089b8:	4619      	mov	r1, r3
 80089ba:	b283      	uxth	r3, r0
 80089bc:	1acb      	subs	r3, r1, r3
 80089be:	0c00      	lsrs	r0, r0, #16
 80089c0:	4463      	add	r3, ip
 80089c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089d0:	4576      	cmp	r6, lr
 80089d2:	f849 3b04 	str.w	r3, [r9], #4
 80089d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089da:	d8e5      	bhi.n	80089a8 <__mdiff+0x88>
 80089dc:	1b33      	subs	r3, r6, r4
 80089de:	3b15      	subs	r3, #21
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	3415      	adds	r4, #21
 80089e6:	3304      	adds	r3, #4
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	bf38      	it	cc
 80089ec:	2304      	movcc	r3, #4
 80089ee:	441d      	add	r5, r3
 80089f0:	445b      	add	r3, fp
 80089f2:	461e      	mov	r6, r3
 80089f4:	462c      	mov	r4, r5
 80089f6:	4544      	cmp	r4, r8
 80089f8:	d30e      	bcc.n	8008a18 <__mdiff+0xf8>
 80089fa:	f108 0103 	add.w	r1, r8, #3
 80089fe:	1b49      	subs	r1, r1, r5
 8008a00:	f021 0103 	bic.w	r1, r1, #3
 8008a04:	3d03      	subs	r5, #3
 8008a06:	45a8      	cmp	r8, r5
 8008a08:	bf38      	it	cc
 8008a0a:	2100      	movcc	r1, #0
 8008a0c:	440b      	add	r3, r1
 8008a0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a12:	b191      	cbz	r1, 8008a3a <__mdiff+0x11a>
 8008a14:	6117      	str	r7, [r2, #16]
 8008a16:	e79d      	b.n	8008954 <__mdiff+0x34>
 8008a18:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a1c:	46e6      	mov	lr, ip
 8008a1e:	0c08      	lsrs	r0, r1, #16
 8008a20:	fa1c fc81 	uxtah	ip, ip, r1
 8008a24:	4471      	add	r1, lr
 8008a26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a2a:	b289      	uxth	r1, r1
 8008a2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a30:	f846 1b04 	str.w	r1, [r6], #4
 8008a34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a38:	e7dd      	b.n	80089f6 <__mdiff+0xd6>
 8008a3a:	3f01      	subs	r7, #1
 8008a3c:	e7e7      	b.n	8008a0e <__mdiff+0xee>
 8008a3e:	bf00      	nop
 8008a40:	0800acdb 	.word	0x0800acdb
 8008a44:	0800acec 	.word	0x0800acec

08008a48 <__ulp>:
 8008a48:	b082      	sub	sp, #8
 8008a4a:	ed8d 0b00 	vstr	d0, [sp]
 8008a4e:	9a01      	ldr	r2, [sp, #4]
 8008a50:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <__ulp+0x48>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc08      	bgt.n	8008a6e <__ulp+0x26>
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a66:	da04      	bge.n	8008a72 <__ulp+0x2a>
 8008a68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a6c:	4113      	asrs	r3, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	e008      	b.n	8008a84 <__ulp+0x3c>
 8008a72:	f1a2 0314 	sub.w	r3, r2, #20
 8008a76:	2b1e      	cmp	r3, #30
 8008a78:	bfda      	itte	le
 8008a7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a7e:	40da      	lsrle	r2, r3
 8008a80:	2201      	movgt	r2, #1
 8008a82:	2300      	movs	r3, #0
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	ec41 0b10 	vmov	d0, r0, r1
 8008a8c:	b002      	add	sp, #8
 8008a8e:	4770      	bx	lr
 8008a90:	7ff00000 	.word	0x7ff00000

08008a94 <__b2d>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	6906      	ldr	r6, [r0, #16]
 8008a9a:	f100 0814 	add.w	r8, r0, #20
 8008a9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008aa2:	1f37      	subs	r7, r6, #4
 8008aa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7ff fd53 	bl	8008554 <__hi0bits>
 8008aae:	f1c0 0320 	rsb	r3, r0, #32
 8008ab2:	280a      	cmp	r0, #10
 8008ab4:	600b      	str	r3, [r1, #0]
 8008ab6:	491b      	ldr	r1, [pc, #108]	@ (8008b24 <__b2d+0x90>)
 8008ab8:	dc15      	bgt.n	8008ae6 <__b2d+0x52>
 8008aba:	f1c0 0c0b 	rsb	ip, r0, #11
 8008abe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ac2:	45b8      	cmp	r8, r7
 8008ac4:	ea43 0501 	orr.w	r5, r3, r1
 8008ac8:	bf34      	ite	cc
 8008aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ace:	2300      	movcs	r3, #0
 8008ad0:	3015      	adds	r0, #21
 8008ad2:	fa02 f000 	lsl.w	r0, r2, r0
 8008ad6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008ada:	4303      	orrs	r3, r0
 8008adc:	461c      	mov	r4, r3
 8008ade:	ec45 4b10 	vmov	d0, r4, r5
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	45b8      	cmp	r8, r7
 8008ae8:	bf3a      	itte	cc
 8008aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008aee:	f1a6 0708 	subcc.w	r7, r6, #8
 8008af2:	2300      	movcs	r3, #0
 8008af4:	380b      	subs	r0, #11
 8008af6:	d012      	beq.n	8008b1e <__b2d+0x8a>
 8008af8:	f1c0 0120 	rsb	r1, r0, #32
 8008afc:	fa23 f401 	lsr.w	r4, r3, r1
 8008b00:	4082      	lsls	r2, r0
 8008b02:	4322      	orrs	r2, r4
 8008b04:	4547      	cmp	r7, r8
 8008b06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b0a:	bf8c      	ite	hi
 8008b0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b10:	2200      	movls	r2, #0
 8008b12:	4083      	lsls	r3, r0
 8008b14:	40ca      	lsrs	r2, r1
 8008b16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	e7de      	b.n	8008adc <__b2d+0x48>
 8008b1e:	ea42 0501 	orr.w	r5, r2, r1
 8008b22:	e7db      	b.n	8008adc <__b2d+0x48>
 8008b24:	3ff00000 	.word	0x3ff00000

08008b28 <__d2b>:
 8008b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	2101      	movs	r1, #1
 8008b30:	ec59 8b10 	vmov	r8, r9, d0
 8008b34:	4616      	mov	r6, r2
 8008b36:	f7ff fc1b 	bl	8008370 <_Balloc>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b930      	cbnz	r0, 8008b4c <__d2b+0x24>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b23      	ldr	r3, [pc, #140]	@ (8008bd0 <__d2b+0xa8>)
 8008b42:	4824      	ldr	r0, [pc, #144]	@ (8008bd4 <__d2b+0xac>)
 8008b44:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b48:	f7fe fc9c 	bl	8007484 <__assert_func>
 8008b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b54:	b10d      	cbz	r5, 8008b5a <__d2b+0x32>
 8008b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b60:	d023      	beq.n	8008baa <__d2b+0x82>
 8008b62:	4668      	mov	r0, sp
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	f7ff fd14 	bl	8008592 <__lo0bits>
 8008b6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b6e:	b1d0      	cbz	r0, 8008ba6 <__d2b+0x7e>
 8008b70:	f1c0 0320 	rsb	r3, r0, #32
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	40c2      	lsrs	r2, r0
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	9201      	str	r2, [sp, #4]
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bf0c      	ite	eq
 8008b88:	2201      	moveq	r2, #1
 8008b8a:	2202      	movne	r2, #2
 8008b8c:	6122      	str	r2, [r4, #16]
 8008b8e:	b1a5      	cbz	r5, 8008bba <__d2b+0x92>
 8008b90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b94:	4405      	add	r5, r0
 8008b96:	603d      	str	r5, [r7, #0]
 8008b98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b9c:	6030      	str	r0, [r6, #0]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba6:	6161      	str	r1, [r4, #20]
 8008ba8:	e7ea      	b.n	8008b80 <__d2b+0x58>
 8008baa:	a801      	add	r0, sp, #4
 8008bac:	f7ff fcf1 	bl	8008592 <__lo0bits>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	6163      	str	r3, [r4, #20]
 8008bb4:	3020      	adds	r0, #32
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	e7e8      	b.n	8008b8c <__d2b+0x64>
 8008bba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bc2:	6038      	str	r0, [r7, #0]
 8008bc4:	6918      	ldr	r0, [r3, #16]
 8008bc6:	f7ff fcc5 	bl	8008554 <__hi0bits>
 8008bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bce:	e7e5      	b.n	8008b9c <__d2b+0x74>
 8008bd0:	0800acdb 	.word	0x0800acdb
 8008bd4:	0800acec 	.word	0x0800acec

08008bd8 <__ratio>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	e9cd 1000 	strd	r1, r0, [sp]
 8008be2:	a902      	add	r1, sp, #8
 8008be4:	f7ff ff56 	bl	8008a94 <__b2d>
 8008be8:	9800      	ldr	r0, [sp, #0]
 8008bea:	a903      	add	r1, sp, #12
 8008bec:	ec55 4b10 	vmov	r4, r5, d0
 8008bf0:	f7ff ff50 	bl	8008a94 <__b2d>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	6919      	ldr	r1, [r3, #16]
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	1ac9      	subs	r1, r1, r3
 8008bfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	ec5b ab10 	vmov	sl, fp, d0
 8008c08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfce      	itee	gt
 8008c10:	462a      	movgt	r2, r5
 8008c12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c16:	465a      	movle	r2, fp
 8008c18:	462f      	mov	r7, r5
 8008c1a:	46d9      	mov	r9, fp
 8008c1c:	bfcc      	ite	gt
 8008c1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c26:	464b      	mov	r3, r9
 8008c28:	4652      	mov	r2, sl
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 fe0d 	bl	800084c <__aeabi_ddiv>
 8008c32:	ec41 0b10 	vmov	d0, r0, r1
 8008c36:	b005      	add	sp, #20
 8008c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c3c <__copybits>:
 8008c3c:	3901      	subs	r1, #1
 8008c3e:	b570      	push	{r4, r5, r6, lr}
 8008c40:	1149      	asrs	r1, r1, #5
 8008c42:	6914      	ldr	r4, [r2, #16]
 8008c44:	3101      	adds	r1, #1
 8008c46:	f102 0314 	add.w	r3, r2, #20
 8008c4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c52:	1f05      	subs	r5, r0, #4
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d30c      	bcc.n	8008c72 <__copybits+0x36>
 8008c58:	1aa3      	subs	r3, r4, r2
 8008c5a:	3b11      	subs	r3, #17
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	3211      	adds	r2, #17
 8008c62:	42a2      	cmp	r2, r4
 8008c64:	bf88      	it	hi
 8008c66:	2300      	movhi	r3, #0
 8008c68:	4418      	add	r0, r3
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4288      	cmp	r0, r1
 8008c6e:	d305      	bcc.n	8008c7c <__copybits+0x40>
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c76:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c7a:	e7eb      	b.n	8008c54 <__copybits+0x18>
 8008c7c:	f840 3b04 	str.w	r3, [r0], #4
 8008c80:	e7f4      	b.n	8008c6c <__copybits+0x30>

08008c82 <__any_on>:
 8008c82:	f100 0214 	add.w	r2, r0, #20
 8008c86:	6900      	ldr	r0, [r0, #16]
 8008c88:	114b      	asrs	r3, r1, #5
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	db11      	blt.n	8008cb4 <__any_on+0x32>
 8008c90:	dd0a      	ble.n	8008ca8 <__any_on+0x26>
 8008c92:	f011 011f 	ands.w	r1, r1, #31
 8008c96:	d007      	beq.n	8008ca8 <__any_on+0x26>
 8008c98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c9c:	fa24 f001 	lsr.w	r0, r4, r1
 8008ca0:	fa00 f101 	lsl.w	r1, r0, r1
 8008ca4:	428c      	cmp	r4, r1
 8008ca6:	d10b      	bne.n	8008cc0 <__any_on+0x3e>
 8008ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d803      	bhi.n	8008cb8 <__any_on+0x36>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	e7f7      	b.n	8008ca8 <__any_on+0x26>
 8008cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d0f5      	beq.n	8008cac <__any_on+0x2a>
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	e7f6      	b.n	8008cb2 <__any_on+0x30>

08008cc4 <sulp>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	ec45 4b10 	vmov	d0, r4, r5
 8008cce:	4616      	mov	r6, r2
 8008cd0:	f7ff feba 	bl	8008a48 <__ulp>
 8008cd4:	ec51 0b10 	vmov	r0, r1, d0
 8008cd8:	b17e      	cbz	r6, 8008cfa <sulp+0x36>
 8008cda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dd09      	ble.n	8008cfa <sulp+0x36>
 8008ce6:	051b      	lsls	r3, r3, #20
 8008ce8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008cec:	2400      	movs	r4, #0
 8008cee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	f7f7 fc7f 	bl	80005f8 <__aeabi_dmul>
 8008cfa:	ec41 0b10 	vmov	d0, r0, r1
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}

08008d00 <_strtod_l>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	b09f      	sub	sp, #124	@ 0x7c
 8008d06:	460c      	mov	r4, r1
 8008d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d0e:	9005      	str	r0, [sp, #20]
 8008d10:	f04f 0a00 	mov.w	sl, #0
 8008d14:	f04f 0b00 	mov.w	fp, #0
 8008d18:	460a      	mov	r2, r1
 8008d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d1c:	7811      	ldrb	r1, [r2, #0]
 8008d1e:	292b      	cmp	r1, #43	@ 0x2b
 8008d20:	d04a      	beq.n	8008db8 <_strtod_l+0xb8>
 8008d22:	d838      	bhi.n	8008d96 <_strtod_l+0x96>
 8008d24:	290d      	cmp	r1, #13
 8008d26:	d832      	bhi.n	8008d8e <_strtod_l+0x8e>
 8008d28:	2908      	cmp	r1, #8
 8008d2a:	d832      	bhi.n	8008d92 <_strtod_l+0x92>
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d03b      	beq.n	8008da8 <_strtod_l+0xa8>
 8008d30:	2200      	movs	r2, #0
 8008d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d36:	782a      	ldrb	r2, [r5, #0]
 8008d38:	2a30      	cmp	r2, #48	@ 0x30
 8008d3a:	f040 80b2 	bne.w	8008ea2 <_strtod_l+0x1a2>
 8008d3e:	786a      	ldrb	r2, [r5, #1]
 8008d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d44:	2a58      	cmp	r2, #88	@ 0x58
 8008d46:	d16e      	bne.n	8008e26 <_strtod_l+0x126>
 8008d48:	9302      	str	r3, [sp, #8]
 8008d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	4a8f      	ldr	r2, [pc, #572]	@ (8008f90 <_strtod_l+0x290>)
 8008d54:	9805      	ldr	r0, [sp, #20]
 8008d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d58:	a919      	add	r1, sp, #100	@ 0x64
 8008d5a:	f001 f923 	bl	8009fa4 <__gethex>
 8008d5e:	f010 060f 	ands.w	r6, r0, #15
 8008d62:	4604      	mov	r4, r0
 8008d64:	d005      	beq.n	8008d72 <_strtod_l+0x72>
 8008d66:	2e06      	cmp	r6, #6
 8008d68:	d128      	bne.n	8008dbc <_strtod_l+0xbc>
 8008d6a:	3501      	adds	r5, #1
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f040 858e 	bne.w	8009896 <_strtod_l+0xb96>
 8008d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d7c:	b1cb      	cbz	r3, 8008db2 <_strtod_l+0xb2>
 8008d7e:	4652      	mov	r2, sl
 8008d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008d84:	ec43 2b10 	vmov	d0, r2, r3
 8008d88:	b01f      	add	sp, #124	@ 0x7c
 8008d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8e:	2920      	cmp	r1, #32
 8008d90:	d1ce      	bne.n	8008d30 <_strtod_l+0x30>
 8008d92:	3201      	adds	r2, #1
 8008d94:	e7c1      	b.n	8008d1a <_strtod_l+0x1a>
 8008d96:	292d      	cmp	r1, #45	@ 0x2d
 8008d98:	d1ca      	bne.n	8008d30 <_strtod_l+0x30>
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008d9e:	1c51      	adds	r1, r2, #1
 8008da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008da2:	7852      	ldrb	r2, [r2, #1]
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	d1c5      	bne.n	8008d34 <_strtod_l+0x34>
 8008da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 8570 	bne.w	8009892 <_strtod_l+0xb92>
 8008db2:	4652      	mov	r2, sl
 8008db4:	465b      	mov	r3, fp
 8008db6:	e7e5      	b.n	8008d84 <_strtod_l+0x84>
 8008db8:	2100      	movs	r1, #0
 8008dba:	e7ef      	b.n	8008d9c <_strtod_l+0x9c>
 8008dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dbe:	b13a      	cbz	r2, 8008dd0 <_strtod_l+0xd0>
 8008dc0:	2135      	movs	r1, #53	@ 0x35
 8008dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8008dc4:	f7ff ff3a 	bl	8008c3c <__copybits>
 8008dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dca:	9805      	ldr	r0, [sp, #20]
 8008dcc:	f7ff fb10 	bl	80083f0 <_Bfree>
 8008dd0:	3e01      	subs	r6, #1
 8008dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008dd4:	2e04      	cmp	r6, #4
 8008dd6:	d806      	bhi.n	8008de6 <_strtod_l+0xe6>
 8008dd8:	e8df f006 	tbb	[pc, r6]
 8008ddc:	201d0314 	.word	0x201d0314
 8008de0:	14          	.byte	0x14
 8008de1:	00          	.byte	0x00
 8008de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008de6:	05e1      	lsls	r1, r4, #23
 8008de8:	bf48      	it	mi
 8008dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008df2:	0d1b      	lsrs	r3, r3, #20
 8008df4:	051b      	lsls	r3, r3, #20
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1bb      	bne.n	8008d72 <_strtod_l+0x72>
 8008dfa:	f7fe fb0f 	bl	800741c <__errno>
 8008dfe:	2322      	movs	r3, #34	@ 0x22
 8008e00:	6003      	str	r3, [r0, #0]
 8008e02:	e7b6      	b.n	8008d72 <_strtod_l+0x72>
 8008e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e14:	e7e7      	b.n	8008de6 <_strtod_l+0xe6>
 8008e16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008f98 <_strtod_l+0x298>
 8008e1a:	e7e4      	b.n	8008de6 <_strtod_l+0xe6>
 8008e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e20:	f04f 3aff 	mov.w	sl, #4294967295
 8008e24:	e7df      	b.n	8008de6 <_strtod_l+0xe6>
 8008e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b30      	cmp	r3, #48	@ 0x30
 8008e30:	d0f9      	beq.n	8008e26 <_strtod_l+0x126>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d09d      	beq.n	8008d72 <_strtod_l+0x72>
 8008e36:	2301      	movs	r3, #1
 8008e38:	2700      	movs	r7, #0
 8008e3a:	9308      	str	r3, [sp, #32]
 8008e3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e40:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008e42:	46b9      	mov	r9, r7
 8008e44:	220a      	movs	r2, #10
 8008e46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e48:	7805      	ldrb	r5, [r0, #0]
 8008e4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e4e:	b2d9      	uxtb	r1, r3
 8008e50:	2909      	cmp	r1, #9
 8008e52:	d928      	bls.n	8008ea6 <_strtod_l+0x1a6>
 8008e54:	494f      	ldr	r1, [pc, #316]	@ (8008f94 <_strtod_l+0x294>)
 8008e56:	2201      	movs	r2, #1
 8008e58:	f000 ffe8 	bl	8009e2c <strncmp>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d032      	beq.n	8008ec6 <_strtod_l+0x1c6>
 8008e60:	2000      	movs	r0, #0
 8008e62:	462a      	mov	r2, r5
 8008e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e66:	464d      	mov	r5, r9
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2a65      	cmp	r2, #101	@ 0x65
 8008e6c:	d001      	beq.n	8008e72 <_strtod_l+0x172>
 8008e6e:	2a45      	cmp	r2, #69	@ 0x45
 8008e70:	d114      	bne.n	8008e9c <_strtod_l+0x19c>
 8008e72:	b91d      	cbnz	r5, 8008e7c <_strtod_l+0x17c>
 8008e74:	9a08      	ldr	r2, [sp, #32]
 8008e76:	4302      	orrs	r2, r0
 8008e78:	d096      	beq.n	8008da8 <_strtod_l+0xa8>
 8008e7a:	2500      	movs	r5, #0
 8008e7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008e7e:	1c62      	adds	r2, r4, #1
 8008e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e82:	7862      	ldrb	r2, [r4, #1]
 8008e84:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e86:	d07a      	beq.n	8008f7e <_strtod_l+0x27e>
 8008e88:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e8a:	d07e      	beq.n	8008f8a <_strtod_l+0x28a>
 8008e8c:	f04f 0c00 	mov.w	ip, #0
 8008e90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e94:	2909      	cmp	r1, #9
 8008e96:	f240 8085 	bls.w	8008fa4 <_strtod_l+0x2a4>
 8008e9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	e0a5      	b.n	8008fee <_strtod_l+0x2ee>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e7c8      	b.n	8008e38 <_strtod_l+0x138>
 8008ea6:	f1b9 0f08 	cmp.w	r9, #8
 8008eaa:	bfd8      	it	le
 8008eac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008eae:	f100 0001 	add.w	r0, r0, #1
 8008eb2:	bfda      	itte	le
 8008eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eb8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008eba:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008ebe:	f109 0901 	add.w	r9, r9, #1
 8008ec2:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ec4:	e7bf      	b.n	8008e46 <_strtod_l+0x146>
 8008ec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ecc:	785a      	ldrb	r2, [r3, #1]
 8008ece:	f1b9 0f00 	cmp.w	r9, #0
 8008ed2:	d03b      	beq.n	8008f4c <_strtod_l+0x24c>
 8008ed4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ed6:	464d      	mov	r5, r9
 8008ed8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008edc:	2b09      	cmp	r3, #9
 8008ede:	d912      	bls.n	8008f06 <_strtod_l+0x206>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7c2      	b.n	8008e6a <_strtod_l+0x16a>
 8008ee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eea:	785a      	ldrb	r2, [r3, #1]
 8008eec:	3001      	adds	r0, #1
 8008eee:	2a30      	cmp	r2, #48	@ 0x30
 8008ef0:	d0f8      	beq.n	8008ee4 <_strtod_l+0x1e4>
 8008ef2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	f200 84d2 	bhi.w	80098a0 <_strtod_l+0xba0>
 8008efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008efe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f00:	2000      	movs	r0, #0
 8008f02:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f04:	4605      	mov	r5, r0
 8008f06:	3a30      	subs	r2, #48	@ 0x30
 8008f08:	f100 0301 	add.w	r3, r0, #1
 8008f0c:	d018      	beq.n	8008f40 <_strtod_l+0x240>
 8008f0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f10:	4419      	add	r1, r3
 8008f12:	910a      	str	r1, [sp, #40]	@ 0x28
 8008f14:	462e      	mov	r6, r5
 8008f16:	f04f 0e0a 	mov.w	lr, #10
 8008f1a:	1c71      	adds	r1, r6, #1
 8008f1c:	eba1 0c05 	sub.w	ip, r1, r5
 8008f20:	4563      	cmp	r3, ip
 8008f22:	dc15      	bgt.n	8008f50 <_strtod_l+0x250>
 8008f24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008f28:	182b      	adds	r3, r5, r0
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	f105 0501 	add.w	r5, r5, #1
 8008f30:	4405      	add	r5, r0
 8008f32:	dc1a      	bgt.n	8008f6a <_strtod_l+0x26a>
 8008f34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f36:	230a      	movs	r3, #10
 8008f38:	fb03 2301 	mla	r3, r3, r1, r2
 8008f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f42:	1c51      	adds	r1, r2, #1
 8008f44:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f46:	7852      	ldrb	r2, [r2, #1]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	e7c5      	b.n	8008ed8 <_strtod_l+0x1d8>
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	e7ce      	b.n	8008eee <_strtod_l+0x1ee>
 8008f50:	2e08      	cmp	r6, #8
 8008f52:	dc05      	bgt.n	8008f60 <_strtod_l+0x260>
 8008f54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008f56:	fb0e f606 	mul.w	r6, lr, r6
 8008f5a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008f5c:	460e      	mov	r6, r1
 8008f5e:	e7dc      	b.n	8008f1a <_strtod_l+0x21a>
 8008f60:	2910      	cmp	r1, #16
 8008f62:	bfd8      	it	le
 8008f64:	fb0e f707 	mulle.w	r7, lr, r7
 8008f68:	e7f8      	b.n	8008f5c <_strtod_l+0x25c>
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	bfdc      	itt	le
 8008f6e:	230a      	movle	r3, #10
 8008f70:	fb03 2707 	mlale	r7, r3, r7, r2
 8008f74:	e7e3      	b.n	8008f3e <_strtod_l+0x23e>
 8008f76:	2300      	movs	r3, #0
 8008f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e77a      	b.n	8008e74 <_strtod_l+0x174>
 8008f7e:	f04f 0c00 	mov.w	ip, #0
 8008f82:	1ca2      	adds	r2, r4, #2
 8008f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f86:	78a2      	ldrb	r2, [r4, #2]
 8008f88:	e782      	b.n	8008e90 <_strtod_l+0x190>
 8008f8a:	f04f 0c01 	mov.w	ip, #1
 8008f8e:	e7f8      	b.n	8008f82 <_strtod_l+0x282>
 8008f90:	0800aed4 	.word	0x0800aed4
 8008f94:	0800ad45 	.word	0x0800ad45
 8008f98:	7ff00000 	.word	0x7ff00000
 8008f9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fa2:	7852      	ldrb	r2, [r2, #1]
 8008fa4:	2a30      	cmp	r2, #48	@ 0x30
 8008fa6:	d0f9      	beq.n	8008f9c <_strtod_l+0x29c>
 8008fa8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fac:	2908      	cmp	r1, #8
 8008fae:	f63f af75 	bhi.w	8008e9c <_strtod_l+0x19c>
 8008fb2:	3a30      	subs	r2, #48	@ 0x30
 8008fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fb8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008fba:	f04f 080a 	mov.w	r8, #10
 8008fbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fc0:	1c56      	adds	r6, r2, #1
 8008fc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008fc4:	7852      	ldrb	r2, [r2, #1]
 8008fc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008fca:	f1be 0f09 	cmp.w	lr, #9
 8008fce:	d939      	bls.n	8009044 <_strtod_l+0x344>
 8008fd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008fd2:	1a76      	subs	r6, r6, r1
 8008fd4:	2e08      	cmp	r6, #8
 8008fd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008fda:	dc03      	bgt.n	8008fe4 <_strtod_l+0x2e4>
 8008fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fde:	4588      	cmp	r8, r1
 8008fe0:	bfa8      	it	ge
 8008fe2:	4688      	movge	r8, r1
 8008fe4:	f1bc 0f00 	cmp.w	ip, #0
 8008fe8:	d001      	beq.n	8008fee <_strtod_l+0x2ee>
 8008fea:	f1c8 0800 	rsb	r8, r8, #0
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	d14e      	bne.n	8009090 <_strtod_l+0x390>
 8008ff2:	9908      	ldr	r1, [sp, #32]
 8008ff4:	4308      	orrs	r0, r1
 8008ff6:	f47f aebc 	bne.w	8008d72 <_strtod_l+0x72>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f47f aed4 	bne.w	8008da8 <_strtod_l+0xa8>
 8009000:	2a69      	cmp	r2, #105	@ 0x69
 8009002:	d028      	beq.n	8009056 <_strtod_l+0x356>
 8009004:	dc25      	bgt.n	8009052 <_strtod_l+0x352>
 8009006:	2a49      	cmp	r2, #73	@ 0x49
 8009008:	d025      	beq.n	8009056 <_strtod_l+0x356>
 800900a:	2a4e      	cmp	r2, #78	@ 0x4e
 800900c:	f47f aecc 	bne.w	8008da8 <_strtod_l+0xa8>
 8009010:	499a      	ldr	r1, [pc, #616]	@ (800927c <_strtod_l+0x57c>)
 8009012:	a819      	add	r0, sp, #100	@ 0x64
 8009014:	f001 f9e8 	bl	800a3e8 <__match>
 8009018:	2800      	cmp	r0, #0
 800901a:	f43f aec5 	beq.w	8008da8 <_strtod_l+0xa8>
 800901e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b28      	cmp	r3, #40	@ 0x28
 8009024:	d12e      	bne.n	8009084 <_strtod_l+0x384>
 8009026:	4996      	ldr	r1, [pc, #600]	@ (8009280 <_strtod_l+0x580>)
 8009028:	aa1c      	add	r2, sp, #112	@ 0x70
 800902a:	a819      	add	r0, sp, #100	@ 0x64
 800902c:	f001 f9f0 	bl	800a410 <__hexnan>
 8009030:	2805      	cmp	r0, #5
 8009032:	d127      	bne.n	8009084 <_strtod_l+0x384>
 8009034:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009036:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800903a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800903e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009042:	e696      	b.n	8008d72 <_strtod_l+0x72>
 8009044:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009046:	fb08 2101 	mla	r1, r8, r1, r2
 800904a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800904e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009050:	e7b5      	b.n	8008fbe <_strtod_l+0x2be>
 8009052:	2a6e      	cmp	r2, #110	@ 0x6e
 8009054:	e7da      	b.n	800900c <_strtod_l+0x30c>
 8009056:	498b      	ldr	r1, [pc, #556]	@ (8009284 <_strtod_l+0x584>)
 8009058:	a819      	add	r0, sp, #100	@ 0x64
 800905a:	f001 f9c5 	bl	800a3e8 <__match>
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f aea2 	beq.w	8008da8 <_strtod_l+0xa8>
 8009064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009066:	4988      	ldr	r1, [pc, #544]	@ (8009288 <_strtod_l+0x588>)
 8009068:	3b01      	subs	r3, #1
 800906a:	a819      	add	r0, sp, #100	@ 0x64
 800906c:	9319      	str	r3, [sp, #100]	@ 0x64
 800906e:	f001 f9bb 	bl	800a3e8 <__match>
 8009072:	b910      	cbnz	r0, 800907a <_strtod_l+0x37a>
 8009074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009076:	3301      	adds	r3, #1
 8009078:	9319      	str	r3, [sp, #100]	@ 0x64
 800907a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009298 <_strtod_l+0x598>
 800907e:	f04f 0a00 	mov.w	sl, #0
 8009082:	e676      	b.n	8008d72 <_strtod_l+0x72>
 8009084:	4881      	ldr	r0, [pc, #516]	@ (800928c <_strtod_l+0x58c>)
 8009086:	f000 ff03 	bl	8009e90 <nan>
 800908a:	ec5b ab10 	vmov	sl, fp, d0
 800908e:	e670      	b.n	8008d72 <_strtod_l+0x72>
 8009090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009092:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009094:	eba8 0303 	sub.w	r3, r8, r3
 8009098:	f1b9 0f00 	cmp.w	r9, #0
 800909c:	bf08      	it	eq
 800909e:	46a9      	moveq	r9, r5
 80090a0:	2d10      	cmp	r5, #16
 80090a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a4:	462c      	mov	r4, r5
 80090a6:	bfa8      	it	ge
 80090a8:	2410      	movge	r4, #16
 80090aa:	f7f7 fa2b 	bl	8000504 <__aeabi_ui2d>
 80090ae:	2d09      	cmp	r5, #9
 80090b0:	4682      	mov	sl, r0
 80090b2:	468b      	mov	fp, r1
 80090b4:	dc13      	bgt.n	80090de <_strtod_l+0x3de>
 80090b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f43f ae5a 	beq.w	8008d72 <_strtod_l+0x72>
 80090be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c0:	dd78      	ble.n	80091b4 <_strtod_l+0x4b4>
 80090c2:	2b16      	cmp	r3, #22
 80090c4:	dc5f      	bgt.n	8009186 <_strtod_l+0x486>
 80090c6:	4972      	ldr	r1, [pc, #456]	@ (8009290 <_strtod_l+0x590>)
 80090c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d0:	4652      	mov	r2, sl
 80090d2:	465b      	mov	r3, fp
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	4682      	mov	sl, r0
 80090da:	468b      	mov	fp, r1
 80090dc:	e649      	b.n	8008d72 <_strtod_l+0x72>
 80090de:	4b6c      	ldr	r3, [pc, #432]	@ (8009290 <_strtod_l+0x590>)
 80090e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80090e8:	f7f7 fa86 	bl	80005f8 <__aeabi_dmul>
 80090ec:	4682      	mov	sl, r0
 80090ee:	4638      	mov	r0, r7
 80090f0:	468b      	mov	fp, r1
 80090f2:	f7f7 fa07 	bl	8000504 <__aeabi_ui2d>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4650      	mov	r0, sl
 80090fc:	4659      	mov	r1, fp
 80090fe:	f7f7 f8c5 	bl	800028c <__adddf3>
 8009102:	2d0f      	cmp	r5, #15
 8009104:	4682      	mov	sl, r0
 8009106:	468b      	mov	fp, r1
 8009108:	ddd5      	ble.n	80090b6 <_strtod_l+0x3b6>
 800910a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910c:	1b2c      	subs	r4, r5, r4
 800910e:	441c      	add	r4, r3
 8009110:	2c00      	cmp	r4, #0
 8009112:	f340 8093 	ble.w	800923c <_strtod_l+0x53c>
 8009116:	f014 030f 	ands.w	r3, r4, #15
 800911a:	d00a      	beq.n	8009132 <_strtod_l+0x432>
 800911c:	495c      	ldr	r1, [pc, #368]	@ (8009290 <_strtod_l+0x590>)
 800911e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009122:	4652      	mov	r2, sl
 8009124:	465b      	mov	r3, fp
 8009126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800912a:	f7f7 fa65 	bl	80005f8 <__aeabi_dmul>
 800912e:	4682      	mov	sl, r0
 8009130:	468b      	mov	fp, r1
 8009132:	f034 040f 	bics.w	r4, r4, #15
 8009136:	d073      	beq.n	8009220 <_strtod_l+0x520>
 8009138:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800913c:	dd49      	ble.n	80091d2 <_strtod_l+0x4d2>
 800913e:	2400      	movs	r4, #0
 8009140:	46a0      	mov	r8, r4
 8009142:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009144:	46a1      	mov	r9, r4
 8009146:	9a05      	ldr	r2, [sp, #20]
 8009148:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009298 <_strtod_l+0x598>
 800914c:	2322      	movs	r3, #34	@ 0x22
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009156:	2b00      	cmp	r3, #0
 8009158:	f43f ae0b 	beq.w	8008d72 <_strtod_l+0x72>
 800915c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800915e:	9805      	ldr	r0, [sp, #20]
 8009160:	f7ff f946 	bl	80083f0 <_Bfree>
 8009164:	9805      	ldr	r0, [sp, #20]
 8009166:	4649      	mov	r1, r9
 8009168:	f7ff f942 	bl	80083f0 <_Bfree>
 800916c:	9805      	ldr	r0, [sp, #20]
 800916e:	4641      	mov	r1, r8
 8009170:	f7ff f93e 	bl	80083f0 <_Bfree>
 8009174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009176:	9805      	ldr	r0, [sp, #20]
 8009178:	f7ff f93a 	bl	80083f0 <_Bfree>
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	4621      	mov	r1, r4
 8009180:	f7ff f936 	bl	80083f0 <_Bfree>
 8009184:	e5f5      	b.n	8008d72 <_strtod_l+0x72>
 8009186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009188:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800918c:	4293      	cmp	r3, r2
 800918e:	dbbc      	blt.n	800910a <_strtod_l+0x40a>
 8009190:	4c3f      	ldr	r4, [pc, #252]	@ (8009290 <_strtod_l+0x590>)
 8009192:	f1c5 050f 	rsb	r5, r5, #15
 8009196:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800919a:	4652      	mov	r2, sl
 800919c:	465b      	mov	r3, fp
 800919e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a8:	1b5d      	subs	r5, r3, r5
 80091aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091b2:	e78f      	b.n	80090d4 <_strtod_l+0x3d4>
 80091b4:	3316      	adds	r3, #22
 80091b6:	dba8      	blt.n	800910a <_strtod_l+0x40a>
 80091b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ba:	eba3 0808 	sub.w	r8, r3, r8
 80091be:	4b34      	ldr	r3, [pc, #208]	@ (8009290 <_strtod_l+0x590>)
 80091c0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	f7f7 fb3e 	bl	800084c <__aeabi_ddiv>
 80091d0:	e782      	b.n	80090d8 <_strtod_l+0x3d8>
 80091d2:	2300      	movs	r3, #0
 80091d4:	4f2f      	ldr	r7, [pc, #188]	@ (8009294 <_strtod_l+0x594>)
 80091d6:	1124      	asrs	r4, r4, #4
 80091d8:	4650      	mov	r0, sl
 80091da:	4659      	mov	r1, fp
 80091dc:	461e      	mov	r6, r3
 80091de:	2c01      	cmp	r4, #1
 80091e0:	dc21      	bgt.n	8009226 <_strtod_l+0x526>
 80091e2:	b10b      	cbz	r3, 80091e8 <_strtod_l+0x4e8>
 80091e4:	4682      	mov	sl, r0
 80091e6:	468b      	mov	fp, r1
 80091e8:	492a      	ldr	r1, [pc, #168]	@ (8009294 <_strtod_l+0x594>)
 80091ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80091ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80091f2:	4652      	mov	r2, sl
 80091f4:	465b      	mov	r3, fp
 80091f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	4b26      	ldr	r3, [pc, #152]	@ (8009298 <_strtod_l+0x598>)
 8009200:	460a      	mov	r2, r1
 8009202:	400b      	ands	r3, r1
 8009204:	4925      	ldr	r1, [pc, #148]	@ (800929c <_strtod_l+0x59c>)
 8009206:	428b      	cmp	r3, r1
 8009208:	4682      	mov	sl, r0
 800920a:	d898      	bhi.n	800913e <_strtod_l+0x43e>
 800920c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009210:	428b      	cmp	r3, r1
 8009212:	bf86      	itte	hi
 8009214:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80092a0 <_strtod_l+0x5a0>
 8009218:	f04f 3aff 	movhi.w	sl, #4294967295
 800921c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009220:	2300      	movs	r3, #0
 8009222:	9308      	str	r3, [sp, #32]
 8009224:	e076      	b.n	8009314 <_strtod_l+0x614>
 8009226:	07e2      	lsls	r2, r4, #31
 8009228:	d504      	bpl.n	8009234 <_strtod_l+0x534>
 800922a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	2301      	movs	r3, #1
 8009234:	3601      	adds	r6, #1
 8009236:	1064      	asrs	r4, r4, #1
 8009238:	3708      	adds	r7, #8
 800923a:	e7d0      	b.n	80091de <_strtod_l+0x4de>
 800923c:	d0f0      	beq.n	8009220 <_strtod_l+0x520>
 800923e:	4264      	negs	r4, r4
 8009240:	f014 020f 	ands.w	r2, r4, #15
 8009244:	d00a      	beq.n	800925c <_strtod_l+0x55c>
 8009246:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <_strtod_l+0x590>)
 8009248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924c:	4650      	mov	r0, sl
 800924e:	4659      	mov	r1, fp
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 fafa 	bl	800084c <__aeabi_ddiv>
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	1124      	asrs	r4, r4, #4
 800925e:	d0df      	beq.n	8009220 <_strtod_l+0x520>
 8009260:	2c1f      	cmp	r4, #31
 8009262:	dd1f      	ble.n	80092a4 <_strtod_l+0x5a4>
 8009264:	2400      	movs	r4, #0
 8009266:	46a0      	mov	r8, r4
 8009268:	940b      	str	r4, [sp, #44]	@ 0x2c
 800926a:	46a1      	mov	r9, r4
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	2322      	movs	r3, #34	@ 0x22
 8009270:	f04f 0a00 	mov.w	sl, #0
 8009274:	f04f 0b00 	mov.w	fp, #0
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	e76b      	b.n	8009154 <_strtod_l+0x454>
 800927c:	0800ab9d 	.word	0x0800ab9d
 8009280:	0800aec0 	.word	0x0800aec0
 8009284:	0800ab95 	.word	0x0800ab95
 8009288:	0800ac79 	.word	0x0800ac79
 800928c:	0800ac75 	.word	0x0800ac75
 8009290:	0800adf8 	.word	0x0800adf8
 8009294:	0800add0 	.word	0x0800add0
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	7ca00000 	.word	0x7ca00000
 80092a0:	7fefffff 	.word	0x7fefffff
 80092a4:	f014 0310 	ands.w	r3, r4, #16
 80092a8:	bf18      	it	ne
 80092aa:	236a      	movne	r3, #106	@ 0x6a
 80092ac:	4ea9      	ldr	r6, [pc, #676]	@ (8009554 <_strtod_l+0x854>)
 80092ae:	9308      	str	r3, [sp, #32]
 80092b0:	4650      	mov	r0, sl
 80092b2:	4659      	mov	r1, fp
 80092b4:	2300      	movs	r3, #0
 80092b6:	07e7      	lsls	r7, r4, #31
 80092b8:	d504      	bpl.n	80092c4 <_strtod_l+0x5c4>
 80092ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	2301      	movs	r3, #1
 80092c4:	1064      	asrs	r4, r4, #1
 80092c6:	f106 0608 	add.w	r6, r6, #8
 80092ca:	d1f4      	bne.n	80092b6 <_strtod_l+0x5b6>
 80092cc:	b10b      	cbz	r3, 80092d2 <_strtod_l+0x5d2>
 80092ce:	4682      	mov	sl, r0
 80092d0:	468b      	mov	fp, r1
 80092d2:	9b08      	ldr	r3, [sp, #32]
 80092d4:	b1b3      	cbz	r3, 8009304 <_strtod_l+0x604>
 80092d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80092de:	2b00      	cmp	r3, #0
 80092e0:	4659      	mov	r1, fp
 80092e2:	dd0f      	ble.n	8009304 <_strtod_l+0x604>
 80092e4:	2b1f      	cmp	r3, #31
 80092e6:	dd56      	ble.n	8009396 <_strtod_l+0x696>
 80092e8:	2b34      	cmp	r3, #52	@ 0x34
 80092ea:	bfde      	ittt	le
 80092ec:	f04f 33ff 	movle.w	r3, #4294967295
 80092f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80092f4:	4093      	lslle	r3, r2
 80092f6:	f04f 0a00 	mov.w	sl, #0
 80092fa:	bfcc      	ite	gt
 80092fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009300:	ea03 0b01 	andle.w	fp, r3, r1
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	f7f7 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009310:	2800      	cmp	r0, #0
 8009312:	d1a7      	bne.n	8009264 <_strtod_l+0x564>
 8009314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800931a:	9805      	ldr	r0, [sp, #20]
 800931c:	462b      	mov	r3, r5
 800931e:	464a      	mov	r2, r9
 8009320:	f7ff f8ce 	bl	80084c0 <__s2b>
 8009324:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009326:	2800      	cmp	r0, #0
 8009328:	f43f af09 	beq.w	800913e <_strtod_l+0x43e>
 800932c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009330:	2a00      	cmp	r2, #0
 8009332:	eba3 0308 	sub.w	r3, r3, r8
 8009336:	bfa8      	it	ge
 8009338:	2300      	movge	r3, #0
 800933a:	9312      	str	r3, [sp, #72]	@ 0x48
 800933c:	2400      	movs	r4, #0
 800933e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009342:	9316      	str	r3, [sp, #88]	@ 0x58
 8009344:	46a0      	mov	r8, r4
 8009346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009348:	9805      	ldr	r0, [sp, #20]
 800934a:	6859      	ldr	r1, [r3, #4]
 800934c:	f7ff f810 	bl	8008370 <_Balloc>
 8009350:	4681      	mov	r9, r0
 8009352:	2800      	cmp	r0, #0
 8009354:	f43f aef7 	beq.w	8009146 <_strtod_l+0x446>
 8009358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	3202      	adds	r2, #2
 800935e:	f103 010c 	add.w	r1, r3, #12
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	300c      	adds	r0, #12
 8009366:	f000 fd83 	bl	8009e70 <memcpy>
 800936a:	ec4b ab10 	vmov	d0, sl, fp
 800936e:	9805      	ldr	r0, [sp, #20]
 8009370:	aa1c      	add	r2, sp, #112	@ 0x70
 8009372:	a91b      	add	r1, sp, #108	@ 0x6c
 8009374:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009378:	f7ff fbd6 	bl	8008b28 <__d2b>
 800937c:	901a      	str	r0, [sp, #104]	@ 0x68
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f aee1 	beq.w	8009146 <_strtod_l+0x446>
 8009384:	9805      	ldr	r0, [sp, #20]
 8009386:	2101      	movs	r1, #1
 8009388:	f7ff f930 	bl	80085ec <__i2b>
 800938c:	4680      	mov	r8, r0
 800938e:	b948      	cbnz	r0, 80093a4 <_strtod_l+0x6a4>
 8009390:	f04f 0800 	mov.w	r8, #0
 8009394:	e6d7      	b.n	8009146 <_strtod_l+0x446>
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	ea03 0a0a 	and.w	sl, r3, sl
 80093a2:	e7af      	b.n	8009304 <_strtod_l+0x604>
 80093a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	bfab      	itete	ge
 80093ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093b4:	bfac      	ite	ge
 80093b6:	18ef      	addge	r7, r5, r3
 80093b8:	1b5e      	sublt	r6, r3, r5
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	1aed      	subs	r5, r5, r3
 80093be:	4415      	add	r5, r2
 80093c0:	4b65      	ldr	r3, [pc, #404]	@ (8009558 <_strtod_l+0x858>)
 80093c2:	3d01      	subs	r5, #1
 80093c4:	429d      	cmp	r5, r3
 80093c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80093ca:	da50      	bge.n	800946e <_strtod_l+0x76e>
 80093cc:	1b5b      	subs	r3, r3, r5
 80093ce:	2b1f      	cmp	r3, #31
 80093d0:	eba2 0203 	sub.w	r2, r2, r3
 80093d4:	f04f 0101 	mov.w	r1, #1
 80093d8:	dc3d      	bgt.n	8009456 <_strtod_l+0x756>
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093e0:	2300      	movs	r3, #0
 80093e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80093e4:	18bd      	adds	r5, r7, r2
 80093e6:	9b08      	ldr	r3, [sp, #32]
 80093e8:	42af      	cmp	r7, r5
 80093ea:	4416      	add	r6, r2
 80093ec:	441e      	add	r6, r3
 80093ee:	463b      	mov	r3, r7
 80093f0:	bfa8      	it	ge
 80093f2:	462b      	movge	r3, r5
 80093f4:	42b3      	cmp	r3, r6
 80093f6:	bfa8      	it	ge
 80093f8:	4633      	movge	r3, r6
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfc2      	ittt	gt
 80093fe:	1aed      	subgt	r5, r5, r3
 8009400:	1af6      	subgt	r6, r6, r3
 8009402:	1aff      	subgt	r7, r7, r3
 8009404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009406:	2b00      	cmp	r3, #0
 8009408:	dd16      	ble.n	8009438 <_strtod_l+0x738>
 800940a:	4641      	mov	r1, r8
 800940c:	9805      	ldr	r0, [sp, #20]
 800940e:	461a      	mov	r2, r3
 8009410:	f7ff f9a4 	bl	800875c <__pow5mult>
 8009414:	4680      	mov	r8, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	d0ba      	beq.n	8009390 <_strtod_l+0x690>
 800941a:	4601      	mov	r1, r0
 800941c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800941e:	9805      	ldr	r0, [sp, #20]
 8009420:	f7ff f8fa 	bl	8008618 <__multiply>
 8009424:	900a      	str	r0, [sp, #40]	@ 0x28
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f ae8d 	beq.w	8009146 <_strtod_l+0x446>
 800942c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800942e:	9805      	ldr	r0, [sp, #20]
 8009430:	f7fe ffde 	bl	80083f0 <_Bfree>
 8009434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009436:	931a      	str	r3, [sp, #104]	@ 0x68
 8009438:	2d00      	cmp	r5, #0
 800943a:	dc1d      	bgt.n	8009478 <_strtod_l+0x778>
 800943c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd23      	ble.n	800948a <_strtod_l+0x78a>
 8009442:	4649      	mov	r1, r9
 8009444:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009446:	9805      	ldr	r0, [sp, #20]
 8009448:	f7ff f988 	bl	800875c <__pow5mult>
 800944c:	4681      	mov	r9, r0
 800944e:	b9e0      	cbnz	r0, 800948a <_strtod_l+0x78a>
 8009450:	f04f 0900 	mov.w	r9, #0
 8009454:	e677      	b.n	8009146 <_strtod_l+0x446>
 8009456:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800945a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800945e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009462:	35e2      	adds	r5, #226	@ 0xe2
 8009464:	fa01 f305 	lsl.w	r3, r1, r5
 8009468:	9310      	str	r3, [sp, #64]	@ 0x40
 800946a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800946c:	e7ba      	b.n	80093e4 <_strtod_l+0x6e4>
 800946e:	2300      	movs	r3, #0
 8009470:	9310      	str	r3, [sp, #64]	@ 0x40
 8009472:	2301      	movs	r3, #1
 8009474:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009476:	e7b5      	b.n	80093e4 <_strtod_l+0x6e4>
 8009478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800947a:	9805      	ldr	r0, [sp, #20]
 800947c:	462a      	mov	r2, r5
 800947e:	f7ff f9c7 	bl	8008810 <__lshift>
 8009482:	901a      	str	r0, [sp, #104]	@ 0x68
 8009484:	2800      	cmp	r0, #0
 8009486:	d1d9      	bne.n	800943c <_strtod_l+0x73c>
 8009488:	e65d      	b.n	8009146 <_strtod_l+0x446>
 800948a:	2e00      	cmp	r6, #0
 800948c:	dd07      	ble.n	800949e <_strtod_l+0x79e>
 800948e:	4649      	mov	r1, r9
 8009490:	9805      	ldr	r0, [sp, #20]
 8009492:	4632      	mov	r2, r6
 8009494:	f7ff f9bc 	bl	8008810 <__lshift>
 8009498:	4681      	mov	r9, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d0d8      	beq.n	8009450 <_strtod_l+0x750>
 800949e:	2f00      	cmp	r7, #0
 80094a0:	dd08      	ble.n	80094b4 <_strtod_l+0x7b4>
 80094a2:	4641      	mov	r1, r8
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	463a      	mov	r2, r7
 80094a8:	f7ff f9b2 	bl	8008810 <__lshift>
 80094ac:	4680      	mov	r8, r0
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f ae49 	beq.w	8009146 <_strtod_l+0x446>
 80094b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094b6:	9805      	ldr	r0, [sp, #20]
 80094b8:	464a      	mov	r2, r9
 80094ba:	f7ff fa31 	bl	8008920 <__mdiff>
 80094be:	4604      	mov	r4, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f43f ae40 	beq.w	8009146 <_strtod_l+0x446>
 80094c6:	68c3      	ldr	r3, [r0, #12]
 80094c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094ca:	2300      	movs	r3, #0
 80094cc:	60c3      	str	r3, [r0, #12]
 80094ce:	4641      	mov	r1, r8
 80094d0:	f7ff fa0a 	bl	80088e8 <__mcmp>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	da45      	bge.n	8009564 <_strtod_l+0x864>
 80094d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094da:	ea53 030a 	orrs.w	r3, r3, sl
 80094de:	d16b      	bne.n	80095b8 <_strtod_l+0x8b8>
 80094e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d167      	bne.n	80095b8 <_strtod_l+0x8b8>
 80094e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ec:	0d1b      	lsrs	r3, r3, #20
 80094ee:	051b      	lsls	r3, r3, #20
 80094f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094f4:	d960      	bls.n	80095b8 <_strtod_l+0x8b8>
 80094f6:	6963      	ldr	r3, [r4, #20]
 80094f8:	b913      	cbnz	r3, 8009500 <_strtod_l+0x800>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	dd5b      	ble.n	80095b8 <_strtod_l+0x8b8>
 8009500:	4621      	mov	r1, r4
 8009502:	2201      	movs	r2, #1
 8009504:	9805      	ldr	r0, [sp, #20]
 8009506:	f7ff f983 	bl	8008810 <__lshift>
 800950a:	4641      	mov	r1, r8
 800950c:	4604      	mov	r4, r0
 800950e:	f7ff f9eb 	bl	80088e8 <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	dd50      	ble.n	80095b8 <_strtod_l+0x8b8>
 8009516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800951a:	9a08      	ldr	r2, [sp, #32]
 800951c:	0d1b      	lsrs	r3, r3, #20
 800951e:	051b      	lsls	r3, r3, #20
 8009520:	2a00      	cmp	r2, #0
 8009522:	d06a      	beq.n	80095fa <_strtod_l+0x8fa>
 8009524:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009528:	d867      	bhi.n	80095fa <_strtod_l+0x8fa>
 800952a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800952e:	f67f ae9d 	bls.w	800926c <_strtod_l+0x56c>
 8009532:	4b0a      	ldr	r3, [pc, #40]	@ (800955c <_strtod_l+0x85c>)
 8009534:	4650      	mov	r0, sl
 8009536:	4659      	mov	r1, fp
 8009538:	2200      	movs	r2, #0
 800953a:	f7f7 f85d 	bl	80005f8 <__aeabi_dmul>
 800953e:	4b08      	ldr	r3, [pc, #32]	@ (8009560 <_strtod_l+0x860>)
 8009540:	400b      	ands	r3, r1
 8009542:	4682      	mov	sl, r0
 8009544:	468b      	mov	fp, r1
 8009546:	2b00      	cmp	r3, #0
 8009548:	f47f ae08 	bne.w	800915c <_strtod_l+0x45c>
 800954c:	9a05      	ldr	r2, [sp, #20]
 800954e:	2322      	movs	r3, #34	@ 0x22
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	e603      	b.n	800915c <_strtod_l+0x45c>
 8009554:	0800aee8 	.word	0x0800aee8
 8009558:	fffffc02 	.word	0xfffffc02
 800955c:	39500000 	.word	0x39500000
 8009560:	7ff00000 	.word	0x7ff00000
 8009564:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009568:	d165      	bne.n	8009636 <_strtod_l+0x936>
 800956a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800956c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009570:	b35a      	cbz	r2, 80095ca <_strtod_l+0x8ca>
 8009572:	4a9f      	ldr	r2, [pc, #636]	@ (80097f0 <_strtod_l+0xaf0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d12b      	bne.n	80095d0 <_strtod_l+0x8d0>
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	4651      	mov	r1, sl
 800957c:	b303      	cbz	r3, 80095c0 <_strtod_l+0x8c0>
 800957e:	4b9d      	ldr	r3, [pc, #628]	@ (80097f4 <_strtod_l+0xaf4>)
 8009580:	465a      	mov	r2, fp
 8009582:	4013      	ands	r3, r2
 8009584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009588:	f04f 32ff 	mov.w	r2, #4294967295
 800958c:	d81b      	bhi.n	80095c6 <_strtod_l+0x8c6>
 800958e:	0d1b      	lsrs	r3, r3, #20
 8009590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009594:	fa02 f303 	lsl.w	r3, r2, r3
 8009598:	4299      	cmp	r1, r3
 800959a:	d119      	bne.n	80095d0 <_strtod_l+0x8d0>
 800959c:	4b96      	ldr	r3, [pc, #600]	@ (80097f8 <_strtod_l+0xaf8>)
 800959e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d102      	bne.n	80095aa <_strtod_l+0x8aa>
 80095a4:	3101      	adds	r1, #1
 80095a6:	f43f adce 	beq.w	8009146 <_strtod_l+0x446>
 80095aa:	4b92      	ldr	r3, [pc, #584]	@ (80097f4 <_strtod_l+0xaf4>)
 80095ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095ae:	401a      	ands	r2, r3
 80095b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095b4:	f04f 0a00 	mov.w	sl, #0
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1b9      	bne.n	8009532 <_strtod_l+0x832>
 80095be:	e5cd      	b.n	800915c <_strtod_l+0x45c>
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	e7e8      	b.n	8009598 <_strtod_l+0x898>
 80095c6:	4613      	mov	r3, r2
 80095c8:	e7e6      	b.n	8009598 <_strtod_l+0x898>
 80095ca:	ea53 030a 	orrs.w	r3, r3, sl
 80095ce:	d0a2      	beq.n	8009516 <_strtod_l+0x816>
 80095d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095d2:	b1db      	cbz	r3, 800960c <_strtod_l+0x90c>
 80095d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095d6:	4213      	tst	r3, r2
 80095d8:	d0ee      	beq.n	80095b8 <_strtod_l+0x8b8>
 80095da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095dc:	9a08      	ldr	r2, [sp, #32]
 80095de:	4650      	mov	r0, sl
 80095e0:	4659      	mov	r1, fp
 80095e2:	b1bb      	cbz	r3, 8009614 <_strtod_l+0x914>
 80095e4:	f7ff fb6e 	bl	8008cc4 <sulp>
 80095e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ec:	ec53 2b10 	vmov	r2, r3, d0
 80095f0:	f7f6 fe4c 	bl	800028c <__adddf3>
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	e7de      	b.n	80095b8 <_strtod_l+0x8b8>
 80095fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80095fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009606:	f04f 3aff 	mov.w	sl, #4294967295
 800960a:	e7d5      	b.n	80095b8 <_strtod_l+0x8b8>
 800960c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800960e:	ea13 0f0a 	tst.w	r3, sl
 8009612:	e7e1      	b.n	80095d8 <_strtod_l+0x8d8>
 8009614:	f7ff fb56 	bl	8008cc4 <sulp>
 8009618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800961c:	ec53 2b10 	vmov	r2, r3, d0
 8009620:	f7f6 fe32 	bl	8000288 <__aeabi_dsub>
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	4682      	mov	sl, r0
 800962a:	468b      	mov	fp, r1
 800962c:	f7f7 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009630:	2800      	cmp	r0, #0
 8009632:	d0c1      	beq.n	80095b8 <_strtod_l+0x8b8>
 8009634:	e61a      	b.n	800926c <_strtod_l+0x56c>
 8009636:	4641      	mov	r1, r8
 8009638:	4620      	mov	r0, r4
 800963a:	f7ff facd 	bl	8008bd8 <__ratio>
 800963e:	ec57 6b10 	vmov	r6, r7, d0
 8009642:	2200      	movs	r2, #0
 8009644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fa50 	bl	8000af0 <__aeabi_dcmple>
 8009650:	2800      	cmp	r0, #0
 8009652:	d06f      	beq.n	8009734 <_strtod_l+0xa34>
 8009654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d17a      	bne.n	8009750 <_strtod_l+0xa50>
 800965a:	f1ba 0f00 	cmp.w	sl, #0
 800965e:	d158      	bne.n	8009712 <_strtod_l+0xa12>
 8009660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009666:	2b00      	cmp	r3, #0
 8009668:	d15a      	bne.n	8009720 <_strtod_l+0xa20>
 800966a:	4b64      	ldr	r3, [pc, #400]	@ (80097fc <_strtod_l+0xafc>)
 800966c:	2200      	movs	r2, #0
 800966e:	4630      	mov	r0, r6
 8009670:	4639      	mov	r1, r7
 8009672:	f7f7 fa33 	bl	8000adc <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	d159      	bne.n	800972e <_strtod_l+0xa2e>
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	4b60      	ldr	r3, [pc, #384]	@ (8009800 <_strtod_l+0xb00>)
 8009680:	2200      	movs	r2, #0
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800968e:	9606      	str	r6, [sp, #24]
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009696:	4d57      	ldr	r5, [pc, #348]	@ (80097f4 <_strtod_l+0xaf4>)
 8009698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800969c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800969e:	401d      	ands	r5, r3
 80096a0:	4b58      	ldr	r3, [pc, #352]	@ (8009804 <_strtod_l+0xb04>)
 80096a2:	429d      	cmp	r5, r3
 80096a4:	f040 80b2 	bne.w	800980c <_strtod_l+0xb0c>
 80096a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096ae:	ec4b ab10 	vmov	d0, sl, fp
 80096b2:	f7ff f9c9 	bl	8008a48 <__ulp>
 80096b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ba:	ec51 0b10 	vmov	r0, r1, d0
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	f7f6 fde1 	bl	800028c <__adddf3>
 80096ca:	460b      	mov	r3, r1
 80096cc:	4949      	ldr	r1, [pc, #292]	@ (80097f4 <_strtod_l+0xaf4>)
 80096ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009808 <_strtod_l+0xb08>)
 80096d0:	4019      	ands	r1, r3
 80096d2:	4291      	cmp	r1, r2
 80096d4:	4682      	mov	sl, r0
 80096d6:	d942      	bls.n	800975e <_strtod_l+0xa5e>
 80096d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096da:	4b47      	ldr	r3, [pc, #284]	@ (80097f8 <_strtod_l+0xaf8>)
 80096dc:	429a      	cmp	r2, r3
 80096de:	d103      	bne.n	80096e8 <_strtod_l+0x9e8>
 80096e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096e2:	3301      	adds	r3, #1
 80096e4:	f43f ad2f 	beq.w	8009146 <_strtod_l+0x446>
 80096e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80097f8 <_strtod_l+0xaf8>
 80096ec:	f04f 3aff 	mov.w	sl, #4294967295
 80096f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	f7fe fe7c 	bl	80083f0 <_Bfree>
 80096f8:	9805      	ldr	r0, [sp, #20]
 80096fa:	4649      	mov	r1, r9
 80096fc:	f7fe fe78 	bl	80083f0 <_Bfree>
 8009700:	9805      	ldr	r0, [sp, #20]
 8009702:	4641      	mov	r1, r8
 8009704:	f7fe fe74 	bl	80083f0 <_Bfree>
 8009708:	9805      	ldr	r0, [sp, #20]
 800970a:	4621      	mov	r1, r4
 800970c:	f7fe fe70 	bl	80083f0 <_Bfree>
 8009710:	e619      	b.n	8009346 <_strtod_l+0x646>
 8009712:	f1ba 0f01 	cmp.w	sl, #1
 8009716:	d103      	bne.n	8009720 <_strtod_l+0xa20>
 8009718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	f43f ada6 	beq.w	800926c <_strtod_l+0x56c>
 8009720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80097d0 <_strtod_l+0xad0>
 8009724:	4f35      	ldr	r7, [pc, #212]	@ (80097fc <_strtod_l+0xafc>)
 8009726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800972a:	2600      	movs	r6, #0
 800972c:	e7b1      	b.n	8009692 <_strtod_l+0x992>
 800972e:	4f34      	ldr	r7, [pc, #208]	@ (8009800 <_strtod_l+0xb00>)
 8009730:	2600      	movs	r6, #0
 8009732:	e7aa      	b.n	800968a <_strtod_l+0x98a>
 8009734:	4b32      	ldr	r3, [pc, #200]	@ (8009800 <_strtod_l+0xb00>)
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	2200      	movs	r2, #0
 800973c:	f7f6 ff5c 	bl	80005f8 <__aeabi_dmul>
 8009740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d09f      	beq.n	800968a <_strtod_l+0x98a>
 800974a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800974e:	e7a0      	b.n	8009692 <_strtod_l+0x992>
 8009750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80097d8 <_strtod_l+0xad8>
 8009754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009758:	ec57 6b17 	vmov	r6, r7, d7
 800975c:	e799      	b.n	8009692 <_strtod_l+0x992>
 800975e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009762:	9b08      	ldr	r3, [sp, #32]
 8009764:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1c1      	bne.n	80096f0 <_strtod_l+0x9f0>
 800976c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009770:	0d1b      	lsrs	r3, r3, #20
 8009772:	051b      	lsls	r3, r3, #20
 8009774:	429d      	cmp	r5, r3
 8009776:	d1bb      	bne.n	80096f0 <_strtod_l+0x9f0>
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 fa9c 	bl	8000cb8 <__aeabi_d2lz>
 8009780:	f7f6 ff0c 	bl	800059c <__aeabi_l2d>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 fd7c 	bl	8000288 <__aeabi_dsub>
 8009790:	460b      	mov	r3, r1
 8009792:	4602      	mov	r2, r0
 8009794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800979c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979e:	ea46 060a 	orr.w	r6, r6, sl
 80097a2:	431e      	orrs	r6, r3
 80097a4:	d06f      	beq.n	8009886 <_strtod_l+0xb86>
 80097a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80097e0 <_strtod_l+0xae0>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f7 f996 	bl	8000adc <__aeabi_dcmplt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f47f acd3 	bne.w	800915c <_strtod_l+0x45c>
 80097b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80097e8 <_strtod_l+0xae8>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097c0:	f7f7 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d093      	beq.n	80096f0 <_strtod_l+0x9f0>
 80097c8:	e4c8      	b.n	800915c <_strtod_l+0x45c>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	00000000 	.word	0x00000000
 80097d4:	bff00000 	.word	0xbff00000
 80097d8:	00000000 	.word	0x00000000
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fdfffff 	.word	0x3fdfffff
 80097e8:	35afe535 	.word	0x35afe535
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	000fffff 	.word	0x000fffff
 80097f4:	7ff00000 	.word	0x7ff00000
 80097f8:	7fefffff 	.word	0x7fefffff
 80097fc:	3ff00000 	.word	0x3ff00000
 8009800:	3fe00000 	.word	0x3fe00000
 8009804:	7fe00000 	.word	0x7fe00000
 8009808:	7c9fffff 	.word	0x7c9fffff
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	b323      	cbz	r3, 800985a <_strtod_l+0xb5a>
 8009810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009814:	d821      	bhi.n	800985a <_strtod_l+0xb5a>
 8009816:	a328      	add	r3, pc, #160	@ (adr r3, 80098b8 <_strtod_l+0xbb8>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f7 f966 	bl	8000af0 <__aeabi_dcmple>
 8009824:	b1a0      	cbz	r0, 8009850 <_strtod_l+0xb50>
 8009826:	4639      	mov	r1, r7
 8009828:	4630      	mov	r0, r6
 800982a:	f7f7 f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 800982e:	2801      	cmp	r0, #1
 8009830:	bf38      	it	cc
 8009832:	2001      	movcc	r0, #1
 8009834:	f7f6 fe66 	bl	8000504 <__aeabi_ui2d>
 8009838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	b9fb      	cbnz	r3, 8009880 <_strtod_l+0xb80>
 8009840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009844:	9014      	str	r0, [sp, #80]	@ 0x50
 8009846:	9315      	str	r3, [sp, #84]	@ 0x54
 8009848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800984c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009856:	1b5b      	subs	r3, r3, r5
 8009858:	9311      	str	r3, [sp, #68]	@ 0x44
 800985a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800985e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009862:	f7ff f8f1 	bl	8008a48 <__ulp>
 8009866:	4650      	mov	r0, sl
 8009868:	ec53 2b10 	vmov	r2, r3, d0
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 fec3 	bl	80005f8 <__aeabi_dmul>
 8009872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009876:	f7f6 fd09 	bl	800028c <__adddf3>
 800987a:	4682      	mov	sl, r0
 800987c:	468b      	mov	fp, r1
 800987e:	e770      	b.n	8009762 <_strtod_l+0xa62>
 8009880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009884:	e7e0      	b.n	8009848 <_strtod_l+0xb48>
 8009886:	a30e      	add	r3, pc, #56	@ (adr r3, 80098c0 <_strtod_l+0xbc0>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f7f7 f926 	bl	8000adc <__aeabi_dcmplt>
 8009890:	e798      	b.n	80097c4 <_strtod_l+0xac4>
 8009892:	2300      	movs	r3, #0
 8009894:	930e      	str	r3, [sp, #56]	@ 0x38
 8009896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	f7ff ba6d 	b.w	8008d7a <_strtod_l+0x7a>
 80098a0:	2a65      	cmp	r2, #101	@ 0x65
 80098a2:	f43f ab68 	beq.w	8008f76 <_strtod_l+0x276>
 80098a6:	2a45      	cmp	r2, #69	@ 0x45
 80098a8:	f43f ab65 	beq.w	8008f76 <_strtod_l+0x276>
 80098ac:	2301      	movs	r3, #1
 80098ae:	f7ff bba0 	b.w	8008ff2 <_strtod_l+0x2f2>
 80098b2:	bf00      	nop
 80098b4:	f3af 8000 	nop.w
 80098b8:	ffc00000 	.word	0xffc00000
 80098bc:	41dfffff 	.word	0x41dfffff
 80098c0:	94a03595 	.word	0x94a03595
 80098c4:	3fcfffff 	.word	0x3fcfffff

080098c8 <_strtod_r>:
 80098c8:	4b01      	ldr	r3, [pc, #4]	@ (80098d0 <_strtod_r+0x8>)
 80098ca:	f7ff ba19 	b.w	8008d00 <_strtod_l>
 80098ce:	bf00      	nop
 80098d0:	20000068 	.word	0x20000068

080098d4 <_strtol_l.isra.0>:
 80098d4:	2b24      	cmp	r3, #36	@ 0x24
 80098d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098da:	4686      	mov	lr, r0
 80098dc:	4690      	mov	r8, r2
 80098de:	d801      	bhi.n	80098e4 <_strtol_l.isra.0+0x10>
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d106      	bne.n	80098f2 <_strtol_l.isra.0+0x1e>
 80098e4:	f7fd fd9a 	bl	800741c <__errno>
 80098e8:	2316      	movs	r3, #22
 80098ea:	6003      	str	r3, [r0, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f2:	4834      	ldr	r0, [pc, #208]	@ (80099c4 <_strtol_l.isra.0+0xf0>)
 80098f4:	460d      	mov	r5, r1
 80098f6:	462a      	mov	r2, r5
 80098f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098fc:	5d06      	ldrb	r6, [r0, r4]
 80098fe:	f016 0608 	ands.w	r6, r6, #8
 8009902:	d1f8      	bne.n	80098f6 <_strtol_l.isra.0+0x22>
 8009904:	2c2d      	cmp	r4, #45	@ 0x2d
 8009906:	d110      	bne.n	800992a <_strtol_l.isra.0+0x56>
 8009908:	782c      	ldrb	r4, [r5, #0]
 800990a:	2601      	movs	r6, #1
 800990c:	1c95      	adds	r5, r2, #2
 800990e:	f033 0210 	bics.w	r2, r3, #16
 8009912:	d115      	bne.n	8009940 <_strtol_l.isra.0+0x6c>
 8009914:	2c30      	cmp	r4, #48	@ 0x30
 8009916:	d10d      	bne.n	8009934 <_strtol_l.isra.0+0x60>
 8009918:	782a      	ldrb	r2, [r5, #0]
 800991a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800991e:	2a58      	cmp	r2, #88	@ 0x58
 8009920:	d108      	bne.n	8009934 <_strtol_l.isra.0+0x60>
 8009922:	786c      	ldrb	r4, [r5, #1]
 8009924:	3502      	adds	r5, #2
 8009926:	2310      	movs	r3, #16
 8009928:	e00a      	b.n	8009940 <_strtol_l.isra.0+0x6c>
 800992a:	2c2b      	cmp	r4, #43	@ 0x2b
 800992c:	bf04      	itt	eq
 800992e:	782c      	ldrbeq	r4, [r5, #0]
 8009930:	1c95      	addeq	r5, r2, #2
 8009932:	e7ec      	b.n	800990e <_strtol_l.isra.0+0x3a>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1f6      	bne.n	8009926 <_strtol_l.isra.0+0x52>
 8009938:	2c30      	cmp	r4, #48	@ 0x30
 800993a:	bf14      	ite	ne
 800993c:	230a      	movne	r3, #10
 800993e:	2308      	moveq	r3, #8
 8009940:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009944:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009948:	2200      	movs	r2, #0
 800994a:	fbbc f9f3 	udiv	r9, ip, r3
 800994e:	4610      	mov	r0, r2
 8009950:	fb03 ca19 	mls	sl, r3, r9, ip
 8009954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009958:	2f09      	cmp	r7, #9
 800995a:	d80f      	bhi.n	800997c <_strtol_l.isra.0+0xa8>
 800995c:	463c      	mov	r4, r7
 800995e:	42a3      	cmp	r3, r4
 8009960:	dd1b      	ble.n	800999a <_strtol_l.isra.0+0xc6>
 8009962:	1c57      	adds	r7, r2, #1
 8009964:	d007      	beq.n	8009976 <_strtol_l.isra.0+0xa2>
 8009966:	4581      	cmp	r9, r0
 8009968:	d314      	bcc.n	8009994 <_strtol_l.isra.0+0xc0>
 800996a:	d101      	bne.n	8009970 <_strtol_l.isra.0+0x9c>
 800996c:	45a2      	cmp	sl, r4
 800996e:	db11      	blt.n	8009994 <_strtol_l.isra.0+0xc0>
 8009970:	fb00 4003 	mla	r0, r0, r3, r4
 8009974:	2201      	movs	r2, #1
 8009976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800997a:	e7eb      	b.n	8009954 <_strtol_l.isra.0+0x80>
 800997c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009980:	2f19      	cmp	r7, #25
 8009982:	d801      	bhi.n	8009988 <_strtol_l.isra.0+0xb4>
 8009984:	3c37      	subs	r4, #55	@ 0x37
 8009986:	e7ea      	b.n	800995e <_strtol_l.isra.0+0x8a>
 8009988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800998c:	2f19      	cmp	r7, #25
 800998e:	d804      	bhi.n	800999a <_strtol_l.isra.0+0xc6>
 8009990:	3c57      	subs	r4, #87	@ 0x57
 8009992:	e7e4      	b.n	800995e <_strtol_l.isra.0+0x8a>
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	e7ed      	b.n	8009976 <_strtol_l.isra.0+0xa2>
 800999a:	1c53      	adds	r3, r2, #1
 800999c:	d108      	bne.n	80099b0 <_strtol_l.isra.0+0xdc>
 800999e:	2322      	movs	r3, #34	@ 0x22
 80099a0:	f8ce 3000 	str.w	r3, [lr]
 80099a4:	4660      	mov	r0, ip
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	d0a0      	beq.n	80098ee <_strtol_l.isra.0+0x1a>
 80099ac:	1e69      	subs	r1, r5, #1
 80099ae:	e006      	b.n	80099be <_strtol_l.isra.0+0xea>
 80099b0:	b106      	cbz	r6, 80099b4 <_strtol_l.isra.0+0xe0>
 80099b2:	4240      	negs	r0, r0
 80099b4:	f1b8 0f00 	cmp.w	r8, #0
 80099b8:	d099      	beq.n	80098ee <_strtol_l.isra.0+0x1a>
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d1f6      	bne.n	80099ac <_strtol_l.isra.0+0xd8>
 80099be:	f8c8 1000 	str.w	r1, [r8]
 80099c2:	e794      	b.n	80098ee <_strtol_l.isra.0+0x1a>
 80099c4:	0800af11 	.word	0x0800af11

080099c8 <_strtol_r>:
 80099c8:	f7ff bf84 	b.w	80098d4 <_strtol_l.isra.0>

080099cc <__ssputs_r>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	688e      	ldr	r6, [r1, #8]
 80099d2:	461f      	mov	r7, r3
 80099d4:	42be      	cmp	r6, r7
 80099d6:	680b      	ldr	r3, [r1, #0]
 80099d8:	4682      	mov	sl, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	4690      	mov	r8, r2
 80099de:	d82d      	bhi.n	8009a3c <__ssputs_r+0x70>
 80099e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099e8:	d026      	beq.n	8009a38 <__ssputs_r+0x6c>
 80099ea:	6965      	ldr	r5, [r4, #20]
 80099ec:	6909      	ldr	r1, [r1, #16]
 80099ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099f2:	eba3 0901 	sub.w	r9, r3, r1
 80099f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099fa:	1c7b      	adds	r3, r7, #1
 80099fc:	444b      	add	r3, r9
 80099fe:	106d      	asrs	r5, r5, #1
 8009a00:	429d      	cmp	r5, r3
 8009a02:	bf38      	it	cc
 8009a04:	461d      	movcc	r5, r3
 8009a06:	0553      	lsls	r3, r2, #21
 8009a08:	d527      	bpl.n	8009a5a <__ssputs_r+0x8e>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7fe fc24 	bl	8008258 <_malloc_r>
 8009a10:	4606      	mov	r6, r0
 8009a12:	b360      	cbz	r0, 8009a6e <__ssputs_r+0xa2>
 8009a14:	6921      	ldr	r1, [r4, #16]
 8009a16:	464a      	mov	r2, r9
 8009a18:	f000 fa2a 	bl	8009e70 <memcpy>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	6126      	str	r6, [r4, #16]
 8009a2a:	6165      	str	r5, [r4, #20]
 8009a2c:	444e      	add	r6, r9
 8009a2e:	eba5 0509 	sub.w	r5, r5, r9
 8009a32:	6026      	str	r6, [r4, #0]
 8009a34:	60a5      	str	r5, [r4, #8]
 8009a36:	463e      	mov	r6, r7
 8009a38:	42be      	cmp	r6, r7
 8009a3a:	d900      	bls.n	8009a3e <__ssputs_r+0x72>
 8009a3c:	463e      	mov	r6, r7
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	4632      	mov	r2, r6
 8009a42:	4641      	mov	r1, r8
 8009a44:	f000 f9d8 	bl	8009df8 <memmove>
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	1b9b      	subs	r3, r3, r6
 8009a4c:	60a3      	str	r3, [r4, #8]
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	4433      	add	r3, r6
 8009a52:	6023      	str	r3, [r4, #0]
 8009a54:	2000      	movs	r0, #0
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	f000 fd85 	bl	800a56a <_realloc_r>
 8009a60:	4606      	mov	r6, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1e0      	bne.n	8009a28 <__ssputs_r+0x5c>
 8009a66:	6921      	ldr	r1, [r4, #16]
 8009a68:	4650      	mov	r0, sl
 8009a6a:	f7fe fb81 	bl	8008170 <_free_r>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	f8ca 3000 	str.w	r3, [sl]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	e7e9      	b.n	8009a56 <__ssputs_r+0x8a>
	...

08009a84 <_svfiprintf_r>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	4698      	mov	r8, r3
 8009a8a:	898b      	ldrh	r3, [r1, #12]
 8009a8c:	061b      	lsls	r3, r3, #24
 8009a8e:	b09d      	sub	sp, #116	@ 0x74
 8009a90:	4607      	mov	r7, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	4614      	mov	r4, r2
 8009a96:	d510      	bpl.n	8009aba <_svfiprintf_r+0x36>
 8009a98:	690b      	ldr	r3, [r1, #16]
 8009a9a:	b973      	cbnz	r3, 8009aba <_svfiprintf_r+0x36>
 8009a9c:	2140      	movs	r1, #64	@ 0x40
 8009a9e:	f7fe fbdb 	bl	8008258 <_malloc_r>
 8009aa2:	6028      	str	r0, [r5, #0]
 8009aa4:	6128      	str	r0, [r5, #16]
 8009aa6:	b930      	cbnz	r0, 8009ab6 <_svfiprintf_r+0x32>
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	b01d      	add	sp, #116	@ 0x74
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab6:	2340      	movs	r3, #64	@ 0x40
 8009ab8:	616b      	str	r3, [r5, #20]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009abe:	2320      	movs	r3, #32
 8009ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac8:	2330      	movs	r3, #48	@ 0x30
 8009aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c68 <_svfiprintf_r+0x1e4>
 8009ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ad2:	f04f 0901 	mov.w	r9, #1
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ade:	b10a      	cbz	r2, 8009ae4 <_svfiprintf_r+0x60>
 8009ae0:	2a25      	cmp	r2, #37	@ 0x25
 8009ae2:	d1f9      	bne.n	8009ad8 <_svfiprintf_r+0x54>
 8009ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae8:	d00b      	beq.n	8009b02 <_svfiprintf_r+0x7e>
 8009aea:	465b      	mov	r3, fp
 8009aec:	4622      	mov	r2, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ff6b 	bl	80099cc <__ssputs_r>
 8009af6:	3001      	adds	r0, #1
 8009af8:	f000 80a7 	beq.w	8009c4a <_svfiprintf_r+0x1c6>
 8009afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009afe:	445a      	add	r2, fp
 8009b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 809f 	beq.w	8009c4a <_svfiprintf_r+0x1c6>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b16:	f10a 0a01 	add.w	sl, sl, #1
 8009b1a:	9304      	str	r3, [sp, #16]
 8009b1c:	9307      	str	r3, [sp, #28]
 8009b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b24:	4654      	mov	r4, sl
 8009b26:	2205      	movs	r2, #5
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	484e      	ldr	r0, [pc, #312]	@ (8009c68 <_svfiprintf_r+0x1e4>)
 8009b2e:	f7f6 fb4f 	bl	80001d0 <memchr>
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	b9d8      	cbnz	r0, 8009b6e <_svfiprintf_r+0xea>
 8009b36:	06d0      	lsls	r0, r2, #27
 8009b38:	bf44      	itt	mi
 8009b3a:	2320      	movmi	r3, #32
 8009b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b40:	0711      	lsls	r1, r2, #28
 8009b42:	bf44      	itt	mi
 8009b44:	232b      	movmi	r3, #43	@ 0x2b
 8009b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b50:	d015      	beq.n	8009b7e <_svfiprintf_r+0xfa>
 8009b52:	9a07      	ldr	r2, [sp, #28]
 8009b54:	4654      	mov	r4, sl
 8009b56:	2000      	movs	r0, #0
 8009b58:	f04f 0c0a 	mov.w	ip, #10
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b62:	3b30      	subs	r3, #48	@ 0x30
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	d94b      	bls.n	8009c00 <_svfiprintf_r+0x17c>
 8009b68:	b1b0      	cbz	r0, 8009b98 <_svfiprintf_r+0x114>
 8009b6a:	9207      	str	r2, [sp, #28]
 8009b6c:	e014      	b.n	8009b98 <_svfiprintf_r+0x114>
 8009b6e:	eba0 0308 	sub.w	r3, r0, r8
 8009b72:	fa09 f303 	lsl.w	r3, r9, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	9304      	str	r3, [sp, #16]
 8009b7a:	46a2      	mov	sl, r4
 8009b7c:	e7d2      	b.n	8009b24 <_svfiprintf_r+0xa0>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	1d19      	adds	r1, r3, #4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	9103      	str	r1, [sp, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfbb      	ittet	lt
 8009b8a:	425b      	neglt	r3, r3
 8009b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b90:	9307      	strge	r3, [sp, #28]
 8009b92:	9307      	strlt	r3, [sp, #28]
 8009b94:	bfb8      	it	lt
 8009b96:	9204      	strlt	r2, [sp, #16]
 8009b98:	7823      	ldrb	r3, [r4, #0]
 8009b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b9c:	d10a      	bne.n	8009bb4 <_svfiprintf_r+0x130>
 8009b9e:	7863      	ldrb	r3, [r4, #1]
 8009ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba2:	d132      	bne.n	8009c0a <_svfiprintf_r+0x186>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	1d1a      	adds	r2, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	9203      	str	r2, [sp, #12]
 8009bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bb0:	3402      	adds	r4, #2
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c78 <_svfiprintf_r+0x1f4>
 8009bb8:	7821      	ldrb	r1, [r4, #0]
 8009bba:	2203      	movs	r2, #3
 8009bbc:	4650      	mov	r0, sl
 8009bbe:	f7f6 fb07 	bl	80001d0 <memchr>
 8009bc2:	b138      	cbz	r0, 8009bd4 <_svfiprintf_r+0x150>
 8009bc4:	9b04      	ldr	r3, [sp, #16]
 8009bc6:	eba0 000a 	sub.w	r0, r0, sl
 8009bca:	2240      	movs	r2, #64	@ 0x40
 8009bcc:	4082      	lsls	r2, r0
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd8:	4824      	ldr	r0, [pc, #144]	@ (8009c6c <_svfiprintf_r+0x1e8>)
 8009bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bde:	2206      	movs	r2, #6
 8009be0:	f7f6 faf6 	bl	80001d0 <memchr>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d036      	beq.n	8009c56 <_svfiprintf_r+0x1d2>
 8009be8:	4b21      	ldr	r3, [pc, #132]	@ (8009c70 <_svfiprintf_r+0x1ec>)
 8009bea:	bb1b      	cbnz	r3, 8009c34 <_svfiprintf_r+0x1b0>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	3307      	adds	r3, #7
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfa:	4433      	add	r3, r6
 8009bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfe:	e76a      	b.n	8009ad6 <_svfiprintf_r+0x52>
 8009c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c04:	460c      	mov	r4, r1
 8009c06:	2001      	movs	r0, #1
 8009c08:	e7a8      	b.n	8009b5c <_svfiprintf_r+0xd8>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	4619      	mov	r1, r3
 8009c12:	f04f 0c0a 	mov.w	ip, #10
 8009c16:	4620      	mov	r0, r4
 8009c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1c:	3a30      	subs	r2, #48	@ 0x30
 8009c1e:	2a09      	cmp	r2, #9
 8009c20:	d903      	bls.n	8009c2a <_svfiprintf_r+0x1a6>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0c6      	beq.n	8009bb4 <_svfiprintf_r+0x130>
 8009c26:	9105      	str	r1, [sp, #20]
 8009c28:	e7c4      	b.n	8009bb4 <_svfiprintf_r+0x130>
 8009c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2e:	4604      	mov	r4, r0
 8009c30:	2301      	movs	r3, #1
 8009c32:	e7f0      	b.n	8009c16 <_svfiprintf_r+0x192>
 8009c34:	ab03      	add	r3, sp, #12
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <_svfiprintf_r+0x1f0>)
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	4638      	mov	r0, r7
 8009c40:	f7fc fc52 	bl	80064e8 <_printf_float>
 8009c44:	1c42      	adds	r2, r0, #1
 8009c46:	4606      	mov	r6, r0
 8009c48:	d1d6      	bne.n	8009bf8 <_svfiprintf_r+0x174>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	065b      	lsls	r3, r3, #25
 8009c4e:	f53f af2d 	bmi.w	8009aac <_svfiprintf_r+0x28>
 8009c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c54:	e72c      	b.n	8009ab0 <_svfiprintf_r+0x2c>
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <_svfiprintf_r+0x1f0>)
 8009c5e:	a904      	add	r1, sp, #16
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7fc fed9 	bl	8006a18 <_printf_i>
 8009c66:	e7ed      	b.n	8009c44 <_svfiprintf_r+0x1c0>
 8009c68:	0800ad47 	.word	0x0800ad47
 8009c6c:	0800ad51 	.word	0x0800ad51
 8009c70:	080064e9 	.word	0x080064e9
 8009c74:	080099cd 	.word	0x080099cd
 8009c78:	0800ad4d 	.word	0x0800ad4d

08009c7c <__sflush_r>:
 8009c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c84:	0716      	lsls	r6, r2, #28
 8009c86:	4605      	mov	r5, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d454      	bmi.n	8009d36 <__sflush_r+0xba>
 8009c8c:	684b      	ldr	r3, [r1, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dc02      	bgt.n	8009c98 <__sflush_r+0x1c>
 8009c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd48      	ble.n	8009d2a <__sflush_r+0xae>
 8009c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c9a:	2e00      	cmp	r6, #0
 8009c9c:	d045      	beq.n	8009d2a <__sflush_r+0xae>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ca4:	682f      	ldr	r7, [r5, #0]
 8009ca6:	6a21      	ldr	r1, [r4, #32]
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	d030      	beq.n	8009d0e <__sflush_r+0x92>
 8009cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	0759      	lsls	r1, r3, #29
 8009cb2:	d505      	bpl.n	8009cc0 <__sflush_r+0x44>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	1ad2      	subs	r2, r2, r3
 8009cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cba:	b10b      	cbz	r3, 8009cc0 <__sflush_r+0x44>
 8009cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b0      	blx	r6
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	d106      	bne.n	8009cde <__sflush_r+0x62>
 8009cd0:	6829      	ldr	r1, [r5, #0]
 8009cd2:	291d      	cmp	r1, #29
 8009cd4:	d82b      	bhi.n	8009d2e <__sflush_r+0xb2>
 8009cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8009d80 <__sflush_r+0x104>)
 8009cd8:	40ca      	lsrs	r2, r1
 8009cda:	07d6      	lsls	r6, r2, #31
 8009cdc:	d527      	bpl.n	8009d2e <__sflush_r+0xb2>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	6062      	str	r2, [r4, #4]
 8009ce2:	04d9      	lsls	r1, r3, #19
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	6022      	str	r2, [r4, #0]
 8009ce8:	d504      	bpl.n	8009cf4 <__sflush_r+0x78>
 8009cea:	1c42      	adds	r2, r0, #1
 8009cec:	d101      	bne.n	8009cf2 <__sflush_r+0x76>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	b903      	cbnz	r3, 8009cf4 <__sflush_r+0x78>
 8009cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cf6:	602f      	str	r7, [r5, #0]
 8009cf8:	b1b9      	cbz	r1, 8009d2a <__sflush_r+0xae>
 8009cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	d002      	beq.n	8009d08 <__sflush_r+0x8c>
 8009d02:	4628      	mov	r0, r5
 8009d04:	f7fe fa34 	bl	8008170 <_free_r>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d0c:	e00d      	b.n	8009d2a <__sflush_r+0xae>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b0      	blx	r6
 8009d14:	4602      	mov	r2, r0
 8009d16:	1c50      	adds	r0, r2, #1
 8009d18:	d1c9      	bne.n	8009cae <__sflush_r+0x32>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0c6      	beq.n	8009cae <__sflush_r+0x32>
 8009d20:	2b1d      	cmp	r3, #29
 8009d22:	d001      	beq.n	8009d28 <__sflush_r+0xac>
 8009d24:	2b16      	cmp	r3, #22
 8009d26:	d11e      	bne.n	8009d66 <__sflush_r+0xea>
 8009d28:	602f      	str	r7, [r5, #0]
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e022      	b.n	8009d74 <__sflush_r+0xf8>
 8009d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d32:	b21b      	sxth	r3, r3
 8009d34:	e01b      	b.n	8009d6e <__sflush_r+0xf2>
 8009d36:	690f      	ldr	r7, [r1, #16]
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	d0f6      	beq.n	8009d2a <__sflush_r+0xae>
 8009d3c:	0793      	lsls	r3, r2, #30
 8009d3e:	680e      	ldr	r6, [r1, #0]
 8009d40:	bf08      	it	eq
 8009d42:	694b      	ldreq	r3, [r1, #20]
 8009d44:	600f      	str	r7, [r1, #0]
 8009d46:	bf18      	it	ne
 8009d48:	2300      	movne	r3, #0
 8009d4a:	eba6 0807 	sub.w	r8, r6, r7
 8009d4e:	608b      	str	r3, [r1, #8]
 8009d50:	f1b8 0f00 	cmp.w	r8, #0
 8009d54:	dde9      	ble.n	8009d2a <__sflush_r+0xae>
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d5a:	4643      	mov	r3, r8
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b0      	blx	r6
 8009d62:	2800      	cmp	r0, #0
 8009d64:	dc08      	bgt.n	8009d78 <__sflush_r+0xfc>
 8009d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	4407      	add	r7, r0
 8009d7a:	eba8 0800 	sub.w	r8, r8, r0
 8009d7e:	e7e7      	b.n	8009d50 <__sflush_r+0xd4>
 8009d80:	20400001 	.word	0x20400001

08009d84 <_fflush_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	4605      	mov	r5, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b913      	cbnz	r3, 8009d94 <_fflush_r+0x10>
 8009d8e:	2500      	movs	r5, #0
 8009d90:	4628      	mov	r0, r5
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	b118      	cbz	r0, 8009d9e <_fflush_r+0x1a>
 8009d96:	6a03      	ldr	r3, [r0, #32]
 8009d98:	b90b      	cbnz	r3, 8009d9e <_fflush_r+0x1a>
 8009d9a:	f7fd f9f5 	bl	8007188 <__sinit>
 8009d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f3      	beq.n	8009d8e <_fflush_r+0xa>
 8009da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009da8:	07d0      	lsls	r0, r2, #31
 8009daa:	d404      	bmi.n	8009db6 <_fflush_r+0x32>
 8009dac:	0599      	lsls	r1, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_fflush_r+0x32>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f7fd fb5e 	bl	8007472 <__retarget_lock_acquire_recursive>
 8009db6:	4628      	mov	r0, r5
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7ff ff5f 	bl	8009c7c <__sflush_r>
 8009dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dc0:	07da      	lsls	r2, r3, #31
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	d4e4      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	059b      	lsls	r3, r3, #22
 8009dca:	d4e1      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dce:	f7fd fb51 	bl	8007474 <__retarget_lock_release_recursive>
 8009dd2:	e7dd      	b.n	8009d90 <_fflush_r+0xc>

08009dd4 <fiprintf>:
 8009dd4:	b40e      	push	{r1, r2, r3}
 8009dd6:	b503      	push	{r0, r1, lr}
 8009dd8:	4601      	mov	r1, r0
 8009dda:	ab03      	add	r3, sp, #12
 8009ddc:	4805      	ldr	r0, [pc, #20]	@ (8009df4 <fiprintf+0x20>)
 8009dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de2:	6800      	ldr	r0, [r0, #0]
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	f000 fc25 	bl	800a634 <_vfiprintf_r>
 8009dea:	b002      	add	sp, #8
 8009dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df0:	b003      	add	sp, #12
 8009df2:	4770      	bx	lr
 8009df4:	20000018 	.word	0x20000018

08009df8 <memmove>:
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	eb01 0402 	add.w	r4, r1, r2
 8009e00:	d902      	bls.n	8009e08 <memmove+0x10>
 8009e02:	4284      	cmp	r4, r0
 8009e04:	4623      	mov	r3, r4
 8009e06:	d807      	bhi.n	8009e18 <memmove+0x20>
 8009e08:	1e43      	subs	r3, r0, #1
 8009e0a:	42a1      	cmp	r1, r4
 8009e0c:	d008      	beq.n	8009e20 <memmove+0x28>
 8009e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e16:	e7f8      	b.n	8009e0a <memmove+0x12>
 8009e18:	4402      	add	r2, r0
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	d100      	bne.n	8009e22 <memmove+0x2a>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e2a:	e7f7      	b.n	8009e1c <memmove+0x24>

08009e2c <strncmp>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	b16a      	cbz	r2, 8009e4c <strncmp+0x20>
 8009e30:	3901      	subs	r1, #1
 8009e32:	1884      	adds	r4, r0, r2
 8009e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d103      	bne.n	8009e48 <strncmp+0x1c>
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d001      	beq.n	8009e48 <strncmp+0x1c>
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1f5      	bne.n	8009e34 <strncmp+0x8>
 8009e48:	1ad0      	subs	r0, r2, r3
 8009e4a:	bd10      	pop	{r4, pc}
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	e7fc      	b.n	8009e4a <strncmp+0x1e>

08009e50 <_sbrk_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	@ (8009e6c <_sbrk_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f7f7 ff42 	bl	8001ce4 <_sbrk>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_sbrk_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_sbrk_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20000438 	.word	0x20000438

08009e70 <memcpy>:
 8009e70:	440a      	add	r2, r1
 8009e72:	4291      	cmp	r1, r2
 8009e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e78:	d100      	bne.n	8009e7c <memcpy+0xc>
 8009e7a:	4770      	bx	lr
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e86:	4291      	cmp	r1, r2
 8009e88:	d1f9      	bne.n	8009e7e <memcpy+0xe>
 8009e8a:	bd10      	pop	{r4, pc}
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <nan>:
 8009e90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e98 <nan+0x8>
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	7ff80000 	.word	0x7ff80000

08009ea0 <abort>:
 8009ea0:	b508      	push	{r3, lr}
 8009ea2:	2006      	movs	r0, #6
 8009ea4:	f000 fd9a 	bl	800a9dc <raise>
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f7f7 fea3 	bl	8001bf4 <_exit>

08009eae <_calloc_r>:
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	fba1 5402 	umull	r5, r4, r1, r2
 8009eb4:	b934      	cbnz	r4, 8009ec4 <_calloc_r+0x16>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7fe f9ce 	bl	8008258 <_malloc_r>
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	b928      	cbnz	r0, 8009ecc <_calloc_r+0x1e>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	220c      	movs	r2, #12
 8009ec6:	6002      	str	r2, [r0, #0]
 8009ec8:	2600      	movs	r6, #0
 8009eca:	e7f9      	b.n	8009ec0 <_calloc_r+0x12>
 8009ecc:	462a      	mov	r2, r5
 8009ece:	4621      	mov	r1, r4
 8009ed0:	f7fd f9f5 	bl	80072be <memset>
 8009ed4:	e7f4      	b.n	8009ec0 <_calloc_r+0x12>

08009ed6 <rshift>:
 8009ed6:	6903      	ldr	r3, [r0, #16]
 8009ed8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ee0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ee4:	f100 0414 	add.w	r4, r0, #20
 8009ee8:	dd45      	ble.n	8009f76 <rshift+0xa0>
 8009eea:	f011 011f 	ands.w	r1, r1, #31
 8009eee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ef2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ef6:	d10c      	bne.n	8009f12 <rshift+0x3c>
 8009ef8:	f100 0710 	add.w	r7, r0, #16
 8009efc:	4629      	mov	r1, r5
 8009efe:	42b1      	cmp	r1, r6
 8009f00:	d334      	bcc.n	8009f6c <rshift+0x96>
 8009f02:	1a9b      	subs	r3, r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	1eea      	subs	r2, r5, #3
 8009f08:	4296      	cmp	r6, r2
 8009f0a:	bf38      	it	cc
 8009f0c:	2300      	movcc	r3, #0
 8009f0e:	4423      	add	r3, r4
 8009f10:	e015      	b.n	8009f3e <rshift+0x68>
 8009f12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f16:	f1c1 0820 	rsb	r8, r1, #32
 8009f1a:	40cf      	lsrs	r7, r1
 8009f1c:	f105 0e04 	add.w	lr, r5, #4
 8009f20:	46a1      	mov	r9, r4
 8009f22:	4576      	cmp	r6, lr
 8009f24:	46f4      	mov	ip, lr
 8009f26:	d815      	bhi.n	8009f54 <rshift+0x7e>
 8009f28:	1a9a      	subs	r2, r3, r2
 8009f2a:	0092      	lsls	r2, r2, #2
 8009f2c:	3a04      	subs	r2, #4
 8009f2e:	3501      	adds	r5, #1
 8009f30:	42ae      	cmp	r6, r5
 8009f32:	bf38      	it	cc
 8009f34:	2200      	movcc	r2, #0
 8009f36:	18a3      	adds	r3, r4, r2
 8009f38:	50a7      	str	r7, [r4, r2]
 8009f3a:	b107      	cbz	r7, 8009f3e <rshift+0x68>
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	1b1a      	subs	r2, r3, r4
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f46:	bf08      	it	eq
 8009f48:	2300      	moveq	r3, #0
 8009f4a:	6102      	str	r2, [r0, #16]
 8009f4c:	bf08      	it	eq
 8009f4e:	6143      	streq	r3, [r0, #20]
 8009f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f54:	f8dc c000 	ldr.w	ip, [ip]
 8009f58:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f5c:	ea4c 0707 	orr.w	r7, ip, r7
 8009f60:	f849 7b04 	str.w	r7, [r9], #4
 8009f64:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f68:	40cf      	lsrs	r7, r1
 8009f6a:	e7da      	b.n	8009f22 <rshift+0x4c>
 8009f6c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f70:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f74:	e7c3      	b.n	8009efe <rshift+0x28>
 8009f76:	4623      	mov	r3, r4
 8009f78:	e7e1      	b.n	8009f3e <rshift+0x68>

08009f7a <__hexdig_fun>:
 8009f7a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d802      	bhi.n	8009f88 <__hexdig_fun+0xe>
 8009f82:	3820      	subs	r0, #32
 8009f84:	b2c0      	uxtb	r0, r0
 8009f86:	4770      	bx	lr
 8009f88:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f8c:	2b05      	cmp	r3, #5
 8009f8e:	d801      	bhi.n	8009f94 <__hexdig_fun+0x1a>
 8009f90:	3847      	subs	r0, #71	@ 0x47
 8009f92:	e7f7      	b.n	8009f84 <__hexdig_fun+0xa>
 8009f94:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	d801      	bhi.n	8009fa0 <__hexdig_fun+0x26>
 8009f9c:	3827      	subs	r0, #39	@ 0x27
 8009f9e:	e7f1      	b.n	8009f84 <__hexdig_fun+0xa>
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4770      	bx	lr

08009fa4 <__gethex>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	468a      	mov	sl, r1
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	680b      	ldr	r3, [r1, #0]
 8009fb0:	9001      	str	r0, [sp, #4]
 8009fb2:	4690      	mov	r8, r2
 8009fb4:	1c9c      	adds	r4, r3, #2
 8009fb6:	46a1      	mov	r9, r4
 8009fb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009fbc:	2830      	cmp	r0, #48	@ 0x30
 8009fbe:	d0fa      	beq.n	8009fb6 <__gethex+0x12>
 8009fc0:	eba9 0303 	sub.w	r3, r9, r3
 8009fc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fc8:	f7ff ffd7 	bl	8009f7a <__hexdig_fun>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d168      	bne.n	800a0a4 <__gethex+0x100>
 8009fd2:	49a0      	ldr	r1, [pc, #640]	@ (800a254 <__gethex+0x2b0>)
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f7ff ff28 	bl	8009e2c <strncmp>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d167      	bne.n	800a0b2 <__gethex+0x10e>
 8009fe2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fe6:	4626      	mov	r6, r4
 8009fe8:	f7ff ffc7 	bl	8009f7a <__hexdig_fun>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d062      	beq.n	800a0b6 <__gethex+0x112>
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	7818      	ldrb	r0, [r3, #0]
 8009ff4:	2830      	cmp	r0, #48	@ 0x30
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	f103 0301 	add.w	r3, r3, #1
 8009ffc:	d0f9      	beq.n	8009ff2 <__gethex+0x4e>
 8009ffe:	f7ff ffbc 	bl	8009f7a <__hexdig_fun>
 800a002:	fab0 f580 	clz	r5, r0
 800a006:	096d      	lsrs	r5, r5, #5
 800a008:	f04f 0b01 	mov.w	fp, #1
 800a00c:	464a      	mov	r2, r9
 800a00e:	4616      	mov	r6, r2
 800a010:	3201      	adds	r2, #1
 800a012:	7830      	ldrb	r0, [r6, #0]
 800a014:	f7ff ffb1 	bl	8009f7a <__hexdig_fun>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1f8      	bne.n	800a00e <__gethex+0x6a>
 800a01c:	498d      	ldr	r1, [pc, #564]	@ (800a254 <__gethex+0x2b0>)
 800a01e:	2201      	movs	r2, #1
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff ff03 	bl	8009e2c <strncmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	d13f      	bne.n	800a0aa <__gethex+0x106>
 800a02a:	b944      	cbnz	r4, 800a03e <__gethex+0x9a>
 800a02c:	1c74      	adds	r4, r6, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4616      	mov	r6, r2
 800a032:	3201      	adds	r2, #1
 800a034:	7830      	ldrb	r0, [r6, #0]
 800a036:	f7ff ffa0 	bl	8009f7a <__hexdig_fun>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d1f8      	bne.n	800a030 <__gethex+0x8c>
 800a03e:	1ba4      	subs	r4, r4, r6
 800a040:	00a7      	lsls	r7, r4, #2
 800a042:	7833      	ldrb	r3, [r6, #0]
 800a044:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a048:	2b50      	cmp	r3, #80	@ 0x50
 800a04a:	d13e      	bne.n	800a0ca <__gethex+0x126>
 800a04c:	7873      	ldrb	r3, [r6, #1]
 800a04e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a050:	d033      	beq.n	800a0ba <__gethex+0x116>
 800a052:	2b2d      	cmp	r3, #45	@ 0x2d
 800a054:	d034      	beq.n	800a0c0 <__gethex+0x11c>
 800a056:	1c71      	adds	r1, r6, #1
 800a058:	2400      	movs	r4, #0
 800a05a:	7808      	ldrb	r0, [r1, #0]
 800a05c:	f7ff ff8d 	bl	8009f7a <__hexdig_fun>
 800a060:	1e43      	subs	r3, r0, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b18      	cmp	r3, #24
 800a066:	d830      	bhi.n	800a0ca <__gethex+0x126>
 800a068:	f1a0 0210 	sub.w	r2, r0, #16
 800a06c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a070:	f7ff ff83 	bl	8009f7a <__hexdig_fun>
 800a074:	f100 3cff 	add.w	ip, r0, #4294967295
 800a078:	fa5f fc8c 	uxtb.w	ip, ip
 800a07c:	f1bc 0f18 	cmp.w	ip, #24
 800a080:	f04f 030a 	mov.w	r3, #10
 800a084:	d91e      	bls.n	800a0c4 <__gethex+0x120>
 800a086:	b104      	cbz	r4, 800a08a <__gethex+0xe6>
 800a088:	4252      	negs	r2, r2
 800a08a:	4417      	add	r7, r2
 800a08c:	f8ca 1000 	str.w	r1, [sl]
 800a090:	b1ed      	cbz	r5, 800a0ce <__gethex+0x12a>
 800a092:	f1bb 0f00 	cmp.w	fp, #0
 800a096:	bf0c      	ite	eq
 800a098:	2506      	moveq	r5, #6
 800a09a:	2500      	movne	r5, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	b005      	add	sp, #20
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a4:	2500      	movs	r5, #0
 800a0a6:	462c      	mov	r4, r5
 800a0a8:	e7b0      	b.n	800a00c <__gethex+0x68>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1c7      	bne.n	800a03e <__gethex+0x9a>
 800a0ae:	4627      	mov	r7, r4
 800a0b0:	e7c7      	b.n	800a042 <__gethex+0x9e>
 800a0b2:	464e      	mov	r6, r9
 800a0b4:	462f      	mov	r7, r5
 800a0b6:	2501      	movs	r5, #1
 800a0b8:	e7c3      	b.n	800a042 <__gethex+0x9e>
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	1cb1      	adds	r1, r6, #2
 800a0be:	e7cc      	b.n	800a05a <__gethex+0xb6>
 800a0c0:	2401      	movs	r4, #1
 800a0c2:	e7fb      	b.n	800a0bc <__gethex+0x118>
 800a0c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0c8:	e7ce      	b.n	800a068 <__gethex+0xc4>
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	e7de      	b.n	800a08c <__gethex+0xe8>
 800a0ce:	eba6 0309 	sub.w	r3, r6, r9
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	2b07      	cmp	r3, #7
 800a0d8:	dc0a      	bgt.n	800a0f0 <__gethex+0x14c>
 800a0da:	9801      	ldr	r0, [sp, #4]
 800a0dc:	f7fe f948 	bl	8008370 <_Balloc>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	b940      	cbnz	r0, 800a0f6 <__gethex+0x152>
 800a0e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a258 <__gethex+0x2b4>)
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	21e4      	movs	r1, #228	@ 0xe4
 800a0ea:	485c      	ldr	r0, [pc, #368]	@ (800a25c <__gethex+0x2b8>)
 800a0ec:	f7fd f9ca 	bl	8007484 <__assert_func>
 800a0f0:	3101      	adds	r1, #1
 800a0f2:	105b      	asrs	r3, r3, #1
 800a0f4:	e7ef      	b.n	800a0d6 <__gethex+0x132>
 800a0f6:	f100 0a14 	add.w	sl, r0, #20
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4655      	mov	r5, sl
 800a0fe:	469b      	mov	fp, r3
 800a100:	45b1      	cmp	r9, r6
 800a102:	d337      	bcc.n	800a174 <__gethex+0x1d0>
 800a104:	f845 bb04 	str.w	fp, [r5], #4
 800a108:	eba5 050a 	sub.w	r5, r5, sl
 800a10c:	10ad      	asrs	r5, r5, #2
 800a10e:	6125      	str	r5, [r4, #16]
 800a110:	4658      	mov	r0, fp
 800a112:	f7fe fa1f 	bl	8008554 <__hi0bits>
 800a116:	016d      	lsls	r5, r5, #5
 800a118:	f8d8 6000 	ldr.w	r6, [r8]
 800a11c:	1a2d      	subs	r5, r5, r0
 800a11e:	42b5      	cmp	r5, r6
 800a120:	dd54      	ble.n	800a1cc <__gethex+0x228>
 800a122:	1bad      	subs	r5, r5, r6
 800a124:	4629      	mov	r1, r5
 800a126:	4620      	mov	r0, r4
 800a128:	f7fe fdab 	bl	8008c82 <__any_on>
 800a12c:	4681      	mov	r9, r0
 800a12e:	b178      	cbz	r0, 800a150 <__gethex+0x1ac>
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	1159      	asrs	r1, r3, #5
 800a134:	f003 021f 	and.w	r2, r3, #31
 800a138:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a13c:	f04f 0901 	mov.w	r9, #1
 800a140:	fa09 f202 	lsl.w	r2, r9, r2
 800a144:	420a      	tst	r2, r1
 800a146:	d003      	beq.n	800a150 <__gethex+0x1ac>
 800a148:	454b      	cmp	r3, r9
 800a14a:	dc36      	bgt.n	800a1ba <__gethex+0x216>
 800a14c:	f04f 0902 	mov.w	r9, #2
 800a150:	4629      	mov	r1, r5
 800a152:	4620      	mov	r0, r4
 800a154:	f7ff febf 	bl	8009ed6 <rshift>
 800a158:	442f      	add	r7, r5
 800a15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15e:	42bb      	cmp	r3, r7
 800a160:	da42      	bge.n	800a1e8 <__gethex+0x244>
 800a162:	9801      	ldr	r0, [sp, #4]
 800a164:	4621      	mov	r1, r4
 800a166:	f7fe f943 	bl	80083f0 <_Bfree>
 800a16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a16c:	2300      	movs	r3, #0
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	25a3      	movs	r5, #163	@ 0xa3
 800a172:	e793      	b.n	800a09c <__gethex+0xf8>
 800a174:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a178:	2a2e      	cmp	r2, #46	@ 0x2e
 800a17a:	d012      	beq.n	800a1a2 <__gethex+0x1fe>
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d104      	bne.n	800a18a <__gethex+0x1e6>
 800a180:	f845 bb04 	str.w	fp, [r5], #4
 800a184:	f04f 0b00 	mov.w	fp, #0
 800a188:	465b      	mov	r3, fp
 800a18a:	7830      	ldrb	r0, [r6, #0]
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	f7ff fef4 	bl	8009f7a <__hexdig_fun>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	f000 000f 	and.w	r0, r0, #15
 800a198:	4098      	lsls	r0, r3
 800a19a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a19e:	3304      	adds	r3, #4
 800a1a0:	e7ae      	b.n	800a100 <__gethex+0x15c>
 800a1a2:	45b1      	cmp	r9, r6
 800a1a4:	d8ea      	bhi.n	800a17c <__gethex+0x1d8>
 800a1a6:	492b      	ldr	r1, [pc, #172]	@ (800a254 <__gethex+0x2b0>)
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fe3d 	bl	8009e2c <strncmp>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1e1      	bne.n	800a17c <__gethex+0x1d8>
 800a1b8:	e7a2      	b.n	800a100 <__gethex+0x15c>
 800a1ba:	1ea9      	subs	r1, r5, #2
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fe fd60 	bl	8008c82 <__any_on>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0c2      	beq.n	800a14c <__gethex+0x1a8>
 800a1c6:	f04f 0903 	mov.w	r9, #3
 800a1ca:	e7c1      	b.n	800a150 <__gethex+0x1ac>
 800a1cc:	da09      	bge.n	800a1e2 <__gethex+0x23e>
 800a1ce:	1b75      	subs	r5, r6, r5
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	9801      	ldr	r0, [sp, #4]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	f7fe fb1b 	bl	8008810 <__lshift>
 800a1da:	1b7f      	subs	r7, r7, r5
 800a1dc:	4604      	mov	r4, r0
 800a1de:	f100 0a14 	add.w	sl, r0, #20
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	e7b8      	b.n	800a15a <__gethex+0x1b6>
 800a1e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1ec:	42bd      	cmp	r5, r7
 800a1ee:	dd6f      	ble.n	800a2d0 <__gethex+0x32c>
 800a1f0:	1bed      	subs	r5, r5, r7
 800a1f2:	42ae      	cmp	r6, r5
 800a1f4:	dc34      	bgt.n	800a260 <__gethex+0x2bc>
 800a1f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d022      	beq.n	800a244 <__gethex+0x2a0>
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d024      	beq.n	800a24c <__gethex+0x2a8>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d115      	bne.n	800a232 <__gethex+0x28e>
 800a206:	42ae      	cmp	r6, r5
 800a208:	d113      	bne.n	800a232 <__gethex+0x28e>
 800a20a:	2e01      	cmp	r6, #1
 800a20c:	d10b      	bne.n	800a226 <__gethex+0x282>
 800a20e:	9a02      	ldr	r2, [sp, #8]
 800a210:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	2301      	movs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f8ca 3000 	str.w	r3, [sl]
 800a21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a220:	2562      	movs	r5, #98	@ 0x62
 800a222:	601c      	str	r4, [r3, #0]
 800a224:	e73a      	b.n	800a09c <__gethex+0xf8>
 800a226:	1e71      	subs	r1, r6, #1
 800a228:	4620      	mov	r0, r4
 800a22a:	f7fe fd2a 	bl	8008c82 <__any_on>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d1ed      	bne.n	800a20e <__gethex+0x26a>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	4621      	mov	r1, r4
 800a236:	f7fe f8db 	bl	80083f0 <_Bfree>
 800a23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a23c:	2300      	movs	r3, #0
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	2550      	movs	r5, #80	@ 0x50
 800a242:	e72b      	b.n	800a09c <__gethex+0xf8>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f3      	bne.n	800a232 <__gethex+0x28e>
 800a24a:	e7e0      	b.n	800a20e <__gethex+0x26a>
 800a24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1dd      	bne.n	800a20e <__gethex+0x26a>
 800a252:	e7ee      	b.n	800a232 <__gethex+0x28e>
 800a254:	0800ad45 	.word	0x0800ad45
 800a258:	0800acdb 	.word	0x0800acdb
 800a25c:	0800ad60 	.word	0x0800ad60
 800a260:	1e6f      	subs	r7, r5, #1
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d130      	bne.n	800a2ca <__gethex+0x326>
 800a268:	b127      	cbz	r7, 800a274 <__gethex+0x2d0>
 800a26a:	4639      	mov	r1, r7
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7fe fd08 	bl	8008c82 <__any_on>
 800a272:	4681      	mov	r9, r0
 800a274:	117a      	asrs	r2, r7, #5
 800a276:	2301      	movs	r3, #1
 800a278:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a27c:	f007 071f 	and.w	r7, r7, #31
 800a280:	40bb      	lsls	r3, r7
 800a282:	4213      	tst	r3, r2
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	bf18      	it	ne
 800a28a:	f049 0902 	orrne.w	r9, r9, #2
 800a28e:	f7ff fe22 	bl	8009ed6 <rshift>
 800a292:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a296:	1b76      	subs	r6, r6, r5
 800a298:	2502      	movs	r5, #2
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d047      	beq.n	800a330 <__gethex+0x38c>
 800a2a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d015      	beq.n	800a2d4 <__gethex+0x330>
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d017      	beq.n	800a2dc <__gethex+0x338>
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d109      	bne.n	800a2c4 <__gethex+0x320>
 800a2b0:	f019 0f02 	tst.w	r9, #2
 800a2b4:	d006      	beq.n	800a2c4 <__gethex+0x320>
 800a2b6:	f8da 3000 	ldr.w	r3, [sl]
 800a2ba:	ea49 0903 	orr.w	r9, r9, r3
 800a2be:	f019 0f01 	tst.w	r9, #1
 800a2c2:	d10e      	bne.n	800a2e2 <__gethex+0x33e>
 800a2c4:	f045 0510 	orr.w	r5, r5, #16
 800a2c8:	e032      	b.n	800a330 <__gethex+0x38c>
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	e7d1      	b.n	800a274 <__gethex+0x2d0>
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	e7e2      	b.n	800a29a <__gethex+0x2f6>
 800a2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2d6:	f1c3 0301 	rsb	r3, r3, #1
 800a2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f0      	beq.n	800a2c4 <__gethex+0x320>
 800a2e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2e6:	f104 0314 	add.w	r3, r4, #20
 800a2ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2f2:	f04f 0c00 	mov.w	ip, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a300:	d01b      	beq.n	800a33a <__gethex+0x396>
 800a302:	3201      	adds	r2, #1
 800a304:	6002      	str	r2, [r0, #0]
 800a306:	2d02      	cmp	r5, #2
 800a308:	f104 0314 	add.w	r3, r4, #20
 800a30c:	d13c      	bne.n	800a388 <__gethex+0x3e4>
 800a30e:	f8d8 2000 	ldr.w	r2, [r8]
 800a312:	3a01      	subs	r2, #1
 800a314:	42b2      	cmp	r2, r6
 800a316:	d109      	bne.n	800a32c <__gethex+0x388>
 800a318:	1171      	asrs	r1, r6, #5
 800a31a:	2201      	movs	r2, #1
 800a31c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a320:	f006 061f 	and.w	r6, r6, #31
 800a324:	fa02 f606 	lsl.w	r6, r2, r6
 800a328:	421e      	tst	r6, r3
 800a32a:	d13a      	bne.n	800a3a2 <__gethex+0x3fe>
 800a32c:	f045 0520 	orr.w	r5, r5, #32
 800a330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	601f      	str	r7, [r3, #0]
 800a338:	e6b0      	b.n	800a09c <__gethex+0xf8>
 800a33a:	4299      	cmp	r1, r3
 800a33c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a340:	d8d9      	bhi.n	800a2f6 <__gethex+0x352>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	459b      	cmp	fp, r3
 800a346:	db17      	blt.n	800a378 <__gethex+0x3d4>
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	9801      	ldr	r0, [sp, #4]
 800a34c:	3101      	adds	r1, #1
 800a34e:	f7fe f80f 	bl	8008370 <_Balloc>
 800a352:	4681      	mov	r9, r0
 800a354:	b918      	cbnz	r0, 800a35e <__gethex+0x3ba>
 800a356:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <__gethex+0x41c>)
 800a358:	4602      	mov	r2, r0
 800a35a:	2184      	movs	r1, #132	@ 0x84
 800a35c:	e6c5      	b.n	800a0ea <__gethex+0x146>
 800a35e:	6922      	ldr	r2, [r4, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	f104 010c 	add.w	r1, r4, #12
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff fd81 	bl	8009e70 <memcpy>
 800a36e:	4621      	mov	r1, r4
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	f7fe f83d 	bl	80083f0 <_Bfree>
 800a376:	464c      	mov	r4, r9
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a380:	6122      	str	r2, [r4, #16]
 800a382:	2201      	movs	r2, #1
 800a384:	615a      	str	r2, [r3, #20]
 800a386:	e7be      	b.n	800a306 <__gethex+0x362>
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	455a      	cmp	r2, fp
 800a38c:	dd0b      	ble.n	800a3a6 <__gethex+0x402>
 800a38e:	2101      	movs	r1, #1
 800a390:	4620      	mov	r0, r4
 800a392:	f7ff fda0 	bl	8009ed6 <rshift>
 800a396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a39a:	3701      	adds	r7, #1
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	f6ff aee0 	blt.w	800a162 <__gethex+0x1be>
 800a3a2:	2501      	movs	r5, #1
 800a3a4:	e7c2      	b.n	800a32c <__gethex+0x388>
 800a3a6:	f016 061f 	ands.w	r6, r6, #31
 800a3aa:	d0fa      	beq.n	800a3a2 <__gethex+0x3fe>
 800a3ac:	4453      	add	r3, sl
 800a3ae:	f1c6 0620 	rsb	r6, r6, #32
 800a3b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3b6:	f7fe f8cd 	bl	8008554 <__hi0bits>
 800a3ba:	42b0      	cmp	r0, r6
 800a3bc:	dbe7      	blt.n	800a38e <__gethex+0x3ea>
 800a3be:	e7f0      	b.n	800a3a2 <__gethex+0x3fe>
 800a3c0:	0800acdb 	.word	0x0800acdb

0800a3c4 <L_shift>:
 800a3c4:	f1c2 0208 	rsb	r2, r2, #8
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	f1c2 0620 	rsb	r6, r2, #32
 800a3d0:	6843      	ldr	r3, [r0, #4]
 800a3d2:	6804      	ldr	r4, [r0, #0]
 800a3d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3d8:	432c      	orrs	r4, r5
 800a3da:	40d3      	lsrs	r3, r2
 800a3dc:	6004      	str	r4, [r0, #0]
 800a3de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3e2:	4288      	cmp	r0, r1
 800a3e4:	d3f4      	bcc.n	800a3d0 <L_shift+0xc>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}

0800a3e8 <__match>:
 800a3e8:	b530      	push	{r4, r5, lr}
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f2:	b914      	cbnz	r4, 800a3fa <__match+0x12>
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	bd30      	pop	{r4, r5, pc}
 800a3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a402:	2d19      	cmp	r5, #25
 800a404:	bf98      	it	ls
 800a406:	3220      	addls	r2, #32
 800a408:	42a2      	cmp	r2, r4
 800a40a:	d0f0      	beq.n	800a3ee <__match+0x6>
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7f3      	b.n	800a3f8 <__match+0x10>

0800a410 <__hexnan>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	6801      	ldr	r1, [r0, #0]
 800a418:	115e      	asrs	r6, r3, #5
 800a41a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a41e:	f013 031f 	ands.w	r3, r3, #31
 800a422:	b087      	sub	sp, #28
 800a424:	bf18      	it	ne
 800a426:	3604      	addne	r6, #4
 800a428:	2500      	movs	r5, #0
 800a42a:	1f37      	subs	r7, r6, #4
 800a42c:	4682      	mov	sl, r0
 800a42e:	4690      	mov	r8, r2
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	f846 5c04 	str.w	r5, [r6, #-4]
 800a436:	46b9      	mov	r9, r7
 800a438:	463c      	mov	r4, r7
 800a43a:	9502      	str	r5, [sp, #8]
 800a43c:	46ab      	mov	fp, r5
 800a43e:	784a      	ldrb	r2, [r1, #1]
 800a440:	1c4b      	adds	r3, r1, #1
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	b342      	cbz	r2, 800a498 <__hexnan+0x88>
 800a446:	4610      	mov	r0, r2
 800a448:	9105      	str	r1, [sp, #20]
 800a44a:	9204      	str	r2, [sp, #16]
 800a44c:	f7ff fd95 	bl	8009f7a <__hexdig_fun>
 800a450:	2800      	cmp	r0, #0
 800a452:	d151      	bne.n	800a4f8 <__hexnan+0xe8>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	9905      	ldr	r1, [sp, #20]
 800a458:	2a20      	cmp	r2, #32
 800a45a:	d818      	bhi.n	800a48e <__hexnan+0x7e>
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	459b      	cmp	fp, r3
 800a460:	dd13      	ble.n	800a48a <__hexnan+0x7a>
 800a462:	454c      	cmp	r4, r9
 800a464:	d206      	bcs.n	800a474 <__hexnan+0x64>
 800a466:	2d07      	cmp	r5, #7
 800a468:	dc04      	bgt.n	800a474 <__hexnan+0x64>
 800a46a:	462a      	mov	r2, r5
 800a46c:	4649      	mov	r1, r9
 800a46e:	4620      	mov	r0, r4
 800a470:	f7ff ffa8 	bl	800a3c4 <L_shift>
 800a474:	4544      	cmp	r4, r8
 800a476:	d952      	bls.n	800a51e <__hexnan+0x10e>
 800a478:	2300      	movs	r3, #0
 800a47a:	f1a4 0904 	sub.w	r9, r4, #4
 800a47e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a482:	f8cd b008 	str.w	fp, [sp, #8]
 800a486:	464c      	mov	r4, r9
 800a488:	461d      	mov	r5, r3
 800a48a:	9903      	ldr	r1, [sp, #12]
 800a48c:	e7d7      	b.n	800a43e <__hexnan+0x2e>
 800a48e:	2a29      	cmp	r2, #41	@ 0x29
 800a490:	d157      	bne.n	800a542 <__hexnan+0x132>
 800a492:	3102      	adds	r1, #2
 800a494:	f8ca 1000 	str.w	r1, [sl]
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	d051      	beq.n	800a542 <__hexnan+0x132>
 800a49e:	454c      	cmp	r4, r9
 800a4a0:	d206      	bcs.n	800a4b0 <__hexnan+0xa0>
 800a4a2:	2d07      	cmp	r5, #7
 800a4a4:	dc04      	bgt.n	800a4b0 <__hexnan+0xa0>
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff ff8a 	bl	800a3c4 <L_shift>
 800a4b0:	4544      	cmp	r4, r8
 800a4b2:	d936      	bls.n	800a522 <__hexnan+0x112>
 800a4b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4c2:	429f      	cmp	r7, r3
 800a4c4:	d2f9      	bcs.n	800a4ba <__hexnan+0xaa>
 800a4c6:	1b3b      	subs	r3, r7, r4
 800a4c8:	f023 0303 	bic.w	r3, r3, #3
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	3e03      	subs	r6, #3
 800a4d2:	42b4      	cmp	r4, r6
 800a4d4:	bf88      	it	hi
 800a4d6:	2304      	movhi	r3, #4
 800a4d8:	4443      	add	r3, r8
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f843 2b04 	str.w	r2, [r3], #4
 800a4e0:	429f      	cmp	r7, r3
 800a4e2:	d2fb      	bcs.n	800a4dc <__hexnan+0xcc>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	b91b      	cbnz	r3, 800a4f0 <__hexnan+0xe0>
 800a4e8:	4547      	cmp	r7, r8
 800a4ea:	d128      	bne.n	800a53e <__hexnan+0x12e>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2005      	movs	r0, #5
 800a4f2:	b007      	add	sp, #28
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	2d08      	cmp	r5, #8
 800a4fc:	f10b 0b01 	add.w	fp, fp, #1
 800a500:	dd06      	ble.n	800a510 <__hexnan+0x100>
 800a502:	4544      	cmp	r4, r8
 800a504:	d9c1      	bls.n	800a48a <__hexnan+0x7a>
 800a506:	2300      	movs	r3, #0
 800a508:	f844 3c04 	str.w	r3, [r4, #-4]
 800a50c:	2501      	movs	r5, #1
 800a50e:	3c04      	subs	r4, #4
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	f000 000f 	and.w	r0, r0, #15
 800a516:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a51a:	6020      	str	r0, [r4, #0]
 800a51c:	e7b5      	b.n	800a48a <__hexnan+0x7a>
 800a51e:	2508      	movs	r5, #8
 800a520:	e7b3      	b.n	800a48a <__hexnan+0x7a>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0dd      	beq.n	800a4e4 <__hexnan+0xd4>
 800a528:	f1c3 0320 	rsb	r3, r3, #32
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295
 800a530:	40da      	lsrs	r2, r3
 800a532:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a536:	4013      	ands	r3, r2
 800a538:	f846 3c04 	str.w	r3, [r6, #-4]
 800a53c:	e7d2      	b.n	800a4e4 <__hexnan+0xd4>
 800a53e:	3f04      	subs	r7, #4
 800a540:	e7d0      	b.n	800a4e4 <__hexnan+0xd4>
 800a542:	2004      	movs	r0, #4
 800a544:	e7d5      	b.n	800a4f2 <__hexnan+0xe2>

0800a546 <__ascii_mbtowc>:
 800a546:	b082      	sub	sp, #8
 800a548:	b901      	cbnz	r1, 800a54c <__ascii_mbtowc+0x6>
 800a54a:	a901      	add	r1, sp, #4
 800a54c:	b142      	cbz	r2, 800a560 <__ascii_mbtowc+0x1a>
 800a54e:	b14b      	cbz	r3, 800a564 <__ascii_mbtowc+0x1e>
 800a550:	7813      	ldrb	r3, [r2, #0]
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	1e10      	subs	r0, r2, #0
 800a558:	bf18      	it	ne
 800a55a:	2001      	movne	r0, #1
 800a55c:	b002      	add	sp, #8
 800a55e:	4770      	bx	lr
 800a560:	4610      	mov	r0, r2
 800a562:	e7fb      	b.n	800a55c <__ascii_mbtowc+0x16>
 800a564:	f06f 0001 	mvn.w	r0, #1
 800a568:	e7f8      	b.n	800a55c <__ascii_mbtowc+0x16>

0800a56a <_realloc_r>:
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	4607      	mov	r7, r0
 800a570:	4614      	mov	r4, r2
 800a572:	460d      	mov	r5, r1
 800a574:	b921      	cbnz	r1, 800a580 <_realloc_r+0x16>
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	4611      	mov	r1, r2
 800a57c:	f7fd be6c 	b.w	8008258 <_malloc_r>
 800a580:	b92a      	cbnz	r2, 800a58e <_realloc_r+0x24>
 800a582:	f7fd fdf5 	bl	8008170 <_free_r>
 800a586:	4625      	mov	r5, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58e:	f000 fa41 	bl	800aa14 <_malloc_usable_size_r>
 800a592:	4284      	cmp	r4, r0
 800a594:	4606      	mov	r6, r0
 800a596:	d802      	bhi.n	800a59e <_realloc_r+0x34>
 800a598:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a59c:	d8f4      	bhi.n	800a588 <_realloc_r+0x1e>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7fd fe59 	bl	8008258 <_malloc_r>
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	b908      	cbnz	r0, 800a5ae <_realloc_r+0x44>
 800a5aa:	4645      	mov	r5, r8
 800a5ac:	e7ec      	b.n	800a588 <_realloc_r+0x1e>
 800a5ae:	42b4      	cmp	r4, r6
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	bf28      	it	cs
 800a5b6:	4632      	movcs	r2, r6
 800a5b8:	f7ff fc5a 	bl	8009e70 <memcpy>
 800a5bc:	4629      	mov	r1, r5
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7fd fdd6 	bl	8008170 <_free_r>
 800a5c4:	e7f1      	b.n	800a5aa <_realloc_r+0x40>

0800a5c6 <__ascii_wctomb>:
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	b141      	cbz	r1, 800a5de <__ascii_wctomb+0x18>
 800a5cc:	2aff      	cmp	r2, #255	@ 0xff
 800a5ce:	d904      	bls.n	800a5da <__ascii_wctomb+0x14>
 800a5d0:	228a      	movs	r2, #138	@ 0x8a
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	4770      	bx	lr
 800a5da:	700a      	strb	r2, [r1, #0]
 800a5dc:	2001      	movs	r0, #1
 800a5de:	4770      	bx	lr

0800a5e0 <__sfputc_r>:
 800a5e0:	6893      	ldr	r3, [r2, #8]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	b410      	push	{r4}
 800a5e8:	6093      	str	r3, [r2, #8]
 800a5ea:	da08      	bge.n	800a5fe <__sfputc_r+0x1e>
 800a5ec:	6994      	ldr	r4, [r2, #24]
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	db01      	blt.n	800a5f6 <__sfputc_r+0x16>
 800a5f2:	290a      	cmp	r1, #10
 800a5f4:	d103      	bne.n	800a5fe <__sfputc_r+0x1e>
 800a5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5fa:	f000 b933 	b.w	800a864 <__swbuf_r>
 800a5fe:	6813      	ldr	r3, [r2, #0]
 800a600:	1c58      	adds	r0, r3, #1
 800a602:	6010      	str	r0, [r2, #0]
 800a604:	7019      	strb	r1, [r3, #0]
 800a606:	4608      	mov	r0, r1
 800a608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <__sfputs_r>:
 800a60e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	4614      	mov	r4, r2
 800a616:	18d5      	adds	r5, r2, r3
 800a618:	42ac      	cmp	r4, r5
 800a61a:	d101      	bne.n	800a620 <__sfputs_r+0x12>
 800a61c:	2000      	movs	r0, #0
 800a61e:	e007      	b.n	800a630 <__sfputs_r+0x22>
 800a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a624:	463a      	mov	r2, r7
 800a626:	4630      	mov	r0, r6
 800a628:	f7ff ffda 	bl	800a5e0 <__sfputc_r>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d1f3      	bne.n	800a618 <__sfputs_r+0xa>
 800a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a634 <_vfiprintf_r>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	460d      	mov	r5, r1
 800a63a:	b09d      	sub	sp, #116	@ 0x74
 800a63c:	4614      	mov	r4, r2
 800a63e:	4698      	mov	r8, r3
 800a640:	4606      	mov	r6, r0
 800a642:	b118      	cbz	r0, 800a64c <_vfiprintf_r+0x18>
 800a644:	6a03      	ldr	r3, [r0, #32]
 800a646:	b90b      	cbnz	r3, 800a64c <_vfiprintf_r+0x18>
 800a648:	f7fc fd9e 	bl	8007188 <__sinit>
 800a64c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a64e:	07d9      	lsls	r1, r3, #31
 800a650:	d405      	bmi.n	800a65e <_vfiprintf_r+0x2a>
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	059a      	lsls	r2, r3, #22
 800a656:	d402      	bmi.n	800a65e <_vfiprintf_r+0x2a>
 800a658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a65a:	f7fc ff0a 	bl	8007472 <__retarget_lock_acquire_recursive>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	071b      	lsls	r3, r3, #28
 800a662:	d501      	bpl.n	800a668 <_vfiprintf_r+0x34>
 800a664:	692b      	ldr	r3, [r5, #16]
 800a666:	b99b      	cbnz	r3, 800a690 <_vfiprintf_r+0x5c>
 800a668:	4629      	mov	r1, r5
 800a66a:	4630      	mov	r0, r6
 800a66c:	f000 f938 	bl	800a8e0 <__swsetup_r>
 800a670:	b170      	cbz	r0, 800a690 <_vfiprintf_r+0x5c>
 800a672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a674:	07dc      	lsls	r4, r3, #31
 800a676:	d504      	bpl.n	800a682 <_vfiprintf_r+0x4e>
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	b01d      	add	sp, #116	@ 0x74
 800a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	0598      	lsls	r0, r3, #22
 800a686:	d4f7      	bmi.n	800a678 <_vfiprintf_r+0x44>
 800a688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a68a:	f7fc fef3 	bl	8007474 <__retarget_lock_release_recursive>
 800a68e:	e7f3      	b.n	800a678 <_vfiprintf_r+0x44>
 800a690:	2300      	movs	r3, #0
 800a692:	9309      	str	r3, [sp, #36]	@ 0x24
 800a694:	2320      	movs	r3, #32
 800a696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a69e:	2330      	movs	r3, #48	@ 0x30
 800a6a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a850 <_vfiprintf_r+0x21c>
 800a6a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6a8:	f04f 0901 	mov.w	r9, #1
 800a6ac:	4623      	mov	r3, r4
 800a6ae:	469a      	mov	sl, r3
 800a6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6b4:	b10a      	cbz	r2, 800a6ba <_vfiprintf_r+0x86>
 800a6b6:	2a25      	cmp	r2, #37	@ 0x25
 800a6b8:	d1f9      	bne.n	800a6ae <_vfiprintf_r+0x7a>
 800a6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a6be:	d00b      	beq.n	800a6d8 <_vfiprintf_r+0xa4>
 800a6c0:	465b      	mov	r3, fp
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ffa1 	bl	800a60e <__sfputs_r>
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	f000 80a7 	beq.w	800a820 <_vfiprintf_r+0x1ec>
 800a6d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6d4:	445a      	add	r2, fp
 800a6d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 809f 	beq.w	800a820 <_vfiprintf_r+0x1ec>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ec:	f10a 0a01 	add.w	sl, sl, #1
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	9307      	str	r3, [sp, #28]
 800a6f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6fa:	4654      	mov	r4, sl
 800a6fc:	2205      	movs	r2, #5
 800a6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a702:	4853      	ldr	r0, [pc, #332]	@ (800a850 <_vfiprintf_r+0x21c>)
 800a704:	f7f5 fd64 	bl	80001d0 <memchr>
 800a708:	9a04      	ldr	r2, [sp, #16]
 800a70a:	b9d8      	cbnz	r0, 800a744 <_vfiprintf_r+0x110>
 800a70c:	06d1      	lsls	r1, r2, #27
 800a70e:	bf44      	itt	mi
 800a710:	2320      	movmi	r3, #32
 800a712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a716:	0713      	lsls	r3, r2, #28
 800a718:	bf44      	itt	mi
 800a71a:	232b      	movmi	r3, #43	@ 0x2b
 800a71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a720:	f89a 3000 	ldrb.w	r3, [sl]
 800a724:	2b2a      	cmp	r3, #42	@ 0x2a
 800a726:	d015      	beq.n	800a754 <_vfiprintf_r+0x120>
 800a728:	9a07      	ldr	r2, [sp, #28]
 800a72a:	4654      	mov	r4, sl
 800a72c:	2000      	movs	r0, #0
 800a72e:	f04f 0c0a 	mov.w	ip, #10
 800a732:	4621      	mov	r1, r4
 800a734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a738:	3b30      	subs	r3, #48	@ 0x30
 800a73a:	2b09      	cmp	r3, #9
 800a73c:	d94b      	bls.n	800a7d6 <_vfiprintf_r+0x1a2>
 800a73e:	b1b0      	cbz	r0, 800a76e <_vfiprintf_r+0x13a>
 800a740:	9207      	str	r2, [sp, #28]
 800a742:	e014      	b.n	800a76e <_vfiprintf_r+0x13a>
 800a744:	eba0 0308 	sub.w	r3, r0, r8
 800a748:	fa09 f303 	lsl.w	r3, r9, r3
 800a74c:	4313      	orrs	r3, r2
 800a74e:	9304      	str	r3, [sp, #16]
 800a750:	46a2      	mov	sl, r4
 800a752:	e7d2      	b.n	800a6fa <_vfiprintf_r+0xc6>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	1d19      	adds	r1, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	9103      	str	r1, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfbb      	ittet	lt
 800a760:	425b      	neglt	r3, r3
 800a762:	f042 0202 	orrlt.w	r2, r2, #2
 800a766:	9307      	strge	r3, [sp, #28]
 800a768:	9307      	strlt	r3, [sp, #28]
 800a76a:	bfb8      	it	lt
 800a76c:	9204      	strlt	r2, [sp, #16]
 800a76e:	7823      	ldrb	r3, [r4, #0]
 800a770:	2b2e      	cmp	r3, #46	@ 0x2e
 800a772:	d10a      	bne.n	800a78a <_vfiprintf_r+0x156>
 800a774:	7863      	ldrb	r3, [r4, #1]
 800a776:	2b2a      	cmp	r3, #42	@ 0x2a
 800a778:	d132      	bne.n	800a7e0 <_vfiprintf_r+0x1ac>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	1d1a      	adds	r2, r3, #4
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	9203      	str	r2, [sp, #12]
 800a782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a786:	3402      	adds	r4, #2
 800a788:	9305      	str	r3, [sp, #20]
 800a78a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a860 <_vfiprintf_r+0x22c>
 800a78e:	7821      	ldrb	r1, [r4, #0]
 800a790:	2203      	movs	r2, #3
 800a792:	4650      	mov	r0, sl
 800a794:	f7f5 fd1c 	bl	80001d0 <memchr>
 800a798:	b138      	cbz	r0, 800a7aa <_vfiprintf_r+0x176>
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	eba0 000a 	sub.w	r0, r0, sl
 800a7a0:	2240      	movs	r2, #64	@ 0x40
 800a7a2:	4082      	lsls	r2, r0
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	3401      	adds	r4, #1
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ae:	4829      	ldr	r0, [pc, #164]	@ (800a854 <_vfiprintf_r+0x220>)
 800a7b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7b4:	2206      	movs	r2, #6
 800a7b6:	f7f5 fd0b 	bl	80001d0 <memchr>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d03f      	beq.n	800a83e <_vfiprintf_r+0x20a>
 800a7be:	4b26      	ldr	r3, [pc, #152]	@ (800a858 <_vfiprintf_r+0x224>)
 800a7c0:	bb1b      	cbnz	r3, 800a80a <_vfiprintf_r+0x1d6>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	3307      	adds	r3, #7
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	9303      	str	r3, [sp, #12]
 800a7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d0:	443b      	add	r3, r7
 800a7d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d4:	e76a      	b.n	800a6ac <_vfiprintf_r+0x78>
 800a7d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7da:	460c      	mov	r4, r1
 800a7dc:	2001      	movs	r0, #1
 800a7de:	e7a8      	b.n	800a732 <_vfiprintf_r+0xfe>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	3401      	adds	r4, #1
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	f04f 0c0a 	mov.w	ip, #10
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7f2:	3a30      	subs	r2, #48	@ 0x30
 800a7f4:	2a09      	cmp	r2, #9
 800a7f6:	d903      	bls.n	800a800 <_vfiprintf_r+0x1cc>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0c6      	beq.n	800a78a <_vfiprintf_r+0x156>
 800a7fc:	9105      	str	r1, [sp, #20]
 800a7fe:	e7c4      	b.n	800a78a <_vfiprintf_r+0x156>
 800a800:	fb0c 2101 	mla	r1, ip, r1, r2
 800a804:	4604      	mov	r4, r0
 800a806:	2301      	movs	r3, #1
 800a808:	e7f0      	b.n	800a7ec <_vfiprintf_r+0x1b8>
 800a80a:	ab03      	add	r3, sp, #12
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	462a      	mov	r2, r5
 800a810:	4b12      	ldr	r3, [pc, #72]	@ (800a85c <_vfiprintf_r+0x228>)
 800a812:	a904      	add	r1, sp, #16
 800a814:	4630      	mov	r0, r6
 800a816:	f7fb fe67 	bl	80064e8 <_printf_float>
 800a81a:	4607      	mov	r7, r0
 800a81c:	1c78      	adds	r0, r7, #1
 800a81e:	d1d6      	bne.n	800a7ce <_vfiprintf_r+0x19a>
 800a820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a822:	07d9      	lsls	r1, r3, #31
 800a824:	d405      	bmi.n	800a832 <_vfiprintf_r+0x1fe>
 800a826:	89ab      	ldrh	r3, [r5, #12]
 800a828:	059a      	lsls	r2, r3, #22
 800a82a:	d402      	bmi.n	800a832 <_vfiprintf_r+0x1fe>
 800a82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a82e:	f7fc fe21 	bl	8007474 <__retarget_lock_release_recursive>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	065b      	lsls	r3, r3, #25
 800a836:	f53f af1f 	bmi.w	800a678 <_vfiprintf_r+0x44>
 800a83a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a83c:	e71e      	b.n	800a67c <_vfiprintf_r+0x48>
 800a83e:	ab03      	add	r3, sp, #12
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	462a      	mov	r2, r5
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <_vfiprintf_r+0x228>)
 800a846:	a904      	add	r1, sp, #16
 800a848:	4630      	mov	r0, r6
 800a84a:	f7fc f8e5 	bl	8006a18 <_printf_i>
 800a84e:	e7e4      	b.n	800a81a <_vfiprintf_r+0x1e6>
 800a850:	0800ad47 	.word	0x0800ad47
 800a854:	0800ad51 	.word	0x0800ad51
 800a858:	080064e9 	.word	0x080064e9
 800a85c:	0800a60f 	.word	0x0800a60f
 800a860:	0800ad4d 	.word	0x0800ad4d

0800a864 <__swbuf_r>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	460e      	mov	r6, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	4605      	mov	r5, r0
 800a86c:	b118      	cbz	r0, 800a876 <__swbuf_r+0x12>
 800a86e:	6a03      	ldr	r3, [r0, #32]
 800a870:	b90b      	cbnz	r3, 800a876 <__swbuf_r+0x12>
 800a872:	f7fc fc89 	bl	8007188 <__sinit>
 800a876:	69a3      	ldr	r3, [r4, #24]
 800a878:	60a3      	str	r3, [r4, #8]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	071a      	lsls	r2, r3, #28
 800a87e:	d501      	bpl.n	800a884 <__swbuf_r+0x20>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	b943      	cbnz	r3, 800a896 <__swbuf_r+0x32>
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f82a 	bl	800a8e0 <__swsetup_r>
 800a88c:	b118      	cbz	r0, 800a896 <__swbuf_r+0x32>
 800a88e:	f04f 37ff 	mov.w	r7, #4294967295
 800a892:	4638      	mov	r0, r7
 800a894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	1a98      	subs	r0, r3, r2
 800a89c:	6963      	ldr	r3, [r4, #20]
 800a89e:	b2f6      	uxtb	r6, r6
 800a8a0:	4283      	cmp	r3, r0
 800a8a2:	4637      	mov	r7, r6
 800a8a4:	dc05      	bgt.n	800a8b2 <__swbuf_r+0x4e>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f7ff fa6b 	bl	8009d84 <_fflush_r>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d1ed      	bne.n	800a88e <__swbuf_r+0x2a>
 800a8b2:	68a3      	ldr	r3, [r4, #8]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	60a3      	str	r3, [r4, #8]
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	6022      	str	r2, [r4, #0]
 800a8be:	701e      	strb	r6, [r3, #0]
 800a8c0:	6962      	ldr	r2, [r4, #20]
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d004      	beq.n	800a8d2 <__swbuf_r+0x6e>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	07db      	lsls	r3, r3, #31
 800a8cc:	d5e1      	bpl.n	800a892 <__swbuf_r+0x2e>
 800a8ce:	2e0a      	cmp	r6, #10
 800a8d0:	d1df      	bne.n	800a892 <__swbuf_r+0x2e>
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7ff fa55 	bl	8009d84 <_fflush_r>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d0d9      	beq.n	800a892 <__swbuf_r+0x2e>
 800a8de:	e7d6      	b.n	800a88e <__swbuf_r+0x2a>

0800a8e0 <__swsetup_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4b29      	ldr	r3, [pc, #164]	@ (800a988 <__swsetup_r+0xa8>)
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	b118      	cbz	r0, 800a8f4 <__swsetup_r+0x14>
 800a8ec:	6a03      	ldr	r3, [r0, #32]
 800a8ee:	b90b      	cbnz	r3, 800a8f4 <__swsetup_r+0x14>
 800a8f0:	f7fc fc4a 	bl	8007188 <__sinit>
 800a8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	d422      	bmi.n	800a942 <__swsetup_r+0x62>
 800a8fc:	06da      	lsls	r2, r3, #27
 800a8fe:	d407      	bmi.n	800a910 <__swsetup_r+0x30>
 800a900:	2209      	movs	r2, #9
 800a902:	602a      	str	r2, [r5, #0]
 800a904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	e033      	b.n	800a978 <__swsetup_r+0x98>
 800a910:	0758      	lsls	r0, r3, #29
 800a912:	d512      	bpl.n	800a93a <__swsetup_r+0x5a>
 800a914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a916:	b141      	cbz	r1, 800a92a <__swsetup_r+0x4a>
 800a918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a91c:	4299      	cmp	r1, r3
 800a91e:	d002      	beq.n	800a926 <__swsetup_r+0x46>
 800a920:	4628      	mov	r0, r5
 800a922:	f7fd fc25 	bl	8008170 <_free_r>
 800a926:	2300      	movs	r3, #0
 800a928:	6363      	str	r3, [r4, #52]	@ 0x34
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	2300      	movs	r3, #0
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f043 0308 	orr.w	r3, r3, #8
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	6923      	ldr	r3, [r4, #16]
 800a944:	b94b      	cbnz	r3, 800a95a <__swsetup_r+0x7a>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a94c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a950:	d003      	beq.n	800a95a <__swsetup_r+0x7a>
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f000 f88b 	bl	800aa70 <__smakebuf_r>
 800a95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95e:	f013 0201 	ands.w	r2, r3, #1
 800a962:	d00a      	beq.n	800a97a <__swsetup_r+0x9a>
 800a964:	2200      	movs	r2, #0
 800a966:	60a2      	str	r2, [r4, #8]
 800a968:	6962      	ldr	r2, [r4, #20]
 800a96a:	4252      	negs	r2, r2
 800a96c:	61a2      	str	r2, [r4, #24]
 800a96e:	6922      	ldr	r2, [r4, #16]
 800a970:	b942      	cbnz	r2, 800a984 <__swsetup_r+0xa4>
 800a972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a976:	d1c5      	bne.n	800a904 <__swsetup_r+0x24>
 800a978:	bd38      	pop	{r3, r4, r5, pc}
 800a97a:	0799      	lsls	r1, r3, #30
 800a97c:	bf58      	it	pl
 800a97e:	6962      	ldrpl	r2, [r4, #20]
 800a980:	60a2      	str	r2, [r4, #8]
 800a982:	e7f4      	b.n	800a96e <__swsetup_r+0x8e>
 800a984:	2000      	movs	r0, #0
 800a986:	e7f7      	b.n	800a978 <__swsetup_r+0x98>
 800a988:	20000018 	.word	0x20000018

0800a98c <_raise_r>:
 800a98c:	291f      	cmp	r1, #31
 800a98e:	b538      	push	{r3, r4, r5, lr}
 800a990:	4605      	mov	r5, r0
 800a992:	460c      	mov	r4, r1
 800a994:	d904      	bls.n	800a9a0 <_raise_r+0x14>
 800a996:	2316      	movs	r3, #22
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a9a2:	b112      	cbz	r2, 800a9aa <_raise_r+0x1e>
 800a9a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9a8:	b94b      	cbnz	r3, 800a9be <_raise_r+0x32>
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 f830 	bl	800aa10 <_getpid_r>
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ba:	f000 b817 	b.w	800a9ec <_kill_r>
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d00a      	beq.n	800a9d8 <_raise_r+0x4c>
 800a9c2:	1c59      	adds	r1, r3, #1
 800a9c4:	d103      	bne.n	800a9ce <_raise_r+0x42>
 800a9c6:	2316      	movs	r3, #22
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7e7      	b.n	800a99e <_raise_r+0x12>
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	4798      	blx	r3
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e7e0      	b.n	800a99e <_raise_r+0x12>

0800a9dc <raise>:
 800a9dc:	4b02      	ldr	r3, [pc, #8]	@ (800a9e8 <raise+0xc>)
 800a9de:	4601      	mov	r1, r0
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f7ff bfd3 	b.w	800a98c <_raise_r>
 800a9e6:	bf00      	nop
 800a9e8:	20000018 	.word	0x20000018

0800a9ec <_kill_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d07      	ldr	r5, [pc, #28]	@ (800aa0c <_kill_r+0x20>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	602b      	str	r3, [r5, #0]
 800a9fa:	f7f7 f8eb 	bl	8001bd4 <_kill>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d102      	bne.n	800aa08 <_kill_r+0x1c>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	b103      	cbz	r3, 800aa08 <_kill_r+0x1c>
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000438 	.word	0x20000438

0800aa10 <_getpid_r>:
 800aa10:	f7f7 b8d8 	b.w	8001bc4 <_getpid>

0800aa14 <_malloc_usable_size_r>:
 800aa14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa18:	1f18      	subs	r0, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bfbc      	itt	lt
 800aa1e:	580b      	ldrlt	r3, [r1, r0]
 800aa20:	18c0      	addlt	r0, r0, r3
 800aa22:	4770      	bx	lr

0800aa24 <__swhatbuf_r>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	460c      	mov	r4, r1
 800aa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	b096      	sub	sp, #88	@ 0x58
 800aa30:	4615      	mov	r5, r2
 800aa32:	461e      	mov	r6, r3
 800aa34:	da0d      	bge.n	800aa52 <__swhatbuf_r+0x2e>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa3c:	f04f 0100 	mov.w	r1, #0
 800aa40:	bf14      	ite	ne
 800aa42:	2340      	movne	r3, #64	@ 0x40
 800aa44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa48:	2000      	movs	r0, #0
 800aa4a:	6031      	str	r1, [r6, #0]
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	b016      	add	sp, #88	@ 0x58
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	466a      	mov	r2, sp
 800aa54:	f000 f848 	bl	800aae8 <_fstat_r>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	dbec      	blt.n	800aa36 <__swhatbuf_r+0x12>
 800aa5c:	9901      	ldr	r1, [sp, #4]
 800aa5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa66:	4259      	negs	r1, r3
 800aa68:	4159      	adcs	r1, r3
 800aa6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa6e:	e7eb      	b.n	800aa48 <__swhatbuf_r+0x24>

0800aa70 <__smakebuf_r>:
 800aa70:	898b      	ldrh	r3, [r1, #12]
 800aa72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa74:	079d      	lsls	r5, r3, #30
 800aa76:	4606      	mov	r6, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	d507      	bpl.n	800aa8c <__smakebuf_r+0x1c>
 800aa7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	2301      	movs	r3, #1
 800aa86:	6163      	str	r3, [r4, #20]
 800aa88:	b003      	add	sp, #12
 800aa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8c:	ab01      	add	r3, sp, #4
 800aa8e:	466a      	mov	r2, sp
 800aa90:	f7ff ffc8 	bl	800aa24 <__swhatbuf_r>
 800aa94:	9f00      	ldr	r7, [sp, #0]
 800aa96:	4605      	mov	r5, r0
 800aa98:	4639      	mov	r1, r7
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7fd fbdc 	bl	8008258 <_malloc_r>
 800aaa0:	b948      	cbnz	r0, 800aab6 <__smakebuf_r+0x46>
 800aaa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa6:	059a      	lsls	r2, r3, #22
 800aaa8:	d4ee      	bmi.n	800aa88 <__smakebuf_r+0x18>
 800aaaa:	f023 0303 	bic.w	r3, r3, #3
 800aaae:	f043 0302 	orr.w	r3, r3, #2
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	e7e2      	b.n	800aa7c <__smakebuf_r+0xc>
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	6020      	str	r0, [r4, #0]
 800aaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aac6:	b15b      	cbz	r3, 800aae0 <__smakebuf_r+0x70>
 800aac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 f81d 	bl	800ab0c <_isatty_r>
 800aad2:	b128      	cbz	r0, 800aae0 <__smakebuf_r+0x70>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f023 0303 	bic.w	r3, r3, #3
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	431d      	orrs	r5, r3
 800aae4:	81a5      	strh	r5, [r4, #12]
 800aae6:	e7cf      	b.n	800aa88 <__smakebuf_r+0x18>

0800aae8 <_fstat_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	@ (800ab08 <_fstat_r+0x20>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	f7f7 f8cd 	bl	8001c94 <_fstat>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d102      	bne.n	800ab04 <_fstat_r+0x1c>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b103      	cbz	r3, 800ab04 <_fstat_r+0x1c>
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	20000438 	.word	0x20000438

0800ab0c <_isatty_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d06      	ldr	r5, [pc, #24]	@ (800ab28 <_isatty_r+0x1c>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	f7f7 f8cc 	bl	8001cb4 <_isatty>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_isatty_r+0x1a>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_isatty_r+0x1a>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20000438 	.word	0x20000438

0800ab2c <_init>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	bf00      	nop
 800ab30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab32:	bc08      	pop	{r3}
 800ab34:	469e      	mov	lr, r3
 800ab36:	4770      	bx	lr

0800ab38 <_fini>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	bf00      	nop
 800ab3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3e:	bc08      	pop	{r3}
 800ab40:	469e      	mov	lr, r3
 800ab42:	4770      	bx	lr
