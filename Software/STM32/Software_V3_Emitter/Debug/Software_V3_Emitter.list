
Software_V3_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080056d8  080056d8  000066d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00006768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005770  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  080057cc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080057cc  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6e1  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001faf  00000000  00000000  0001476d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00016720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000938  00000000  00000000  00017330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026757  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1bc  00000000  00000000  0003e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea791  00000000  00000000  0004c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136d0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e8  00000000  00000000  00136d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056c0 	.word	0x080056c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080056c0 	.word	0x080056c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_UART_RxCpltCallback>:
extern char command[BUFF_SIZE];
extern int data_received_usb;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <HAL_UART_RxCpltCallback+0x2c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d107      	bne.n	80005be <HAL_UART_RxCpltCallback+0x22>
    	data_received_usb = 1;
 80005ae:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <HAL_UART_RxCpltCallback+0x30>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);  // Restart reception
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	4906      	ldr	r1, [pc, #24]	@ (80005d0 <HAL_UART_RxCpltCallback+0x34>)
 80005b8:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <HAL_UART_RxCpltCallback+0x38>)
 80005ba:	f003 fc33 	bl	8003e24 <HAL_UART_Receive_IT>
    }
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40004400 	.word	0x40004400
 80005cc:	200001e4 	.word	0x200001e4
 80005d0:	20000164 	.word	0x20000164
 80005d4:	200000dc 	.word	0x200000dc

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fde1 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f829 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8e7 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f8b5 	bl	8000758 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005ee:	f000 f875 	bl	80006dc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	490d      	ldr	r1, [pc, #52]	@ (800062c <main+0x54>)
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <main+0x58>)
 80005f8:	f003 fc14 	bl	8003e24 <HAL_UART_Receive_IT>

 #ifdef TRANSMITTER			//NRF24L01 Private variables
	nrf24l01p_tx_init(2500, _250kbps);
 80005fc:	2102      	movs	r1, #2
 80005fe:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000602:	f000 fa1d 	bl	8000a40 <nrf24l01p_tx_init>

		  data_received_usb = 0;
	  }
	  */

	  char message[NRF24L01P_PAYLOAD_LENGTH] = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
	  sprintf(message,"123456\n\r");
 800060e:	463b      	mov	r3, r7
 8000610:	4908      	ldr	r1, [pc, #32]	@ (8000634 <main+0x5c>)
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fbb4 	bl	8004d80 <siprintf>
	  //sprintf(message,trame);
	  nrf24l01p_tx_transmit((uint8_t*)message);
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fa3b 	bl	8000a96 <nrf24l01p_tx_transmit>
	  HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	@ 0x64
 8000622:	f000 fe3b 	bl	800129c <HAL_Delay>
  {
 8000626:	bf00      	nop
 8000628:	e7ed      	b.n	8000606 <main+0x2e>
 800062a:	bf00      	nop
 800062c:	20000164 	.word	0x20000164
 8000630:	200000dc 	.word	0x200000dc
 8000634:	080056d8 	.word	0x080056d8

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	@ 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	@ 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fbbc 	bl	8004dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065e:	f001 f955 	bl	800190c <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f961 	bl	800092e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000686:	230a      	movs	r3, #10
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f98c 	bl	80019b8 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a6:	f000 f942 	bl	800092e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fd54 	bl	8002170 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f92e 	bl	800092e <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3758      	adds	r7, #88	@ 0x58
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_SPI3_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <MX_SPI3_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_SPI3_Init+0x74>)
 80006e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_SPI3_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_SPI3_Init+0x74>)
 80006f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_SPI3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_SPI3_Init+0x74>)
 800070a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SPI3_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_SPI3_Init+0x74>)
 800072a:	2207      	movs	r2, #7
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_SPI3_Init+0x74>)
 8000736:	2208      	movs	r2, #8
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_SPI3_Init+0x74>)
 800073c:	f002 fbf8 	bl	8002f30 <HAL_SPI_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 f8f2 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000078 	.word	0x20000078
 8000754:	40003c00 	.word	0x40003c00

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f003 faf4 	bl	8003d88 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8c2 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a4c      	ldr	r2, [pc, #304]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b4a      	ldr	r3, [pc, #296]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b47      	ldr	r3, [pc, #284]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a46      	ldr	r2, [pc, #280]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <MX_GPIO_Init+0x14c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <MX_GPIO_Init+0x14c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a40      	ldr	r2, [pc, #256]	@ (8000904 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b3e      	ldr	r3, [pc, #248]	@ (8000904 <MX_GPIO_Init+0x14c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <MX_GPIO_Init+0x14c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a3a      	ldr	r2, [pc, #232]	@ (8000904 <MX_GPIO_Init+0x14c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_GPIO_Init+0x14c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000836:	f001 f811 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000840:	4831      	ldr	r0, [pc, #196]	@ (8000908 <MX_GPIO_Init+0x150>)
 8000842:	f001 f80b 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSN_GPIO_Port, SPI3_CSN_Pin, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f001 f804 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4828      	ldr	r0, [pc, #160]	@ (800090c <MX_GPIO_Init+0x154>)
 800086c:	f000 fe4c 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f000 fe3d 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800088e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4818      	ldr	r0, [pc, #96]	@ (8000908 <MX_GPIO_Init+0x150>)
 80008a8:	f000 fe2e 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80008ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f000 fe1f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = SPI3_CSN_Pin;
 80008ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f000 fe0f 	bl	8001508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2028      	movs	r0, #40	@ 0x28
 80008f0:	f000 fdd3 	bl	800149a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f4:	2028      	movs	r0, #40	@ 0x28
 80008f6:	f000 fdec 	bl	80014d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800

08000910 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000920:	d101      	bne.n	8000926 <HAL_GPIO_EXTI_Callback+0x16>
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
 8000922:	f000 f8c3 	bl	8000aac <nrf24l01p_tx_irq>
#endif
	}

}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <Error_Handler+0x8>

0800093a <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000948:	f000 ff88 	bl	800185c <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <cs_low>:

static void cs_low()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095e:	f000 ff7d 	bl	800185c <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <ce_high>:

static void ce_high()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000972:	4802      	ldr	r0, [pc, #8]	@ (800097c <ce_high+0x14>)
 8000974:	f000 ff72 	bl	800185c <HAL_GPIO_WritePin>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	48000400 	.word	0x48000400

08000980 <ce_low>:

static void ce_low()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098a:	4802      	ldr	r0, [pc, #8]	@ (8000994 <ce_low+0x14>)
 800098c:	f000 ff66 	bl	800185c <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	48000400 	.word	0x48000400

08000998 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80009a6:	f7ff ffd3 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80009aa:	f107 020e 	add.w	r2, r7, #14
 80009ae:	f107 010f 	add.w	r1, r7, #15
 80009b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2301      	movs	r3, #1
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <read_register+0x48>)
 80009bc:	f002 fe09 	bl	80035d2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80009c0:	f107 010d 	add.w	r1, r7, #13
 80009c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009c8:	2201      	movs	r2, #1
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <read_register+0x48>)
 80009cc:	f002 fcc9 	bl	8003362 <HAL_SPI_Receive>
    cs_high();
 80009d0:	f7ff ffb3 	bl	800093a <cs_high>

    return read_val;
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000078 	.word	0x20000078

080009e4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000a02:	f7ff ffa5 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000a06:	f107 020e 	add.w	r2, r7, #14
 8000a0a:	f107 010f 	add.w	r1, r7, #15
 8000a0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <write_register+0x58>)
 8000a18:	f002 fddb 	bl	80035d2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000a1c:	f107 010d 	add.w	r1, r7, #13
 8000a20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a24:	2201      	movs	r2, #1
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <write_register+0x58>)
 8000a28:	f002 fb25 	bl	8003076 <HAL_SPI_Transmit>
    cs_high();
 8000a2c:	f7ff ff85 	bl	800093a <cs_high>

    return write_val;
 8000a30:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000078 	.word	0x20000078

08000a40 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000a50:	f000 f850 	bl	8000af4 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000a54:	f000 f8a2 	bl	8000b9c <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8000a58:	f000 f94c 	bl	8000cf4 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f9d4 	bl	8000e0c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000a64:	797b      	ldrb	r3, [r7, #5]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fa01 	bl	8000e6e <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f9e0 	bl	8000e32 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f953 	bl	8000d1e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000a78:	2005      	movs	r0, #5
 8000a7a:	f000 f973 	bl	8000d64 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f980 	bl	8000d84 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000a84:	20fa      	movs	r0, #250	@ 0xfa
 8000a86:	f000 f999 	bl	8000dbc <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000a8a:	f7ff ff6d 	bl	8000968 <ce_high>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f892 	bl	8000bc8 <nrf24l01p_write_tx_fifo>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000ab2:	f000 f8dd 	bl	8000c70 <nrf24l01p_get_status>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <nrf24l01p_tx_irq+0x44>)
 8000ace:	f000 fedd 	bl	800188c <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8000ad2:	f000 f8e7 	bl	8000ca4 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8000ad6:	e007      	b.n	8000ae8 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <nrf24l01p_tx_irq+0x44>)
 8000ae0:	f000 febc 	bl	800185c <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8000ae4:	f000 f8f2 	bl	8000ccc <nrf24l01p_clear_max_rt>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000800 	.word	0x48000800

08000af4 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000af8:	f7ff ff1f 	bl	800093a <cs_high>
    ce_low();
 8000afc:	f7ff ff40 	bl	8000980 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000b00:	2108      	movs	r1, #8
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff6e 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000b08:	213f      	movs	r1, #63	@ 0x3f
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff ff6a 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000b10:	2103      	movs	r1, #3
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff ff66 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000b18:	2103      	movs	r1, #3
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff ff62 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000b20:	2103      	movs	r1, #3
 8000b22:	2004      	movs	r0, #4
 8000b24:	f7ff ff5e 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	2005      	movs	r0, #5
 8000b2c:	f7ff ff5a 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000b30:	2107      	movs	r1, #7
 8000b32:	2006      	movs	r0, #6
 8000b34:	f7ff ff56 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000b38:	217e      	movs	r1, #126	@ 0x7e
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f7ff ff52 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2011      	movs	r0, #17
 8000b44:	f7ff ff4e 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2011      	movs	r0, #17
 8000b4c:	f7ff ff4a 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2012      	movs	r0, #18
 8000b54:	f7ff ff46 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2013      	movs	r0, #19
 8000b5c:	f7ff ff42 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000b60:	2100      	movs	r1, #0
 8000b62:	2014      	movs	r0, #20
 8000b64:	f7ff ff3e 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2015      	movs	r0, #21
 8000b6c:	f7ff ff3a 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000b70:	2100      	movs	r1, #0
 8000b72:	2016      	movs	r0, #22
 8000b74:	f7ff ff36 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000b78:	2111      	movs	r1, #17
 8000b7a:	2017      	movs	r0, #23
 8000b7c:	f7ff ff32 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000b80:	2100      	movs	r1, #0
 8000b82:	201c      	movs	r0, #28
 8000b84:	f7ff ff2e 	bl	80009e4 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	201d      	movs	r0, #29
 8000b8c:	f7ff ff2a 	bl	80009e4 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000b90:	f000 f83e 	bl	8000c10 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000b94:	f000 f854 	bl	8000c40 <nrf24l01p_flush_tx_fifo>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fef8 	bl	8000998 <read_register>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ff13 	bl	80009e4 <write_register>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8000bd0:	23a0      	movs	r3, #160	@ 0xa0
 8000bd2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000bd4:	f7ff febc 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000bd8:	f107 020e 	add.w	r2, r7, #14
 8000bdc:	f107 010f 	add.w	r1, r7, #15
 8000be0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <nrf24l01p_write_tx_fifo+0x44>)
 8000bea:	f002 fcf2 	bl	80035d2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000bee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <nrf24l01p_write_tx_fifo+0x44>)
 8000bf8:	f002 fa3d 	bl	8003076 <HAL_SPI_Transmit>
    cs_high(); 
 8000bfc:	f7ff fe9d 	bl	800093a <cs_high>

    return status;
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000078 	.word	0x20000078

08000c10 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000c16:	23e2      	movs	r3, #226	@ 0xe2
 8000c18:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000c1a:	f7ff fe99 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c1e:	1dba      	adds	r2, r7, #6
 8000c20:	1df9      	adds	r1, r7, #7
 8000c22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <nrf24l01p_flush_rx_fifo+0x2c>)
 8000c2c:	f002 fcd1 	bl	80035d2 <HAL_SPI_TransmitReceive>
    cs_high();
 8000c30:	f7ff fe83 	bl	800093a <cs_high>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000078 	.word	0x20000078

08000c40 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000c46:	23e1      	movs	r3, #225	@ 0xe1
 8000c48:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000c4a:	f7ff fe81 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c4e:	1dba      	adds	r2, r7, #6
 8000c50:	1df9      	adds	r1, r7, #7
 8000c52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <nrf24l01p_flush_tx_fifo+0x2c>)
 8000c5c:	f002 fcb9 	bl	80035d2 <HAL_SPI_TransmitReceive>
    cs_high();
 8000c60:	f7ff fe6b 	bl	800093a <cs_high>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000078 	.word	0x20000078

08000c70 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000c76:	23ff      	movs	r3, #255	@ 0xff
 8000c78:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000c7a:	f7ff fe69 	bl	8000950 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	1df9      	adds	r1, r7, #7
 8000c82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <nrf24l01p_get_status+0x30>)
 8000c8c:	f002 fca1 	bl	80035d2 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000c90:	f7ff fe53 	bl	800093a <cs_high>

    return status;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000078 	.word	0x20000078

08000ca4 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000caa:	f7ff ffe1 	bl	8000c70 <nrf24l01p_get_status>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f7ff fe90 	bl	80009e4 <write_register>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000cd2:	f7ff ffcd 	bl	8000c70 <nrf24l01p_get_status>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f7ff fe7c 	bl	80009e4 <write_register>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe4c 	bl	8000998 <read_register>
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fe67 	bl	80009e4 <write_register>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fe35 	bl	8000998 <read_register>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d002      	beq.n	8000d3e <nrf24l01p_set_crc_length+0x20>
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d005      	beq.n	8000d48 <nrf24l01p_set_crc_length+0x2a>
 8000d3c:	e009      	b.n	8000d52 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f023 0304 	bic.w	r3, r3, #4
 8000d44:	73fb      	strb	r3, [r7, #15]
            break;
 8000d46:	e004      	b.n	8000d52 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	73fb      	strb	r3, [r7, #15]
            break;
 8000d50:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe44 	bl	80009e4 <write_register>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3b02      	subs	r3, #2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	2003      	movs	r0, #3
 8000d78:	f7ff fe34 	bl	80009e4 <write_register>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f7ff fe02 	bl	8000998 <read_register>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f063 030f 	orn	r3, r3, #15
 8000d9e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000da0:	7bfa      	ldrb	r2, [r7, #15]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	4619      	mov	r1, r3
 8000dac:	2004      	movs	r0, #4
 8000dae:	f7ff fe19 	bl	80009e4 <write_register>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000dc6:	2004      	movs	r0, #4
 8000dc8:	f7ff fde6 	bl	8000998 <read_register>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f043 030f 	orr.w	r3, r3, #15
 8000dd6:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff fdf2 	bl	80009e4 <write_register>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	10624dd3 	.word	0x10624dd3

08000e0c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000e1c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	2005      	movs	r0, #5
 8000e26:	f7ff fddd 	bl	80009e4 <write_register>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f7ff fdab 	bl	8000998 <read_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f023 0306 	bic.w	r3, r3, #6
 8000e48:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2006      	movs	r0, #6
 8000e62:	f7ff fdbf 	bl	80009e4 <write_register>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000e78:	2006      	movs	r0, #6
 8000e7a:	f7ff fd8d 	bl	8000998 <read_register>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000e84:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d00a      	beq.n	8000ea2 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	dc0e      	bgt.n	8000eae <nrf24l01p_set_rf_air_data_rate+0x40>
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00b      	beq.n	8000eac <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10a      	bne.n	8000eae <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	73fb      	strb	r3, [r7, #15]
            break;
 8000ea0:	e005      	b.n	8000eae <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	73fb      	strb	r3, [r7, #15]
            break;
 8000eaa:	e000      	b.n	8000eae <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000eac:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f7ff fd96 	bl	80009e4 <write_register>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_SPI_MspInit+0x7c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d128      	bne.n	8000f7c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_SPI_MspInit+0x84>)
 8000f78:	f000 fac6 	bl	8001508 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40003c00 	.word	0x40003c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000800 	.word	0x48000800

08000f90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ac      	sub	sp, #176	@ 0xb0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2288      	movs	r2, #136	@ 0x88
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 ff07 	bl	8004dc4 <memset>
  if(huart->Instance==USART2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <HAL_UART_MspInit+0xb0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d13b      	bne.n	8001038 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 faf3 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd8:	f7ff fca9 	bl	800092e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_UART_MspInit+0xb4>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800100c:	230c      	movs	r3, #12
 800100e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f000 fa68 	bl	8001508 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	37b0      	adds	r7, #176	@ 0xb0
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004400 	.word	0x40004400
 8001044:	40021000 	.word	0x40021000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <UsageFault_Handler+0x4>

08001070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8dd 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80010aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80010ae:	f000 fc07 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010b2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010b6:	f000 fc03 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f003 fe70 	bl	8004dd4 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20018000 	.word	0x20018000
 8001120:	00000400 	.word	0x00000400
 8001124:	200001e8 	.word	0x200001e8
 8001128:	20000338 	.word	0x20000338

0800112c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f003 fe2f 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fa29 	bl	80005d8 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001194:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8001198:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800119c:	20000338 	.word	0x20000338

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_Init+0x3c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x3c>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f962 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f80f 	bl	80011e4 <HAL_InitTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e001      	b.n	80011d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d2:	f7ff fe75 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_InitTick+0x70>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f96d 	bl	80014ee <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d809      	bhi.n	8001234 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f937 	bl	800149a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0x74>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e007      	b.n	8001244 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e004      	b.n	8001244 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e001      	b.n	8001244 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	200001ec 	.word	0x200001ec

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001ec 	.word	0x200001ec

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	@ (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e17f      	b.n	8001818 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8171 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d005      	beq.n	8001548 <HAL_GPIO_Init+0x40>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d118      	bne.n	80015e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80ac 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d2:	4a5a      	ldr	r2, [pc, #360]	@ (800183c <HAL_GPIO_Init+0x334>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x242>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	@ (8001840 <HAL_GPIO_Init+0x338>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	@ (8001844 <HAL_GPIO_Init+0x33c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x23a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <HAL_GPIO_Init+0x340>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x236>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x344>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x232>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	@ (8001850 <HAL_GPIO_Init+0x348>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4a      	ldr	r2, [pc, #296]	@ (8001854 <HAL_GPIO_Init+0x34c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x22a>
 800172e:	2306      	movs	r3, #6
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001732:	2307      	movs	r3, #7
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x244>
 800174a:	2300      	movs	r3, #0
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800175c:	4937      	ldr	r1, [pc, #220]	@ (800183c <HAL_GPIO_Init+0x334>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_GPIO_Init+0x350>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_GPIO_Init+0x350>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_GPIO_Init+0x350>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_GPIO_Init+0x350>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae78 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	48000400 	.word	0x48000400
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	48001000 	.word	0x48001000
 8001850:	48001400 	.word	0x48001400
 8001854:	48001800 	.word	0x48001800
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43d9      	mvns	r1, r3
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	400b      	ands	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f816 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_PWREx_GetVoltageRange+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40007000 	.word	0x40007000

0800190c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800191a:	d130      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001928:	d038      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	0c9b      	lsrs	r3, r3, #18
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001950:	e002      	b.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3b01      	subs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001964:	d102      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f2      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001978:	d110      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e00f      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198a:	d007      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001994:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40007000 	.word	0x40007000
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e3ca      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b97      	ldr	r3, [pc, #604]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	4b94      	ldr	r3, [pc, #592]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80e4 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4a>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	f040 808b 	bne.w	8001b10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	f040 8087 	bne.w	8001b10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a02:	4b89      	ldr	r3, [pc, #548]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x62>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e3a2      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	4b82      	ldr	r3, [pc, #520]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_RCC_OscConfig+0x7c>
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_OscConfig+0x88>
 8001a34:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d223      	bcs.n	8001a8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fd55 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e383      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a58:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a72      	ldr	r2, [pc, #456]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	496d      	ldr	r1, [pc, #436]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a76:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4968      	ldr	r1, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
 8001a8a:	e025      	b.n	8001ad8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b63      	ldr	r3, [pc, #396]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4960      	ldr	r1, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	495b      	ldr	r1, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fd15 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e343      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad8:	f000 fc4a 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	4950      	ldr	r1, [pc, #320]	@ (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <HAL_RCC_OscConfig+0x278>)
 8001af6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001af8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c34 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb71 	bl	80011e4 <HAL_InitTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d052      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	e327      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d032      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b18:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbae 	bl	8001284 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fbaa 	bl	8001284 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e310      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a36      	ldr	r2, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4931      	ldr	r1, [pc, #196]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	492c      	ldr	r1, [pc, #176]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e01a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a29      	ldr	r2, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb7b 	bl	8001284 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b92:	f7ff fb77 	bl	8001284 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e2dd      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1da>
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d074      	beq.n	8001caa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d10e      	bne.n	8001bea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d10b      	bne.n	8001bea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d064      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d160      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e2ba      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x24a>
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e026      	b.n	8001c50 <HAL_RCC_OscConfig+0x298>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0a:	d115      	bne.n	8001c38 <HAL_RCC_OscConfig+0x280>
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a02      	ldr	r2, [pc, #8]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x298>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	080056e4 	.word	0x080056e4
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004
 8001c38:	4ba0      	ldr	r3, [pc, #640]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b9d      	ldr	r3, [pc, #628]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9c      	ldr	r2, [pc, #624]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb14 	bl	8001284 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb10 	bl	8001284 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e276      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	4b92      	ldr	r3, [pc, #584]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2a8>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb00 	bl	8001284 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fafc 	bl	8001284 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e262      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	4b88      	ldr	r3, [pc, #544]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2d0>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d060      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x310>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d119      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d116      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x328>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e23f      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b76      	ldr	r3, [pc, #472]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	4973      	ldr	r1, [pc, #460]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf4:	e040      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d023      	beq.n	8001d46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fabb 	bl	8001284 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7ff fab7 	bl	8001284 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e21d      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	4b65      	ldr	r3, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b62      	ldr	r3, [pc, #392]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	495f      	ldr	r1, [pc, #380]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e018      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d46:	4b5d      	ldr	r3, [pc, #372]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa97 	bl	8001284 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa93 	bl	8001284 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1f9      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d03c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d92:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa72 	bl	8001284 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa6e 	bl	8001284 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1d4      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCC_OscConfig+0x3ec>
 8001dc4:	e01b      	b.n	8001dfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa55 	bl	8001284 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa51 	bl	8001284 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1b7      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df0:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ef      	bne.n	8001dde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80a6 	beq.w	8001f58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e10:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	4a26      	ldr	r2, [pc, #152]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e28:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d118      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa18 	bl	8001284 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7ff fa14 	bl	8001284 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4d8>
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e84:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8e:	e029      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d115      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x50c>
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	4a9b      	ldr	r2, [pc, #620]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed4:	4b98      	ldr	r3, [pc, #608]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	4a97      	ldr	r2, [pc, #604]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d016      	beq.n	8001f1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff f9ca 	bl	8001284 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f9c6 	bl	8001284 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e12a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ed      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x53c>
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f9b3 	bl	8001284 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f9af 	bl	8001284 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e113      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f38:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ed      	bne.n	8001f22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a79      	ldr	r2, [pc, #484]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80fe 	beq.w	800215e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	f040 80d0 	bne.w	800210c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f6c:	4b72      	ldr	r3, [pc, #456]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d130      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d127      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d11f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fac:	2a07      	cmp	r2, #7
 8001fae:	bf14      	ite	ne
 8001fb0:	2201      	movne	r2, #1
 8001fb2:	2200      	moveq	r2, #0
 8001fb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d113      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d06e      	beq.n	80020c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d069      	beq.n	80020bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0ad      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002004:	4b4c      	ldr	r3, [pc, #304]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4b      	ldr	r2, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002010:	f7ff f938 	bl	8001284 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f934 	bl	8001284 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e09a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	4b43      	ldr	r3, [pc, #268]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002036:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b40      	ldr	r3, [pc, #256]	@ (800213c <HAL_RCC_OscConfig+0x784>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002046:	3a01      	subs	r2, #1
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	0552      	lsls	r2, r2, #21
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002064:	0852      	lsrs	r2, r2, #1
 8002066:	3a01      	subs	r2, #1
 8002068:	0652      	lsls	r2, r2, #25
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002070:	0912      	lsrs	r2, r2, #4
 8002072:	0452      	lsls	r2, r2, #17
 8002074:	430a      	orrs	r2, r1
 8002076:	4930      	ldr	r1, [pc, #192]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002088:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002094:	f7ff f8f6 	bl	8001284 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f8f2 	bl	8001284 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e058      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ba:	e050      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e04f      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d148      	bne.n	800215e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e4:	f7ff f8ce 	bl	8001284 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f8ca 	bl	8001284 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e030      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x734>
 800210a:	e028      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d023      	beq.n	800215a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002118:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f8b1 	bl	8001284 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002124:	e00c      	b.n	8002140 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff f8ad 	bl	8001284 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d905      	bls.n	8002140 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
 8002138:	40021000 	.word	0x40021000
 800213c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ec      	bne.n	8002126 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4905      	ldr	r1, [pc, #20]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_RCC_OscConfig+0x7b4>)
 8002154:	4013      	ands	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
 8002158:	e001      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	feeefffc 	.word	0xfeeefffc

08002170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0e7      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4970      	ldr	r1, [pc, #448]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0cf      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d908      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4960      	ldr	r1, [pc, #384]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04c      	beq.n	8002288 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0a6      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e09a      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002226:	4b4e      	ldr	r3, [pc, #312]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e08e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e086      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4943      	ldr	r1, [pc, #268]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7ff f814 	bl	8001284 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7ff f810 	bl	8001284 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e06e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d208      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	492b      	ldr	r1, [pc, #172]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d210      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	4923      	ldr	r1, [pc, #140]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e036      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4918      	ldr	r1, [pc, #96]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4910      	ldr	r1, [pc, #64]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002324:	f000 f824 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	490b      	ldr	r1, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1fc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ff4b 	bl	80011e4 <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	72fb      	strb	r3, [r7, #11]

  return status;
 8002352:	7afb      	ldrb	r3, [r7, #11]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	080056e4 	.word	0x080056e4
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b3e      	ldr	r3, [pc, #248]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d121      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11e      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a4:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023b0:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023cc:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e004      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d134      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0xa6>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d003      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0xac>
 8002414:	e005      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	e005      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 800241e:	617b      	str	r3, [r7, #20]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	fb03 f202 	mul.w	r2, r3, r2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	3301      	adds	r3, #1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002468:	69bb      	ldr	r3, [r7, #24]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	080056fc 	.word	0x080056fc
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	080056f4 	.word	0x080056f4

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024d0:	f7ff ffda 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4904      	ldr	r1, [pc, #16]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080056f4 	.word	0x080056f4

080024f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002504:	4b2a      	ldr	r3, [pc, #168]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f9ee 	bl	80018f0 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
 8002516:	e014      	b.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	4a24      	ldr	r2, [pc, #144]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	@ 0x58
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002530:	f7ff f9de 	bl	80018f0 <HAL_PWREx_GetVoltageRange>
 8002534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002548:	d10b      	bne.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b80      	cmp	r3, #128	@ 0x80
 800254e:	d919      	bls.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2ba0      	cmp	r3, #160	@ 0xa0
 8002554:	d902      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002556:	2302      	movs	r3, #2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e013      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800255c:	2301      	movs	r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e010      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d902      	bls.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002568:	2303      	movs	r3, #3
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e00a      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	@ 0x80
 8002572:	d102      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002574:	2302      	movs	r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e004      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b70      	cmp	r3, #112	@ 0x70
 800257e:	d101      	bne.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 0207 	bic.w	r2, r3, #7
 800258c:	4909      	ldr	r1, [pc, #36]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d041      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025dc:	d02a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025e2:	d824      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ee:	d81e      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f8:	d010      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025fa:	e018      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025fc:	4b86      	ldr	r3, [pc, #536]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a85      	ldr	r2, [pc, #532]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002606:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002608:	e015      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fabb 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261a:	e00c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3320      	adds	r3, #32
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fba6 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800262c:	e003      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	74fb      	strb	r3, [r7, #19]
      break;
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263c:	4b76      	ldr	r3, [pc, #472]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800264a:	4973      	ldr	r1, [pc, #460]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002652:	e001      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d041      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002668:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800266c:	d02a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800266e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002672:	d824      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800267a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800267e:	d81e      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800268a:	e018      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800268c:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002698:	e015      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fa73 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026aa:	e00c      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3320      	adds	r3, #32
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fb5e 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	74fb      	strb	r3, [r7, #19]
      break;
 80026c2:	e000      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026da:	494f      	ldr	r1, [pc, #316]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026e2:	e001      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a0 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271a:	6593      	str	r3, [r2, #88]	@ 0x58
 800271c:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002728:	2301      	movs	r3, #1
 800272a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002738:	f7fe fda4 	bl	8001284 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800273e:	e009      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe fda0 	bl	8001284 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	74fb      	strb	r3, [r7, #19]
        break;
 8002752:	e005      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d15c      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002766:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01f      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	d019      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fd5f 	bl	8001284 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c8:	e00b      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fd5b 	bl	8001284 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d902      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	74fb      	strb	r3, [r7, #19]
            break;
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ec      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002806:	4904      	ldr	r1, [pc, #16]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
 8002814:	e006      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7c7b      	ldrb	r3, [r7, #17]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	4a9d      	ldr	r2, [pc, #628]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002842:	4b98      	ldr	r3, [pc, #608]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	4994      	ldr	r1, [pc, #592]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002864:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	f023 020c 	bic.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002872:	498c      	ldr	r1, [pc, #560]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002886:	4b87      	ldr	r3, [pc, #540]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4983      	ldr	r1, [pc, #524]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	497b      	ldr	r1, [pc, #492]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	4972      	ldr	r1, [pc, #456]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ec:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	496a      	ldr	r1, [pc, #424]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	4961      	ldr	r1, [pc, #388]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002930:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	4959      	ldr	r1, [pc, #356]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	4950      	ldr	r1, [pc, #320]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	4948      	ldr	r1, [pc, #288]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002996:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	493f      	ldr	r1, [pc, #252]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d028      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c6:	4937      	ldr	r1, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a31      	ldr	r2, [pc, #196]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	e011      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f8c8 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d028      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	491f      	ldr	r1, [pc, #124]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a40:	60d3      	str	r3, [r2, #12]
 8002a42:	e011      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f899 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a02      	ldr	r2, [pc, #8]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	e014      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f867 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02f      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ade:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae6:	4928      	ldr	r1, [pc, #160]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f844 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	74bb      	strb	r3, [r7, #18]
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3320      	adds	r3, #32
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f925 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b52:	490d      	ldr	r1, [pc, #52]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b76:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b9a:	4b75      	ldr	r3, [pc, #468]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d018      	beq.n	8002bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ba6:	4b72      	ldr	r3, [pc, #456]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10d      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d047      	beq.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e044      	b.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d018      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x86>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d825      	bhi.n	8002c30 <RCCEx_PLLSAI1_Config+0xa4>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d002      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0x62>
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d009      	beq.n	8002c00 <RCCEx_PLLSAI1_Config+0x74>
 8002bec:	e020      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bee:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11d      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e01a      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c00:	4b5b      	ldr	r3, [pc, #364]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d116      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c10:	e013      	b.n	8002c3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c12:	4b57      	ldr	r3, [pc, #348]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c2e:	e006      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e004      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c46:	4b4a      	ldr	r3, [pc, #296]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	4944      	ldr	r1, [pc, #272]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d17d      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c68:	4b41      	ldr	r3, [pc, #260]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a40      	ldr	r2, [pc, #256]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c74:	f7fe fb06 	bl	8001284 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c7a:	e009      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7c:	f7fe fb02 	bl	8001284 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c8e:	e005      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c90:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ef      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d160      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca8:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	0912      	lsrs	r2, r2, #4
 8002cc0:	0452      	lsls	r2, r2, #17
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	492a      	ldr	r1, [pc, #168]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
 8002cca:	e027      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d112      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd2:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	0211      	lsls	r1, r2, #8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6912      	ldr	r2, [r2, #16]
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0552      	lsls	r2, r2, #21
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	491f      	ldr	r1, [pc, #124]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	610b      	str	r3, [r1, #16]
 8002cf6:	e011      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
 8002d08:	0211      	lsls	r1, r2, #8
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6952      	ldr	r2, [r2, #20]
 8002d0e:	0852      	lsrs	r2, r2, #1
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0652      	lsls	r2, r2, #25
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4916      	ldr	r1, [pc, #88]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe faac 	bl	8001284 <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2e:	e009      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d30:	f7fe faa8 	bl	8001284 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	73fb      	strb	r3, [r7, #15]
          break;
 8002d42:	e005      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	4904      	ldr	r1, [pc, #16]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d82:	4b6a      	ldr	r3, [pc, #424]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d8e:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
       ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002da6:	4b61      	ldr	r3, [pc, #388]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
       ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d047      	beq.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e044      	b.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d018      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x86>
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d825      	bhi.n	8002e18 <RCCEx_PLLSAI2_Config+0xa4>
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <RCCEx_PLLSAI2_Config+0x62>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d009      	beq.n	8002de8 <RCCEx_PLLSAI2_Config+0x74>
 8002dd4:	e020      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd6:	4b55      	ldr	r3, [pc, #340]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11d      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de6:	e01a      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de8:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d116      	bne.n	8002e22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df8:	e013      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e06:	4b49      	ldr	r3, [pc, #292]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e16:	e006      	b.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e004      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	430b      	orrs	r3, r1
 8002e44:	4939      	ldr	r1, [pc, #228]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d167      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fa12 	bl	8001284 <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e62:	e009      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e64:	f7fe fa0e 	bl	8001284 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	73fb      	strb	r3, [r7, #15]
        break;
 8002e76:	e005      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e78:	4b2c      	ldr	r3, [pc, #176]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ef      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d14a      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e90:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6892      	ldr	r2, [r2, #8]
 8002ea0:	0211      	lsls	r1, r2, #8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	0912      	lsrs	r2, r2, #4
 8002ea8:	0452      	lsls	r2, r2, #17
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	491f      	ldr	r1, [pc, #124]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	614b      	str	r3, [r1, #20]
 8002eb2:	e011      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6912      	ldr	r2, [r2, #16]
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0652      	lsls	r2, r2, #25
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f9ce 	bl	8001284 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eec:	f7fe f9ca 	bl	8001284 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
          break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4904      	ldr	r1, [pc, #16]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e095      	b.n	800306e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d108      	bne.n	8002f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f52:	d009      	beq.n	8002f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
 8002f5a:	e005      	b.n	8002f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd ffc0 	bl	8000f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fa8:	d902      	bls.n	8002fb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e002      	b.n	8002fb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fbe:	d007      	beq.n	8002fd0 <HAL_SPI_Init+0xa0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	f003 0204 	and.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800304c:	ea42 0103 	orr.w	r1, r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003086:	f7fe f8fd 	bl	8001284 <HAL_GetTick>
 800308a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	e15c      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Transmit+0x36>
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e154      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_SPI_Transmit+0x48>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e14d      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003110:	d10f      	bne.n	8003132 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003130:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d007      	beq.n	8003150 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003158:	d952      	bls.n	8003200 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Transmit+0xf2>
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d145      	bne.n	80031f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800318c:	e032      	b.n	80031f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d112      	bne.n	80031c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031c0:	e018      	b.n	80031f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c2:	f7fe f85f 	bl	8001284 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d803      	bhi.n	80031da <HAL_SPI_Transmit+0x164>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d102      	bne.n	80031e0 <HAL_SPI_Transmit+0x16a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0b2      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1c7      	bne.n	800318e <HAL_SPI_Transmit+0x118>
 80031fe:	e083      	b.n	8003308 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Transmit+0x198>
 8003208:	8b7b      	ldrh	r3, [r7, #26]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d177      	bne.n	80032fe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d912      	bls.n	800323e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b02      	subs	r3, #2
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800323c:	e05f      	b.n	80032fe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003264:	e04b      	b.n	80032fe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d12b      	bne.n	80032cc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d912      	bls.n	80032a4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b02      	subs	r3, #2
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032a2:	e02c      	b.n	80032fe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ca:	e018      	b.n	80032fe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032cc:	f7fd ffda 	bl	8001284 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d803      	bhi.n	80032e4 <HAL_SPI_Transmit+0x26e>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d102      	bne.n	80032ea <HAL_SPI_Transmit+0x274>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e02d      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ae      	bne.n	8003266 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fcf5 	bl	8003cfc <SPI_EndRxTxTransaction>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003358:	2300      	movs	r3, #0
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b088      	sub	sp, #32
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e123      	b.n	80035ca <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338a:	d112      	bne.n	80033b2 <HAL_SPI_Receive+0x50>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10e      	bne.n	80033b2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2204      	movs	r2, #4
 8003398:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f912 	bl	80035d2 <HAL_SPI_TransmitReceive>
 80033ae:	4603      	mov	r3, r0
 80033b0:	e10b      	b.n	80035ca <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033b2:	f7fd ff67 	bl	8001284 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_Receive+0x62>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e100      	b.n	80035ca <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_SPI_Receive+0x74>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0f9      	b.n	80035ca <HAL_SPI_Receive+0x268>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2204      	movs	r2, #4
 80033e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003428:	d908      	bls.n	800343c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e007      	b.n	800344c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800344a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003454:	d10f      	bne.n	8003476 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d007      	beq.n	8003494 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800349c:	d875      	bhi.n	800358a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800349e:	e037      	b.n	8003510 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d117      	bne.n	80034de <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f103 020c 	add.w	r2, r3, #12
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80034dc:	e018      	b.n	8003510 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034de:	f7fd fed1 	bl	8001284 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d803      	bhi.n	80034f6 <HAL_SPI_Receive+0x194>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d102      	bne.n	80034fc <HAL_SPI_Receive+0x19a>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e05c      	b.n	80035ca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1c1      	bne.n	80034a0 <HAL_SPI_Receive+0x13e>
 800351c:	e03b      	b.n	8003596 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d115      	bne.n	8003558 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	b292      	uxth	r2, r2
 8003538:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003556:	e018      	b.n	800358a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003558:	f7fd fe94 	bl	8001284 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d803      	bhi.n	8003570 <HAL_SPI_Receive+0x20e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d102      	bne.n	8003576 <HAL_SPI_Receive+0x214>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e01f      	b.n	80035ca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1c3      	bne.n	800351e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fb56 	bl	8003c4c <SPI_EndRxTransaction>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08a      	sub	sp, #40	@ 0x28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e4:	f7fd fe4e 	bl	8001284 <HAL_GetTick>
 80035e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d00c      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x4e>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360c:	d106      	bne.n	800361c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_SPI_TransmitReceive+0x4a>
 8003616:	7ffb      	ldrb	r3, [r7, #31]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d001      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	e1f3      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x60>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x60>
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1e8      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x72>
 8003640:	2302      	movs	r3, #2
 8003642:	e1e1      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b04      	cmp	r3, #4
 8003656:	d003      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2205      	movs	r2, #5
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036a2:	d802      	bhi.n	80036aa <HAL_SPI_TransmitReceive+0xd8>
 80036a4:	8abb      	ldrh	r3, [r7, #20]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d908      	bls.n	80036bc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e007      	b.n	80036cc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b40      	cmp	r3, #64	@ 0x40
 80036d8:	d007      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036f2:	f240 8083 	bls.w	80037fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x132>
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d16f      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003728:	e05c      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11b      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x19e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x19e>
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b01      	cmp	r3, #1
 8003746:	d113      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d11c      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x1e6>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037b8:	f7fd fd64 	bl	8001284 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d80d      	bhi.n	80037e4 <HAL_SPI_TransmitReceive+0x212>
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e111      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d19d      	bne.n	800372a <HAL_SPI_TransmitReceive+0x158>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d197      	bne.n	800372a <HAL_SPI_TransmitReceive+0x158>
 80037fa:	e0e5      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_SPI_TransmitReceive+0x23a>
 8003804:	8afb      	ldrh	r3, [r7, #22]
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 80d1 	bne.w	80039ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d912      	bls.n	800383c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	1c9a      	adds	r2, r3, #2
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b02      	subs	r3, #2
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800383a:	e0b8      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003862:	e0a4      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d134      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x30a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02f      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x30a>
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	2b01      	cmp	r3, #1
 8003880:	d12c      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d912      	bls.n	80038b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b02      	subs	r3, #2
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038b0:	e012      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	7812      	ldrb	r2, [r2, #0]
 80038be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d148      	bne.n	800397c <HAL_SPI_TransmitReceive+0x3aa>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d042      	beq.n	800397c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d923      	bls.n	800394a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	b292      	uxth	r2, r2
 800390e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b02      	subs	r3, #2
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d81f      	bhi.n	8003978 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	e016      	b.n	8003978 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f103 020c 	add.w	r2, r3, #12
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800397c:	f7fd fc82 	bl	8001284 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003988:	429a      	cmp	r2, r3
 800398a:	d803      	bhi.n	8003994 <HAL_SPI_TransmitReceive+0x3c2>
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d102      	bne.n	800399a <HAL_SPI_TransmitReceive+0x3c8>
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e02c      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f af55 	bne.w	8003864 <HAL_SPI_TransmitReceive+0x292>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f af4e 	bne.w	8003864 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f995 	bl	8003cfc <SPI_EndRxTxTransaction>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00e      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3728      	adds	r7, #40	@ 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a20:	f7fd fc30 	bl	8001284 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a30:	f7fd fc28 	bl	8001284 <HAL_GetTick>
 8003a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a36:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	015b      	lsls	r3, r3, #5
 8003a3c:	0d1b      	lsrs	r3, r3, #20
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a46:	e054      	b.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d050      	beq.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a50:	f7fd fc18 	bl	8001284 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d902      	bls.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d13d      	bne.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7e:	d111      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a88:	d004      	beq.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a92:	d107      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aac:	d10f      	bne.n	8003ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e017      	b.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d19b      	bne.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b32:	f7fd fba7 	bl	8001284 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003b42:	f7fd fb9f 	bl	8001284 <HAL_GetTick>
 8003b46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b50:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00da      	lsls	r2, r3, #3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	0d1b      	lsrs	r3, r3, #20
 8003b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b68:	e060      	b.n	8003c2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b70:	d107      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d050      	beq.n	8003c2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b8a:	f7fd fb7b 	bl	8001284 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d902      	bls.n	8003ba0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13d      	bne.n	8003c1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb8:	d111      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc2:	d004      	beq.n	8003bce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bcc:	d107      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be6:	d10f      	bne.n	8003c08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e010      	b.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d196      	bne.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3728      	adds	r7, #40	@ 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000000 	.word	0x20000000

08003c4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c60:	d111      	bne.n	8003c86 <SPI_EndRxTransaction+0x3a>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6a:	d004      	beq.n	8003c76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c74:	d107      	bne.n	8003c86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	@ 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff febd 	bl	8003a10 <SPI_WaitFlagStateUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e023      	b.n	8003cf4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb4:	d11d      	bne.n	8003cf2 <SPI_EndRxTransaction+0xa6>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbe:	d004      	beq.n	8003cca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	d113      	bne.n	8003cf2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff ff22 	bl	8003b20 <SPI_WaitFifoStateUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e000      	b.n	8003cf4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff ff03 	bl	8003b20 <SPI_WaitFifoStateUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e027      	b.n	8003d80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff fe68 	bl	8003a10 <SPI_WaitFlagStateUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e014      	b.n	8003d80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff fedc 	bl	8003b20 <SPI_WaitFifoStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e000      	b.n	8003d80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e040      	b.n	8003e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f8f0 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	@ 0x24
 8003db4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fb38 	bl	8004444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f87d 	bl	8003ed4 <UART_SetConfig>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e01b      	b.n	8003e1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fbb7 	bl	8004588 <UART_CheckIdleState>
 8003e1a:	4603      	mov	r3, r0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	@ 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d137      	bne.n	8003eac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_UART_Receive_IT+0x24>
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e030      	b.n	8003eae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_UART_Receive_IT+0x94>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01f      	beq.n	8003e9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	613b      	str	r3, [r7, #16]
   return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	69f9      	ldr	r1, [r7, #28]
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e6      	bne.n	8003e6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fc86 	bl	80047b4 <UART_Start_Receive_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	e000      	b.n	8003eae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3728      	adds	r7, #40	@ 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40008000 	.word	0x40008000

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b08a      	sub	sp, #40	@ 0x28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4ba4      	ldr	r3, [pc, #656]	@ (8004194 <UART_SetConfig+0x2c0>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a99      	ldr	r2, [pc, #612]	@ (8004198 <UART_SetConfig+0x2c4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a90      	ldr	r2, [pc, #576]	@ (800419c <UART_SetConfig+0x2c8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d126      	bne.n	8003fac <UART_SetConfig+0xd8>
 8003f5e:	4b90      	ldr	r3, [pc, #576]	@ (80041a0 <UART_SetConfig+0x2cc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d81b      	bhi.n	8003fa4 <UART_SetConfig+0xd0>
 8003f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <UART_SetConfig+0xa0>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f95 	.word	0x08003f95
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f9d 	.word	0x08003f9d
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	e116      	b.n	80041ba <UART_SetConfig+0x2e6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e112      	b.n	80041ba <UART_SetConfig+0x2e6>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e10e      	b.n	80041ba <UART_SetConfig+0x2e6>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e10a      	b.n	80041ba <UART_SetConfig+0x2e6>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e106      	b.n	80041ba <UART_SetConfig+0x2e6>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80041a4 <UART_SetConfig+0x2d0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d138      	bne.n	8004028 <UART_SetConfig+0x154>
 8003fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80041a0 <UART_SetConfig+0x2cc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d82d      	bhi.n	8004020 <UART_SetConfig+0x14c>
 8003fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fcc <UART_SetConfig+0xf8>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
 8003fec:	08004009 	.word	0x08004009
 8003ff0:	08004021 	.word	0x08004021
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004019 	.word	0x08004019
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e0d8      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e0d4      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e0d0      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e0cc      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e0c8      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5e      	ldr	r2, [pc, #376]	@ (80041a8 <UART_SetConfig+0x2d4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d125      	bne.n	800407e <UART_SetConfig+0x1aa>
 8004032:	4b5b      	ldr	r3, [pc, #364]	@ (80041a0 <UART_SetConfig+0x2cc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800403c:	2b30      	cmp	r3, #48	@ 0x30
 800403e:	d016      	beq.n	800406e <UART_SetConfig+0x19a>
 8004040:	2b30      	cmp	r3, #48	@ 0x30
 8004042:	d818      	bhi.n	8004076 <UART_SetConfig+0x1a2>
 8004044:	2b20      	cmp	r3, #32
 8004046:	d00a      	beq.n	800405e <UART_SetConfig+0x18a>
 8004048:	2b20      	cmp	r3, #32
 800404a:	d814      	bhi.n	8004076 <UART_SetConfig+0x1a2>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <UART_SetConfig+0x182>
 8004050:	2b10      	cmp	r3, #16
 8004052:	d008      	beq.n	8004066 <UART_SetConfig+0x192>
 8004054:	e00f      	b.n	8004076 <UART_SetConfig+0x1a2>
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405c:	e0ad      	b.n	80041ba <UART_SetConfig+0x2e6>
 800405e:	2302      	movs	r3, #2
 8004060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004064:	e0a9      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004066:	2304      	movs	r3, #4
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406c:	e0a5      	b.n	80041ba <UART_SetConfig+0x2e6>
 800406e:	2308      	movs	r3, #8
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004074:	e0a1      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004076:	2310      	movs	r3, #16
 8004078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407c:	e09d      	b.n	80041ba <UART_SetConfig+0x2e6>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4a      	ldr	r2, [pc, #296]	@ (80041ac <UART_SetConfig+0x2d8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d125      	bne.n	80040d4 <UART_SetConfig+0x200>
 8004088:	4b45      	ldr	r3, [pc, #276]	@ (80041a0 <UART_SetConfig+0x2cc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004092:	2bc0      	cmp	r3, #192	@ 0xc0
 8004094:	d016      	beq.n	80040c4 <UART_SetConfig+0x1f0>
 8004096:	2bc0      	cmp	r3, #192	@ 0xc0
 8004098:	d818      	bhi.n	80040cc <UART_SetConfig+0x1f8>
 800409a:	2b80      	cmp	r3, #128	@ 0x80
 800409c:	d00a      	beq.n	80040b4 <UART_SetConfig+0x1e0>
 800409e:	2b80      	cmp	r3, #128	@ 0x80
 80040a0:	d814      	bhi.n	80040cc <UART_SetConfig+0x1f8>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <UART_SetConfig+0x1d8>
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d008      	beq.n	80040bc <UART_SetConfig+0x1e8>
 80040aa:	e00f      	b.n	80040cc <UART_SetConfig+0x1f8>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b2:	e082      	b.n	80041ba <UART_SetConfig+0x2e6>
 80040b4:	2302      	movs	r3, #2
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ba:	e07e      	b.n	80041ba <UART_SetConfig+0x2e6>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c2:	e07a      	b.n	80041ba <UART_SetConfig+0x2e6>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ca:	e076      	b.n	80041ba <UART_SetConfig+0x2e6>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e072      	b.n	80041ba <UART_SetConfig+0x2e6>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <UART_SetConfig+0x2dc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12a      	bne.n	8004134 <UART_SetConfig+0x260>
 80040de:	4b30      	ldr	r3, [pc, #192]	@ (80041a0 <UART_SetConfig+0x2cc>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ec:	d01a      	beq.n	8004124 <UART_SetConfig+0x250>
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040f2:	d81b      	bhi.n	800412c <UART_SetConfig+0x258>
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f8:	d00c      	beq.n	8004114 <UART_SetConfig+0x240>
 80040fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040fe:	d815      	bhi.n	800412c <UART_SetConfig+0x258>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <UART_SetConfig+0x238>
 8004104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004108:	d008      	beq.n	800411c <UART_SetConfig+0x248>
 800410a:	e00f      	b.n	800412c <UART_SetConfig+0x258>
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e052      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004114:	2302      	movs	r3, #2
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e04e      	b.n	80041ba <UART_SetConfig+0x2e6>
 800411c:	2304      	movs	r3, #4
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004122:	e04a      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004124:	2308      	movs	r3, #8
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412a:	e046      	b.n	80041ba <UART_SetConfig+0x2e6>
 800412c:	2310      	movs	r3, #16
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e042      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <UART_SetConfig+0x2c4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d13a      	bne.n	80041b4 <UART_SetConfig+0x2e0>
 800413e:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <UART_SetConfig+0x2cc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004148:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800414c:	d01a      	beq.n	8004184 <UART_SetConfig+0x2b0>
 800414e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004152:	d81b      	bhi.n	800418c <UART_SetConfig+0x2b8>
 8004154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004158:	d00c      	beq.n	8004174 <UART_SetConfig+0x2a0>
 800415a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800415e:	d815      	bhi.n	800418c <UART_SetConfig+0x2b8>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <UART_SetConfig+0x298>
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004168:	d008      	beq.n	800417c <UART_SetConfig+0x2a8>
 800416a:	e00f      	b.n	800418c <UART_SetConfig+0x2b8>
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e022      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004174:	2302      	movs	r3, #2
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e01e      	b.n	80041ba <UART_SetConfig+0x2e6>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e01a      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e016      	b.n	80041ba <UART_SetConfig+0x2e6>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e012      	b.n	80041ba <UART_SetConfig+0x2e6>
 8004194:	efff69f3 	.word	0xefff69f3
 8004198:	40008000 	.word	0x40008000
 800419c:	40013800 	.word	0x40013800
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40004400 	.word	0x40004400
 80041a8:	40004800 	.word	0x40004800
 80041ac:	40004c00 	.word	0x40004c00
 80041b0:	40005000 	.word	0x40005000
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a9f      	ldr	r2, [pc, #636]	@ (800443c <UART_SetConfig+0x568>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d17a      	bne.n	80042ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d824      	bhi.n	8004216 <UART_SetConfig+0x342>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <UART_SetConfig+0x300>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004207 	.word	0x08004207
 80041e8:	08004217 	.word	0x08004217
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004217 	.word	0x08004217
 80041f4:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe f952 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b8f      	ldr	r3, [pc, #572]	@ (8004440 <UART_SetConfig+0x56c>)
 8004202:	61fb      	str	r3, [r7, #28]
        break;
 8004204:	e00d      	b.n	8004222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe f8b3 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800420a:	61f8      	str	r0, [r7, #28]
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004220:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80fb 	beq.w	8004420 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d305      	bcc.n	8004246 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	429a      	cmp	r2, r3
 8004244:	d903      	bls.n	800424e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800424c:	e0e8      	b.n	8004420 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	2200      	movs	r2, #0
 8004252:	461c      	mov	r4, r3
 8004254:	4615      	mov	r5, r2
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	022b      	lsls	r3, r5, #8
 8004260:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004264:	0222      	lsls	r2, r4, #8
 8004266:	68f9      	ldr	r1, [r7, #12]
 8004268:	6849      	ldr	r1, [r1, #4]
 800426a:	0849      	lsrs	r1, r1, #1
 800426c:	2000      	movs	r0, #0
 800426e:	4688      	mov	r8, r1
 8004270:	4681      	mov	r9, r0
 8004272:	eb12 0a08 	adds.w	sl, r2, r8
 8004276:	eb43 0b09 	adc.w	fp, r3, r9
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004288:	4650      	mov	r0, sl
 800428a:	4659      	mov	r1, fp
 800428c:	f7fb fff0 	bl	8000270 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4613      	mov	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429e:	d308      	bcc.n	80042b2 <UART_SetConfig+0x3de>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a6:	d204      	bcs.n	80042b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	e0b6      	b.n	8004420 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042b8:	e0b2      	b.n	8004420 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c2:	d15e      	bne.n	8004382 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d828      	bhi.n	800431e <UART_SetConfig+0x44a>
 80042cc:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <UART_SetConfig+0x400>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004309 	.word	0x08004309
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800431f 	.word	0x0800431f
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800431f 	.word	0x0800431f
 80042f4:	08004317 	.word	0x08004317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe f8d2 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 80042fc:	61f8      	str	r0, [r7, #28]
        break;
 80042fe:	e014      	b.n	800432a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe f8e4 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004304:	61f8      	str	r0, [r7, #28]
        break;
 8004306:	e010      	b.n	800432a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004308:	4b4d      	ldr	r3, [pc, #308]	@ (8004440 <UART_SetConfig+0x56c>)
 800430a:	61fb      	str	r3, [r7, #28]
        break;
 800430c:	e00d      	b.n	800432a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430e:	f7fe f82f 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8004312:	61f8      	str	r0, [r7, #28]
        break;
 8004314:	e009      	b.n	800432a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800431a:	61fb      	str	r3, [r7, #28]
        break;
 800431c:	e005      	b.n	800432a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d077      	beq.n	8004420 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005a      	lsls	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	441a      	add	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d916      	bls.n	800437a <UART_SetConfig+0x4a6>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004352:	d212      	bcs.n	800437a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f023 030f 	bic.w	r3, r3, #15
 800435c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b29a      	uxth	r2, r3
 800436a:	8afb      	ldrh	r3, [r7, #22]
 800436c:	4313      	orrs	r3, r2
 800436e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	8afa      	ldrh	r2, [r7, #22]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e052      	b.n	8004420 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004380:	e04e      	b.n	8004420 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004382:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004386:	2b08      	cmp	r3, #8
 8004388:	d827      	bhi.n	80043da <UART_SetConfig+0x506>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0x4bc>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043db 	.word	0x080043db
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fe f874 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 80043b8:	61f8      	str	r0, [r7, #28]
        break;
 80043ba:	e014      	b.n	80043e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe f886 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <UART_SetConfig+0x56c>)
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fd ffd1 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 80043ce:	61f8      	str	r0, [r7, #28]
        break;
 80043d0:	e009      	b.n	80043e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043e4:	bf00      	nop
    }

    if (pclk != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d019      	beq.n	8004420 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	085a      	lsrs	r2, r3, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	441a      	add	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d909      	bls.n	800441a <UART_SetConfig+0x546>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d205      	bcs.n	800441a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	e002      	b.n	8004420 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800442c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004430:	4618      	mov	r0, r3
 8004432:	3728      	adds	r7, #40	@ 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	40008000 	.word	0x40008000
 8004440:	00f42400 	.word	0x00f42400

08004444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01a      	beq.n	800455a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004542:	d10a      	bne.n	800455a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b098      	sub	sp, #96	@ 0x60
 800458c:	af02      	add	r7, sp, #8
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004598:	f7fc fe74 	bl	8001284 <HAL_GetTick>
 800459c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d12e      	bne.n	800460a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b4:	2200      	movs	r2, #0
 80045b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f88c 	bl	80046d8 <UART_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d021      	beq.n	800460a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045da:	653b      	str	r3, [r7, #80]	@ 0x50
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e062      	b.n	80046d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d149      	bne.n	80046ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f856 	bl	80046d8 <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03c      	beq.n	80046ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	623b      	str	r3, [r7, #32]
   return(result);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004650:	633b      	str	r3, [r7, #48]	@ 0x30
 8004652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e6      	bne.n	8004632 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	60fb      	str	r3, [r7, #12]
   return(result);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	69b9      	ldr	r1, [r7, #24]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	617b      	str	r3, [r7, #20]
   return(result);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e5      	bne.n	8004664 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e011      	b.n	80046d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3758      	adds	r7, #88	@ 0x58
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e8:	e04f      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d04b      	beq.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f2:	f7fc fdc7 	bl	8001284 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <UART_WaitOnFlagUntilTimeout+0x30>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e04e      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d037      	beq.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b80      	cmp	r3, #128	@ 0x80
 800471e:	d034      	beq.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b40      	cmp	r3, #64	@ 0x40
 8004724:	d031      	beq.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d110      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2208      	movs	r2, #8
 800473a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f8ff 	bl	8004940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2208      	movs	r2, #8
 8004746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e029      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004764:	d111      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800476e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f8e5 	bl	8004940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e00f      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4013      	ands	r3, r2
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d0a0      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b097      	sub	sp, #92	@ 0x5c
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e6:	d10e      	bne.n	8004806 <UART_Start_Receive_IT+0x52>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <UART_Start_Receive_IT+0x48>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047fa:	e02d      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	22ff      	movs	r2, #255	@ 0xff
 8004800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004804:	e028      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <UART_Start_Receive_IT+0x76>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <UART_Start_Receive_IT+0x6c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	22ff      	movs	r2, #255	@ 0xff
 800481a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800481e:	e01b      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	227f      	movs	r2, #127	@ 0x7f
 8004824:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004828:	e016      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004832:	d10d      	bne.n	8004850 <UART_Start_Receive_IT+0x9c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <UART_Start_Receive_IT+0x92>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	227f      	movs	r2, #127	@ 0x7f
 8004840:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004844:	e008      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	223f      	movs	r2, #63	@ 0x3f
 800484a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800484e:	e003      	b.n	8004858 <UART_Start_Receive_IT+0xa4>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2222      	movs	r2, #34	@ 0x22
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004888:	64ba      	str	r2, [r7, #72]	@ 0x48
 800488a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800488e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a4:	d107      	bne.n	80048b6 <UART_Start_Receive_IT+0x102>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a21      	ldr	r2, [pc, #132]	@ (8004938 <UART_Start_Receive_IT+0x184>)
 80048b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80048b4:	e002      	b.n	80048bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a20      	ldr	r2, [pc, #128]	@ (800493c <UART_Start_Receive_IT+0x188>)
 80048ba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d019      	beq.n	80048f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80048d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e6      	bne.n	80048c4 <UART_Start_Receive_IT+0x110>
 80048f6:	e018      	b.n	800492a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	613b      	str	r3, [r7, #16]
   return(result);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	653b      	str	r3, [r7, #80]	@ 0x50
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	69f9      	ldr	r1, [r7, #28]
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	61bb      	str	r3, [r7, #24]
   return(result);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	375c      	adds	r7, #92	@ 0x5c
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	08004bc5 	.word	0x08004bc5
 800493c:	08004a09 	.word	0x08004a09

08004940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b095      	sub	sp, #84	@ 0x54
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800495c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
 8004968:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800496c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	61fb      	str	r3, [r7, #28]
   return(result);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800499a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d118      	bne.n	80049e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	613b      	str	r3, [r7, #16]
   return(result);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049fc:	bf00      	nop
 80049fe:	3754      	adds	r7, #84	@ 0x54
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b09c      	sub	sp, #112	@ 0x70
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a20:	2b22      	cmp	r3, #34	@ 0x22
 8004a22:	f040 80be 	bne.w	8004ba2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a34:	b2d9      	uxtb	r1, r3
 8004a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	400a      	ands	r2, r1
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80a3 	bne.w	8004bb6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ac2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a34      	ldr	r2, [pc, #208]	@ (8004bc0 <UART_RxISR_8BIT+0x1b8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01f      	beq.n	8004b34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d12e      	bne.n	8004b9a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d103      	bne.n	8004b8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2210      	movs	r2, #16
 8004b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff f992 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b98:	e00d      	b.n	8004bb6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb fcfe 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8004ba0:	e009      	b.n	8004bb6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	8b1b      	ldrh	r3, [r3, #24]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	831a      	strh	r2, [r3, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	3770      	adds	r7, #112	@ 0x70
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40008000 	.word	0x40008000

08004bc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b09c      	sub	sp, #112	@ 0x70
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bd2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bdc:	2b22      	cmp	r3, #34	@ 0x22
 8004bde:	f040 80be 	bne.w	8004d5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004be8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 80a3 	bne.w	8004d72 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e6      	bne.n	8004c2c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a34      	ldr	r2, [pc, #208]	@ (8004d7c <UART_RxISR_16BIT+0x1b8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01f      	beq.n	8004cf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e6      	bne.n	8004cbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d12e      	bne.n	8004d56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d103      	bne.n	8004d46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff f8b4 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d54:	e00d      	b.n	8004d72 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb fc20 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8004d5c:	e009      	b.n	8004d72 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	8b1b      	ldrh	r3, [r3, #24]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0208 	orr.w	r2, r2, #8
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	831a      	strh	r2, [r3, #24]
}
 8004d72:	bf00      	nop
 8004d74:	3770      	adds	r7, #112	@ 0x70
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40008000 	.word	0x40008000

08004d80 <siprintf>:
 8004d80:	b40e      	push	{r1, r2, r3}
 8004d82:	b510      	push	{r4, lr}
 8004d84:	b09d      	sub	sp, #116	@ 0x74
 8004d86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d88:	9002      	str	r0, [sp, #8]
 8004d8a:	9006      	str	r0, [sp, #24]
 8004d8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d90:	480a      	ldr	r0, [pc, #40]	@ (8004dbc <siprintf+0x3c>)
 8004d92:	9107      	str	r1, [sp, #28]
 8004d94:	9104      	str	r1, [sp, #16]
 8004d96:	490a      	ldr	r1, [pc, #40]	@ (8004dc0 <siprintf+0x40>)
 8004d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9c:	9105      	str	r1, [sp, #20]
 8004d9e:	2400      	movs	r4, #0
 8004da0:	a902      	add	r1, sp, #8
 8004da2:	6800      	ldr	r0, [r0, #0]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004da8:	f000 f994 	bl	80050d4 <_svfiprintf_r>
 8004dac:	9b02      	ldr	r3, [sp, #8]
 8004dae:	701c      	strb	r4, [r3, #0]
 8004db0:	b01d      	add	sp, #116	@ 0x74
 8004db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db6:	b003      	add	sp, #12
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	ffff0208 	.word	0xffff0208

08004dc4 <memset>:
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d100      	bne.n	8004dce <memset+0xa>
 8004dcc:	4770      	bx	lr
 8004dce:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd2:	e7f9      	b.n	8004dc8 <memset+0x4>

08004dd4 <__errno>:
 8004dd4:	4b01      	ldr	r3, [pc, #4]	@ (8004ddc <__errno+0x8>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4d0d      	ldr	r5, [pc, #52]	@ (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	@ (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2600      	movs	r6, #0
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4d0b      	ldr	r5, [pc, #44]	@ (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 fc64 	bl	80056c0 <_init>
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005768 	.word	0x08005768
 8004e1c:	08005768 	.word	0x08005768
 8004e20:	08005768 	.word	0x08005768
 8004e24:	0800576c 	.word	0x0800576c

08004e28 <__retarget_lock_acquire_recursive>:
 8004e28:	4770      	bx	lr

08004e2a <__retarget_lock_release_recursive>:
 8004e2a:	4770      	bx	lr

08004e2c <_free_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4605      	mov	r5, r0
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d041      	beq.n	8004eb8 <_free_r+0x8c>
 8004e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e38:	1f0c      	subs	r4, r1, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfb8      	it	lt
 8004e3e:	18e4      	addlt	r4, r4, r3
 8004e40:	f000 f8e0 	bl	8005004 <__malloc_lock>
 8004e44:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <_free_r+0x90>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	b933      	cbnz	r3, 8004e58 <_free_r+0x2c>
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	6014      	str	r4, [r2, #0]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e54:	f000 b8dc 	b.w	8005010 <__malloc_unlock>
 8004e58:	42a3      	cmp	r3, r4
 8004e5a:	d908      	bls.n	8004e6e <_free_r+0x42>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	1821      	adds	r1, r4, r0
 8004e60:	428b      	cmp	r3, r1
 8004e62:	bf01      	itttt	eq
 8004e64:	6819      	ldreq	r1, [r3, #0]
 8004e66:	685b      	ldreq	r3, [r3, #4]
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	e7ed      	b.n	8004e4a <_free_r+0x1e>
 8004e6e:	461a      	mov	r2, r3
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b10b      	cbz	r3, 8004e78 <_free_r+0x4c>
 8004e74:	42a3      	cmp	r3, r4
 8004e76:	d9fa      	bls.n	8004e6e <_free_r+0x42>
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	1850      	adds	r0, r2, r1
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d10b      	bne.n	8004e98 <_free_r+0x6c>
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	4401      	add	r1, r0
 8004e84:	1850      	adds	r0, r2, r1
 8004e86:	4283      	cmp	r3, r0
 8004e88:	6011      	str	r1, [r2, #0]
 8004e8a:	d1e0      	bne.n	8004e4e <_free_r+0x22>
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	6053      	str	r3, [r2, #4]
 8004e92:	4408      	add	r0, r1
 8004e94:	6010      	str	r0, [r2, #0]
 8004e96:	e7da      	b.n	8004e4e <_free_r+0x22>
 8004e98:	d902      	bls.n	8004ea0 <_free_r+0x74>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	602b      	str	r3, [r5, #0]
 8004e9e:	e7d6      	b.n	8004e4e <_free_r+0x22>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf04      	itt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	bf04      	itt	eq
 8004eb0:	1809      	addeq	r1, r1, r0
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	6054      	str	r4, [r2, #4]
 8004eb6:	e7ca      	b.n	8004e4e <_free_r+0x22>
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000334 	.word	0x20000334

08004ec0 <sbrk_aligned>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f00 <sbrk_aligned+0x40>)
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	6831      	ldr	r1, [r6, #0]
 8004ec8:	4605      	mov	r5, r0
 8004eca:	b911      	cbnz	r1, 8004ed2 <sbrk_aligned+0x12>
 8004ecc:	f000 fba4 	bl	8005618 <_sbrk_r>
 8004ed0:	6030      	str	r0, [r6, #0]
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 fb9f 	bl	8005618 <_sbrk_r>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d103      	bne.n	8004ee6 <sbrk_aligned+0x26>
 8004ede:	f04f 34ff 	mov.w	r4, #4294967295
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d0f8      	beq.n	8004ee2 <sbrk_aligned+0x22>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 fb90 	bl	8005618 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d1f2      	bne.n	8004ee2 <sbrk_aligned+0x22>
 8004efc:	e7ef      	b.n	8004ede <sbrk_aligned+0x1e>
 8004efe:	bf00      	nop
 8004f00:	20000330 	.word	0x20000330

08004f04 <_malloc_r>:
 8004f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	1ccd      	adds	r5, r1, #3
 8004f0a:	f025 0503 	bic.w	r5, r5, #3
 8004f0e:	3508      	adds	r5, #8
 8004f10:	2d0c      	cmp	r5, #12
 8004f12:	bf38      	it	cc
 8004f14:	250c      	movcc	r5, #12
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	4606      	mov	r6, r0
 8004f1a:	db01      	blt.n	8004f20 <_malloc_r+0x1c>
 8004f1c:	42a9      	cmp	r1, r5
 8004f1e:	d904      	bls.n	8004f2a <_malloc_r+0x26>
 8004f20:	230c      	movs	r3, #12
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	2000      	movs	r0, #0
 8004f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005000 <_malloc_r+0xfc>
 8004f2e:	f000 f869 	bl	8005004 <__malloc_lock>
 8004f32:	f8d8 3000 	ldr.w	r3, [r8]
 8004f36:	461c      	mov	r4, r3
 8004f38:	bb44      	cbnz	r4, 8004f8c <_malloc_r+0x88>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7ff ffbf 	bl	8004ec0 <sbrk_aligned>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	4604      	mov	r4, r0
 8004f46:	d158      	bne.n	8004ffa <_malloc_r+0xf6>
 8004f48:	f8d8 4000 	ldr.w	r4, [r8]
 8004f4c:	4627      	mov	r7, r4
 8004f4e:	2f00      	cmp	r7, #0
 8004f50:	d143      	bne.n	8004fda <_malloc_r+0xd6>
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	d04b      	beq.n	8004fee <_malloc_r+0xea>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	4639      	mov	r1, r7
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	eb04 0903 	add.w	r9, r4, r3
 8004f60:	f000 fb5a 	bl	8005618 <_sbrk_r>
 8004f64:	4581      	cmp	r9, r0
 8004f66:	d142      	bne.n	8004fee <_malloc_r+0xea>
 8004f68:	6821      	ldr	r1, [r4, #0]
 8004f6a:	1a6d      	subs	r5, r5, r1
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff ffa6 	bl	8004ec0 <sbrk_aligned>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d03a      	beq.n	8004fee <_malloc_r+0xea>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	442b      	add	r3, r5
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	bb62      	cbnz	r2, 8004fe0 <_malloc_r+0xdc>
 8004f86:	f8c8 7000 	str.w	r7, [r8]
 8004f8a:	e00f      	b.n	8004fac <_malloc_r+0xa8>
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	1b52      	subs	r2, r2, r5
 8004f90:	d420      	bmi.n	8004fd4 <_malloc_r+0xd0>
 8004f92:	2a0b      	cmp	r2, #11
 8004f94:	d917      	bls.n	8004fc6 <_malloc_r+0xc2>
 8004f96:	1961      	adds	r1, r4, r5
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	6025      	str	r5, [r4, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	6059      	strne	r1, [r3, #4]
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	bf08      	it	eq
 8004fa4:	f8c8 1000 	streq.w	r1, [r8]
 8004fa8:	5162      	str	r2, [r4, r5]
 8004faa:	604b      	str	r3, [r1, #4]
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f82f 	bl	8005010 <__malloc_unlock>
 8004fb2:	f104 000b 	add.w	r0, r4, #11
 8004fb6:	1d23      	adds	r3, r4, #4
 8004fb8:	f020 0007 	bic.w	r0, r0, #7
 8004fbc:	1ac2      	subs	r2, r0, r3
 8004fbe:	bf1c      	itt	ne
 8004fc0:	1a1b      	subne	r3, r3, r0
 8004fc2:	50a3      	strne	r3, [r4, r2]
 8004fc4:	e7af      	b.n	8004f26 <_malloc_r+0x22>
 8004fc6:	6862      	ldr	r2, [r4, #4]
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	bf0c      	ite	eq
 8004fcc:	f8c8 2000 	streq.w	r2, [r8]
 8004fd0:	605a      	strne	r2, [r3, #4]
 8004fd2:	e7eb      	b.n	8004fac <_malloc_r+0xa8>
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	6864      	ldr	r4, [r4, #4]
 8004fd8:	e7ae      	b.n	8004f38 <_malloc_r+0x34>
 8004fda:	463c      	mov	r4, r7
 8004fdc:	687f      	ldr	r7, [r7, #4]
 8004fde:	e7b6      	b.n	8004f4e <_malloc_r+0x4a>
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d1fb      	bne.n	8004fe0 <_malloc_r+0xdc>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6053      	str	r3, [r2, #4]
 8004fec:	e7de      	b.n	8004fac <_malloc_r+0xa8>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 f80c 	bl	8005010 <__malloc_unlock>
 8004ff8:	e794      	b.n	8004f24 <_malloc_r+0x20>
 8004ffa:	6005      	str	r5, [r0, #0]
 8004ffc:	e7d6      	b.n	8004fac <_malloc_r+0xa8>
 8004ffe:	bf00      	nop
 8005000:	20000334 	.word	0x20000334

08005004 <__malloc_lock>:
 8005004:	4801      	ldr	r0, [pc, #4]	@ (800500c <__malloc_lock+0x8>)
 8005006:	f7ff bf0f 	b.w	8004e28 <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	2000032c 	.word	0x2000032c

08005010 <__malloc_unlock>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__malloc_unlock+0x8>)
 8005012:	f7ff bf0a 	b.w	8004e2a <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	2000032c 	.word	0x2000032c

0800501c <__ssputs_r>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	688e      	ldr	r6, [r1, #8]
 8005022:	461f      	mov	r7, r3
 8005024:	42be      	cmp	r6, r7
 8005026:	680b      	ldr	r3, [r1, #0]
 8005028:	4682      	mov	sl, r0
 800502a:	460c      	mov	r4, r1
 800502c:	4690      	mov	r8, r2
 800502e:	d82d      	bhi.n	800508c <__ssputs_r+0x70>
 8005030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005038:	d026      	beq.n	8005088 <__ssputs_r+0x6c>
 800503a:	6965      	ldr	r5, [r4, #20]
 800503c:	6909      	ldr	r1, [r1, #16]
 800503e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005042:	eba3 0901 	sub.w	r9, r3, r1
 8005046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800504a:	1c7b      	adds	r3, r7, #1
 800504c:	444b      	add	r3, r9
 800504e:	106d      	asrs	r5, r5, #1
 8005050:	429d      	cmp	r5, r3
 8005052:	bf38      	it	cc
 8005054:	461d      	movcc	r5, r3
 8005056:	0553      	lsls	r3, r2, #21
 8005058:	d527      	bpl.n	80050aa <__ssputs_r+0x8e>
 800505a:	4629      	mov	r1, r5
 800505c:	f7ff ff52 	bl	8004f04 <_malloc_r>
 8005060:	4606      	mov	r6, r0
 8005062:	b360      	cbz	r0, 80050be <__ssputs_r+0xa2>
 8005064:	6921      	ldr	r1, [r4, #16]
 8005066:	464a      	mov	r2, r9
 8005068:	f000 fae6 	bl	8005638 <memcpy>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	6126      	str	r6, [r4, #16]
 800507a:	6165      	str	r5, [r4, #20]
 800507c:	444e      	add	r6, r9
 800507e:	eba5 0509 	sub.w	r5, r5, r9
 8005082:	6026      	str	r6, [r4, #0]
 8005084:	60a5      	str	r5, [r4, #8]
 8005086:	463e      	mov	r6, r7
 8005088:	42be      	cmp	r6, r7
 800508a:	d900      	bls.n	800508e <__ssputs_r+0x72>
 800508c:	463e      	mov	r6, r7
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	4632      	mov	r2, r6
 8005092:	4641      	mov	r1, r8
 8005094:	f000 faa6 	bl	80055e4 <memmove>
 8005098:	68a3      	ldr	r3, [r4, #8]
 800509a:	1b9b      	subs	r3, r3, r6
 800509c:	60a3      	str	r3, [r4, #8]
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	4433      	add	r3, r6
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	2000      	movs	r0, #0
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	462a      	mov	r2, r5
 80050ac:	f000 fad2 	bl	8005654 <_realloc_r>
 80050b0:	4606      	mov	r6, r0
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d1e0      	bne.n	8005078 <__ssputs_r+0x5c>
 80050b6:	6921      	ldr	r1, [r4, #16]
 80050b8:	4650      	mov	r0, sl
 80050ba:	f7ff feb7 	bl	8004e2c <_free_r>
 80050be:	230c      	movs	r3, #12
 80050c0:	f8ca 3000 	str.w	r3, [sl]
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e7e9      	b.n	80050a6 <__ssputs_r+0x8a>
	...

080050d4 <_svfiprintf_r>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	4698      	mov	r8, r3
 80050da:	898b      	ldrh	r3, [r1, #12]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	b09d      	sub	sp, #116	@ 0x74
 80050e0:	4607      	mov	r7, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	d510      	bpl.n	800510a <_svfiprintf_r+0x36>
 80050e8:	690b      	ldr	r3, [r1, #16]
 80050ea:	b973      	cbnz	r3, 800510a <_svfiprintf_r+0x36>
 80050ec:	2140      	movs	r1, #64	@ 0x40
 80050ee:	f7ff ff09 	bl	8004f04 <_malloc_r>
 80050f2:	6028      	str	r0, [r5, #0]
 80050f4:	6128      	str	r0, [r5, #16]
 80050f6:	b930      	cbnz	r0, 8005106 <_svfiprintf_r+0x32>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	b01d      	add	sp, #116	@ 0x74
 8005102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005106:	2340      	movs	r3, #64	@ 0x40
 8005108:	616b      	str	r3, [r5, #20]
 800510a:	2300      	movs	r3, #0
 800510c:	9309      	str	r3, [sp, #36]	@ 0x24
 800510e:	2320      	movs	r3, #32
 8005110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005114:	f8cd 800c 	str.w	r8, [sp, #12]
 8005118:	2330      	movs	r3, #48	@ 0x30
 800511a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052b8 <_svfiprintf_r+0x1e4>
 800511e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005122:	f04f 0901 	mov.w	r9, #1
 8005126:	4623      	mov	r3, r4
 8005128:	469a      	mov	sl, r3
 800512a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800512e:	b10a      	cbz	r2, 8005134 <_svfiprintf_r+0x60>
 8005130:	2a25      	cmp	r2, #37	@ 0x25
 8005132:	d1f9      	bne.n	8005128 <_svfiprintf_r+0x54>
 8005134:	ebba 0b04 	subs.w	fp, sl, r4
 8005138:	d00b      	beq.n	8005152 <_svfiprintf_r+0x7e>
 800513a:	465b      	mov	r3, fp
 800513c:	4622      	mov	r2, r4
 800513e:	4629      	mov	r1, r5
 8005140:	4638      	mov	r0, r7
 8005142:	f7ff ff6b 	bl	800501c <__ssputs_r>
 8005146:	3001      	adds	r0, #1
 8005148:	f000 80a7 	beq.w	800529a <_svfiprintf_r+0x1c6>
 800514c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800514e:	445a      	add	r2, fp
 8005150:	9209      	str	r2, [sp, #36]	@ 0x24
 8005152:	f89a 3000 	ldrb.w	r3, [sl]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 809f 	beq.w	800529a <_svfiprintf_r+0x1c6>
 800515c:	2300      	movs	r3, #0
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005166:	f10a 0a01 	add.w	sl, sl, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	9307      	str	r3, [sp, #28]
 800516e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005172:	931a      	str	r3, [sp, #104]	@ 0x68
 8005174:	4654      	mov	r4, sl
 8005176:	2205      	movs	r2, #5
 8005178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517c:	484e      	ldr	r0, [pc, #312]	@ (80052b8 <_svfiprintf_r+0x1e4>)
 800517e:	f7fb f827 	bl	80001d0 <memchr>
 8005182:	9a04      	ldr	r2, [sp, #16]
 8005184:	b9d8      	cbnz	r0, 80051be <_svfiprintf_r+0xea>
 8005186:	06d0      	lsls	r0, r2, #27
 8005188:	bf44      	itt	mi
 800518a:	2320      	movmi	r3, #32
 800518c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005190:	0711      	lsls	r1, r2, #28
 8005192:	bf44      	itt	mi
 8005194:	232b      	movmi	r3, #43	@ 0x2b
 8005196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800519a:	f89a 3000 	ldrb.w	r3, [sl]
 800519e:	2b2a      	cmp	r3, #42	@ 0x2a
 80051a0:	d015      	beq.n	80051ce <_svfiprintf_r+0xfa>
 80051a2:	9a07      	ldr	r2, [sp, #28]
 80051a4:	4654      	mov	r4, sl
 80051a6:	2000      	movs	r0, #0
 80051a8:	f04f 0c0a 	mov.w	ip, #10
 80051ac:	4621      	mov	r1, r4
 80051ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051b2:	3b30      	subs	r3, #48	@ 0x30
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d94b      	bls.n	8005250 <_svfiprintf_r+0x17c>
 80051b8:	b1b0      	cbz	r0, 80051e8 <_svfiprintf_r+0x114>
 80051ba:	9207      	str	r2, [sp, #28]
 80051bc:	e014      	b.n	80051e8 <_svfiprintf_r+0x114>
 80051be:	eba0 0308 	sub.w	r3, r0, r8
 80051c2:	fa09 f303 	lsl.w	r3, r9, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	9304      	str	r3, [sp, #16]
 80051ca:	46a2      	mov	sl, r4
 80051cc:	e7d2      	b.n	8005174 <_svfiprintf_r+0xa0>
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9103      	str	r1, [sp, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfbb      	ittet	lt
 80051da:	425b      	neglt	r3, r3
 80051dc:	f042 0202 	orrlt.w	r2, r2, #2
 80051e0:	9307      	strge	r3, [sp, #28]
 80051e2:	9307      	strlt	r3, [sp, #28]
 80051e4:	bfb8      	it	lt
 80051e6:	9204      	strlt	r2, [sp, #16]
 80051e8:	7823      	ldrb	r3, [r4, #0]
 80051ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80051ec:	d10a      	bne.n	8005204 <_svfiprintf_r+0x130>
 80051ee:	7863      	ldrb	r3, [r4, #1]
 80051f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051f2:	d132      	bne.n	800525a <_svfiprintf_r+0x186>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	1d1a      	adds	r2, r3, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	9203      	str	r2, [sp, #12]
 80051fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005200:	3402      	adds	r4, #2
 8005202:	9305      	str	r3, [sp, #20]
 8005204:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052c8 <_svfiprintf_r+0x1f4>
 8005208:	7821      	ldrb	r1, [r4, #0]
 800520a:	2203      	movs	r2, #3
 800520c:	4650      	mov	r0, sl
 800520e:	f7fa ffdf 	bl	80001d0 <memchr>
 8005212:	b138      	cbz	r0, 8005224 <_svfiprintf_r+0x150>
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	eba0 000a 	sub.w	r0, r0, sl
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	4082      	lsls	r2, r0
 800521e:	4313      	orrs	r3, r2
 8005220:	3401      	adds	r4, #1
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	4824      	ldr	r0, [pc, #144]	@ (80052bc <_svfiprintf_r+0x1e8>)
 800522a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800522e:	2206      	movs	r2, #6
 8005230:	f7fa ffce 	bl	80001d0 <memchr>
 8005234:	2800      	cmp	r0, #0
 8005236:	d036      	beq.n	80052a6 <_svfiprintf_r+0x1d2>
 8005238:	4b21      	ldr	r3, [pc, #132]	@ (80052c0 <_svfiprintf_r+0x1ec>)
 800523a:	bb1b      	cbnz	r3, 8005284 <_svfiprintf_r+0x1b0>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	3307      	adds	r3, #7
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	3308      	adds	r3, #8
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524a:	4433      	add	r3, r6
 800524c:	9309      	str	r3, [sp, #36]	@ 0x24
 800524e:	e76a      	b.n	8005126 <_svfiprintf_r+0x52>
 8005250:	fb0c 3202 	mla	r2, ip, r2, r3
 8005254:	460c      	mov	r4, r1
 8005256:	2001      	movs	r0, #1
 8005258:	e7a8      	b.n	80051ac <_svfiprintf_r+0xd8>
 800525a:	2300      	movs	r3, #0
 800525c:	3401      	adds	r4, #1
 800525e:	9305      	str	r3, [sp, #20]
 8005260:	4619      	mov	r1, r3
 8005262:	f04f 0c0a 	mov.w	ip, #10
 8005266:	4620      	mov	r0, r4
 8005268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800526c:	3a30      	subs	r2, #48	@ 0x30
 800526e:	2a09      	cmp	r2, #9
 8005270:	d903      	bls.n	800527a <_svfiprintf_r+0x1a6>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0c6      	beq.n	8005204 <_svfiprintf_r+0x130>
 8005276:	9105      	str	r1, [sp, #20]
 8005278:	e7c4      	b.n	8005204 <_svfiprintf_r+0x130>
 800527a:	fb0c 2101 	mla	r1, ip, r1, r2
 800527e:	4604      	mov	r4, r0
 8005280:	2301      	movs	r3, #1
 8005282:	e7f0      	b.n	8005266 <_svfiprintf_r+0x192>
 8005284:	ab03      	add	r3, sp, #12
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	462a      	mov	r2, r5
 800528a:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <_svfiprintf_r+0x1f0>)
 800528c:	a904      	add	r1, sp, #16
 800528e:	4638      	mov	r0, r7
 8005290:	f3af 8000 	nop.w
 8005294:	1c42      	adds	r2, r0, #1
 8005296:	4606      	mov	r6, r0
 8005298:	d1d6      	bne.n	8005248 <_svfiprintf_r+0x174>
 800529a:	89ab      	ldrh	r3, [r5, #12]
 800529c:	065b      	lsls	r3, r3, #25
 800529e:	f53f af2d 	bmi.w	80050fc <_svfiprintf_r+0x28>
 80052a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052a4:	e72c      	b.n	8005100 <_svfiprintf_r+0x2c>
 80052a6:	ab03      	add	r3, sp, #12
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	462a      	mov	r2, r5
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <_svfiprintf_r+0x1f0>)
 80052ae:	a904      	add	r1, sp, #16
 80052b0:	4638      	mov	r0, r7
 80052b2:	f000 f879 	bl	80053a8 <_printf_i>
 80052b6:	e7ed      	b.n	8005294 <_svfiprintf_r+0x1c0>
 80052b8:	0800572c 	.word	0x0800572c
 80052bc:	08005736 	.word	0x08005736
 80052c0:	00000000 	.word	0x00000000
 80052c4:	0800501d 	.word	0x0800501d
 80052c8:	08005732 	.word	0x08005732

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4698      	mov	r8, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfb8      	it	lt
 80052e0:	4613      	movlt	r3, r2
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052e8:	4607      	mov	r7, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc26      	bgt.n	8005362 <_printf_common+0x96>
 8005314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	3b00      	subs	r3, #0
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42b      	bmi.n	800537c <_printf_common+0xb0>
 8005324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005328:	4641      	mov	r1, r8
 800532a:	4638      	mov	r0, r7
 800532c:	47c8      	blx	r9
 800532e:	3001      	adds	r0, #1
 8005330:	d01e      	beq.n	8005370 <_printf_common+0xa4>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf02      	ittt	eq
 800533e:	68e5      	ldreq	r5, [r4, #12]
 8005340:	6833      	ldreq	r3, [r6, #0]
 8005342:	1aed      	subeq	r5, r5, r3
 8005344:	68a3      	ldr	r3, [r4, #8]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	2600      	movs	r6, #0
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xc8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xa8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4641      	mov	r1, r8
 8005368:	4638      	mov	r0, r7
 800536a:	47c8      	blx	r9
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xac>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c6      	b.n	800530a <_printf_common+0x3e>
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	2030      	movs	r0, #48	@ 0x30
 8005382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005386:	4422      	add	r2, r4
 8005388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005390:	3302      	adds	r3, #2
 8005392:	e7c7      	b.n	8005324 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4641      	mov	r1, r8
 800539a:	4638      	mov	r0, r7
 800539c:	47c8      	blx	r9
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa4>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x8e>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	7e0f      	ldrb	r7, [r1, #24]
 80053ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053b0:	2f78      	cmp	r7, #120	@ 0x78
 80053b2:	4691      	mov	r9, r2
 80053b4:	4680      	mov	r8, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	469a      	mov	sl, r3
 80053ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	@ 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d1 	beq.w	800556c <_printf_i+0x1c4>
 80053ca:	2f58      	cmp	r7, #88	@ 0x58
 80053cc:	f000 80b8 	beq.w	8005540 <_printf_i+0x198>
 80053d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a101      	add	r1, pc, #4	@ (adr r1, 80053e8 <_printf_i+0x40>)
 80053e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005553 	.word	0x08005553
 8005418:	0800547f 	.word	0x0800547f
 800541c:	0800550d 	.word	0x0800550d
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005575 	.word	0x08005575
 800542c:	080053d1 	.word	0x080053d1
 8005430:	0800547f 	.word	0x0800547f
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	08005515 	.word	0x08005515
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6032      	str	r2, [r6, #0]
 8005448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e09c      	b.n	800558e <_printf_i+0x1e6>
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	1d19      	adds	r1, r3, #4
 800545a:	6031      	str	r1, [r6, #0]
 800545c:	0606      	lsls	r6, r0, #24
 800545e:	d501      	bpl.n	8005464 <_printf_i+0xbc>
 8005460:	681d      	ldr	r5, [r3, #0]
 8005462:	e003      	b.n	800546c <_printf_i+0xc4>
 8005464:	0645      	lsls	r5, r0, #25
 8005466:	d5fb      	bpl.n	8005460 <_printf_i+0xb8>
 8005468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800546c:	2d00      	cmp	r5, #0
 800546e:	da03      	bge.n	8005478 <_printf_i+0xd0>
 8005470:	232d      	movs	r3, #45	@ 0x2d
 8005472:	426d      	negs	r5, r5
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005478:	4858      	ldr	r0, [pc, #352]	@ (80055dc <_printf_i+0x234>)
 800547a:	230a      	movs	r3, #10
 800547c:	e011      	b.n	80054a2 <_printf_i+0xfa>
 800547e:	6821      	ldr	r1, [r4, #0]
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	0608      	lsls	r0, r1, #24
 8005484:	f853 5b04 	ldr.w	r5, [r3], #4
 8005488:	d402      	bmi.n	8005490 <_printf_i+0xe8>
 800548a:	0649      	lsls	r1, r1, #25
 800548c:	bf48      	it	mi
 800548e:	b2ad      	uxthmi	r5, r5
 8005490:	2f6f      	cmp	r7, #111	@ 0x6f
 8005492:	4852      	ldr	r0, [pc, #328]	@ (80055dc <_printf_i+0x234>)
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	bf14      	ite	ne
 8005498:	230a      	movne	r3, #10
 800549a:	2308      	moveq	r3, #8
 800549c:	2100      	movs	r1, #0
 800549e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054a2:	6866      	ldr	r6, [r4, #4]
 80054a4:	60a6      	str	r6, [r4, #8]
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	db05      	blt.n	80054b6 <_printf_i+0x10e>
 80054aa:	6821      	ldr	r1, [r4, #0]
 80054ac:	432e      	orrs	r6, r5
 80054ae:	f021 0104 	bic.w	r1, r1, #4
 80054b2:	6021      	str	r1, [r4, #0]
 80054b4:	d04b      	beq.n	800554e <_printf_i+0x1a6>
 80054b6:	4616      	mov	r6, r2
 80054b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054bc:	fb03 5711 	mls	r7, r3, r1, r5
 80054c0:	5dc7      	ldrb	r7, [r0, r7]
 80054c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054c6:	462f      	mov	r7, r5
 80054c8:	42bb      	cmp	r3, r7
 80054ca:	460d      	mov	r5, r1
 80054cc:	d9f4      	bls.n	80054b8 <_printf_i+0x110>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d10b      	bne.n	80054ea <_printf_i+0x142>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	07df      	lsls	r7, r3, #31
 80054d6:	d508      	bpl.n	80054ea <_printf_i+0x142>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	6861      	ldr	r1, [r4, #4]
 80054dc:	4299      	cmp	r1, r3
 80054de:	bfde      	ittt	le
 80054e0:	2330      	movle	r3, #48	@ 0x30
 80054e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054ea:	1b92      	subs	r2, r2, r6
 80054ec:	6122      	str	r2, [r4, #16]
 80054ee:	f8cd a000 	str.w	sl, [sp]
 80054f2:	464b      	mov	r3, r9
 80054f4:	aa03      	add	r2, sp, #12
 80054f6:	4621      	mov	r1, r4
 80054f8:	4640      	mov	r0, r8
 80054fa:	f7ff fee7 	bl	80052cc <_printf_common>
 80054fe:	3001      	adds	r0, #1
 8005500:	d14a      	bne.n	8005598 <_printf_i+0x1f0>
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	b004      	add	sp, #16
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	f043 0320 	orr.w	r3, r3, #32
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	4832      	ldr	r0, [pc, #200]	@ (80055e0 <_printf_i+0x238>)
 8005516:	2778      	movs	r7, #120	@ 0x78
 8005518:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	6831      	ldr	r1, [r6, #0]
 8005520:	061f      	lsls	r7, r3, #24
 8005522:	f851 5b04 	ldr.w	r5, [r1], #4
 8005526:	d402      	bmi.n	800552e <_printf_i+0x186>
 8005528:	065f      	lsls	r7, r3, #25
 800552a:	bf48      	it	mi
 800552c:	b2ad      	uxthmi	r5, r5
 800552e:	6031      	str	r1, [r6, #0]
 8005530:	07d9      	lsls	r1, r3, #31
 8005532:	bf44      	itt	mi
 8005534:	f043 0320 	orrmi.w	r3, r3, #32
 8005538:	6023      	strmi	r3, [r4, #0]
 800553a:	b11d      	cbz	r5, 8005544 <_printf_i+0x19c>
 800553c:	2310      	movs	r3, #16
 800553e:	e7ad      	b.n	800549c <_printf_i+0xf4>
 8005540:	4826      	ldr	r0, [pc, #152]	@ (80055dc <_printf_i+0x234>)
 8005542:	e7e9      	b.n	8005518 <_printf_i+0x170>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	e7f6      	b.n	800553c <_printf_i+0x194>
 800554e:	4616      	mov	r6, r2
 8005550:	e7bd      	b.n	80054ce <_printf_i+0x126>
 8005552:	6833      	ldr	r3, [r6, #0]
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	6961      	ldr	r1, [r4, #20]
 8005558:	1d18      	adds	r0, r3, #4
 800555a:	6030      	str	r0, [r6, #0]
 800555c:	062e      	lsls	r6, r5, #24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	d501      	bpl.n	8005566 <_printf_i+0x1be>
 8005562:	6019      	str	r1, [r3, #0]
 8005564:	e002      	b.n	800556c <_printf_i+0x1c4>
 8005566:	0668      	lsls	r0, r5, #25
 8005568:	d5fb      	bpl.n	8005562 <_printf_i+0x1ba>
 800556a:	8019      	strh	r1, [r3, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	4616      	mov	r6, r2
 8005572:	e7bc      	b.n	80054ee <_printf_i+0x146>
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	6032      	str	r2, [r6, #0]
 800557a:	681e      	ldr	r6, [r3, #0]
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	2100      	movs	r1, #0
 8005580:	4630      	mov	r0, r6
 8005582:	f7fa fe25 	bl	80001d0 <memchr>
 8005586:	b108      	cbz	r0, 800558c <_printf_i+0x1e4>
 8005588:	1b80      	subs	r0, r0, r6
 800558a:	6060      	str	r0, [r4, #4]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	2300      	movs	r3, #0
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005596:	e7aa      	b.n	80054ee <_printf_i+0x146>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	4632      	mov	r2, r6
 800559c:	4649      	mov	r1, r9
 800559e:	4640      	mov	r0, r8
 80055a0:	47d0      	blx	sl
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0ad      	beq.n	8005502 <_printf_i+0x15a>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	079b      	lsls	r3, r3, #30
 80055aa:	d413      	bmi.n	80055d4 <_printf_i+0x22c>
 80055ac:	68e0      	ldr	r0, [r4, #12]
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	4298      	cmp	r0, r3
 80055b2:	bfb8      	it	lt
 80055b4:	4618      	movlt	r0, r3
 80055b6:	e7a6      	b.n	8005506 <_printf_i+0x15e>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4632      	mov	r2, r6
 80055bc:	4649      	mov	r1, r9
 80055be:	4640      	mov	r0, r8
 80055c0:	47d0      	blx	sl
 80055c2:	3001      	adds	r0, #1
 80055c4:	d09d      	beq.n	8005502 <_printf_i+0x15a>
 80055c6:	3501      	adds	r5, #1
 80055c8:	68e3      	ldr	r3, [r4, #12]
 80055ca:	9903      	ldr	r1, [sp, #12]
 80055cc:	1a5b      	subs	r3, r3, r1
 80055ce:	42ab      	cmp	r3, r5
 80055d0:	dcf2      	bgt.n	80055b8 <_printf_i+0x210>
 80055d2:	e7eb      	b.n	80055ac <_printf_i+0x204>
 80055d4:	2500      	movs	r5, #0
 80055d6:	f104 0619 	add.w	r6, r4, #25
 80055da:	e7f5      	b.n	80055c8 <_printf_i+0x220>
 80055dc:	0800573d 	.word	0x0800573d
 80055e0:	0800574e 	.word	0x0800574e

080055e4 <memmove>:
 80055e4:	4288      	cmp	r0, r1
 80055e6:	b510      	push	{r4, lr}
 80055e8:	eb01 0402 	add.w	r4, r1, r2
 80055ec:	d902      	bls.n	80055f4 <memmove+0x10>
 80055ee:	4284      	cmp	r4, r0
 80055f0:	4623      	mov	r3, r4
 80055f2:	d807      	bhi.n	8005604 <memmove+0x20>
 80055f4:	1e43      	subs	r3, r0, #1
 80055f6:	42a1      	cmp	r1, r4
 80055f8:	d008      	beq.n	800560c <memmove+0x28>
 80055fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005602:	e7f8      	b.n	80055f6 <memmove+0x12>
 8005604:	4402      	add	r2, r0
 8005606:	4601      	mov	r1, r0
 8005608:	428a      	cmp	r2, r1
 800560a:	d100      	bne.n	800560e <memmove+0x2a>
 800560c:	bd10      	pop	{r4, pc}
 800560e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005616:	e7f7      	b.n	8005608 <memmove+0x24>

08005618 <_sbrk_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d06      	ldr	r5, [pc, #24]	@ (8005634 <_sbrk_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fb fd4c 	bl	80010c0 <_sbrk>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_sbrk_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_sbrk_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000328 	.word	0x20000328

08005638 <memcpy>:
 8005638:	440a      	add	r2, r1
 800563a:	4291      	cmp	r1, r2
 800563c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005640:	d100      	bne.n	8005644 <memcpy+0xc>
 8005642:	4770      	bx	lr
 8005644:	b510      	push	{r4, lr}
 8005646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800564a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564e:	4291      	cmp	r1, r2
 8005650:	d1f9      	bne.n	8005646 <memcpy+0xe>
 8005652:	bd10      	pop	{r4, pc}

08005654 <_realloc_r>:
 8005654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	4607      	mov	r7, r0
 800565a:	4614      	mov	r4, r2
 800565c:	460d      	mov	r5, r1
 800565e:	b921      	cbnz	r1, 800566a <_realloc_r+0x16>
 8005660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005664:	4611      	mov	r1, r2
 8005666:	f7ff bc4d 	b.w	8004f04 <_malloc_r>
 800566a:	b92a      	cbnz	r2, 8005678 <_realloc_r+0x24>
 800566c:	f7ff fbde 	bl	8004e2c <_free_r>
 8005670:	4625      	mov	r5, r4
 8005672:	4628      	mov	r0, r5
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005678:	f000 f81a 	bl	80056b0 <_malloc_usable_size_r>
 800567c:	4284      	cmp	r4, r0
 800567e:	4606      	mov	r6, r0
 8005680:	d802      	bhi.n	8005688 <_realloc_r+0x34>
 8005682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005686:	d8f4      	bhi.n	8005672 <_realloc_r+0x1e>
 8005688:	4621      	mov	r1, r4
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff fc3a 	bl	8004f04 <_malloc_r>
 8005690:	4680      	mov	r8, r0
 8005692:	b908      	cbnz	r0, 8005698 <_realloc_r+0x44>
 8005694:	4645      	mov	r5, r8
 8005696:	e7ec      	b.n	8005672 <_realloc_r+0x1e>
 8005698:	42b4      	cmp	r4, r6
 800569a:	4622      	mov	r2, r4
 800569c:	4629      	mov	r1, r5
 800569e:	bf28      	it	cs
 80056a0:	4632      	movcs	r2, r6
 80056a2:	f7ff ffc9 	bl	8005638 <memcpy>
 80056a6:	4629      	mov	r1, r5
 80056a8:	4638      	mov	r0, r7
 80056aa:	f7ff fbbf 	bl	8004e2c <_free_r>
 80056ae:	e7f1      	b.n	8005694 <_realloc_r+0x40>

080056b0 <_malloc_usable_size_r>:
 80056b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b4:	1f18      	subs	r0, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfbc      	itt	lt
 80056ba:	580b      	ldrlt	r3, [r1, r0]
 80056bc:	18c0      	addlt	r0, r0, r3
 80056be:	4770      	bx	lr

080056c0 <_init>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr

080056cc <_fini>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr
