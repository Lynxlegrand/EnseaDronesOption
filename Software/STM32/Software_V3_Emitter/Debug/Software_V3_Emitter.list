
Software_V3_Emitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800aca0  0800aca0  0000bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b16c  0800b16c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b16c  0800b16c  0000c16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b174  0800b174  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b174  0800b174  0000c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b178  0800b178  0000c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b17c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001d4  0800b350  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800b350  0000d448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fddb  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f8  00000000  00000000  0001cfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a82  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002773a  00000000  00000000  00020f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103bf  00000000  00000000  0004865c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec71d  00000000  00000000  00058a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db4  00000000  00000000  0014517c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00149f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac84 	.word	0x0800ac84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ac84 	.word	0x0800ac84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <HAL_UART_RxCpltCallback>:
extern char command[BUFF_SIZE];
extern int data_received_usb;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Check which UART triggered the callback
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_UART_RxCpltCallback+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d107      	bne.n	8001042 <HAL_UART_RxCpltCallback+0x22>
    	data_received_usb = 1;
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <HAL_UART_RxCpltCallback+0x30>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);  // Restart reception
 8001038:	2210      	movs	r2, #16
 800103a:	4906      	ldr	r1, [pc, #24]	@ (8001054 <HAL_UART_RxCpltCallback+0x34>)
 800103c:	4806      	ldr	r0, [pc, #24]	@ (8001058 <HAL_UART_RxCpltCallback+0x38>)
 800103e:	f003 ff17 	bl	8004e70 <HAL_UART_Receive_IT>
    }
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004400 	.word	0x40004400
 8001050:	200002ec 	.word	0x200002ec
 8001054:	200002dc 	.word	0x200002dc
 8001058:	20000254 	.word	0x20000254

0800105c <transmit_to_pc>:

void transmit_to_pc(char* trame)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	char message[BUFF_SIZE] = {" "};
 8001064:	2320      	movs	r3, #32
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
	snprintf(message, BUFF_SIZE, trame);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	2110      	movs	r1, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f006 f92f 	bl	80072e0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, BUFF_SIZE, HAL_MAX_DELAY);
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2210      	movs	r2, #16
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <transmit_to_pc+0x40>)
 800108e:	f003 fe65 	bl	8004d5c <HAL_UART_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000254 	.word	0x20000254

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fe7b 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f83d 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f8fb 	bl	80012a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b2:	f000 f8c9 	bl	8001248 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010b6:	f000 f889 	bl	80011cc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

 HAL_UART_Receive_IT(&huart2, (uint8_t*)command, BUFF_SIZE);
 80010ba:	2210      	movs	r2, #16
 80010bc:	4916      	ldr	r1, [pc, #88]	@ (8001118 <main+0x78>)
 80010be:	4817      	ldr	r0, [pc, #92]	@ (800111c <main+0x7c>)
 80010c0:	f003 fed6 	bl	8004e70 <HAL_UART_Receive_IT>

 #ifdef TRANSMITTER			//NRF24L01 Private variables
	nrf24l01p_tx_init(2500, _250kbps);
 80010c4:	2102      	movs	r1, #2
 80010c6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80010ca:	f000 fa31 	bl	8001530 <nrf24l01p_tx_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (data_received_usb == 1)
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <main+0x80>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d1fb      	bne.n	80010ce <main+0x2e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 fa39 	bl	8002554 <HAL_GPIO_WritePin>

		  const char delim[] = " ";
 80010e2:	2320      	movs	r3, #32
 80010e4:	80bb      	strh	r3, [r7, #4]
		  trame = strtok(command, delim);		// Convert command into char*
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <main+0x78>)
 80010ec:	f006 f99c 	bl	8007428 <strtok>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <main+0x84>)
 80010f4:	6013      	str	r3, [r2, #0]

		  transmit_to_pc(trame);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <main+0x84>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffae 	bl	800105c <transmit_to_pc>
		  /*
		  char message[NRF24L01P_PAYLOAD_LENGTH] = {0};
		  sprintf(message,trame);
		  nrf24l01p_tx_transmit((uint8_t*)message);
		  */
		  memset(command, 0, BUFF_SIZE);  // Efface l'ancien message
 8001100:	2210      	movs	r2, #16
 8001102:	2100      	movs	r1, #0
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <main+0x78>)
 8001106:	f006 f986 	bl	8007416 <memset>
		  HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	@ 0x64
 800110c:	f000 fec4 	bl	8001e98 <HAL_Delay>


		  data_received_usb = 0;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <main+0x80>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	  if (data_received_usb == 1)
 8001116:	e7da      	b.n	80010ce <main+0x2e>
 8001118:	200002dc 	.word	0x200002dc
 800111c:	20000254 	.word	0x20000254
 8001120:	200002ec 	.word	0x200002ec
 8001124:	200002f0 	.word	0x200002f0

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b096      	sub	sp, #88	@ 0x58
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2244      	movs	r2, #68	@ 0x44
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f006 f96d 	bl	8007416 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800114e:	f001 fa59 	bl	8002604 <HAL_PWREx_ControlVoltageScaling>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001158:	f000 f961 	bl	800141e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001164:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2310      	movs	r3, #16
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001176:	230a      	movs	r3, #10
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800117a:	2307      	movs	r3, #7
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800117e:	2302      	movs	r3, #2
 8001180:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fa90 	bl	80026b0 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001196:	f000 f942 	bl	800141e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2303      	movs	r3, #3
 80011a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	2104      	movs	r1, #4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fe58 	bl	8002e68 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011be:	f000 f92e 	bl	800141e <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3758      	adds	r7, #88	@ 0x58
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <MX_SPI3_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_SPI3_Init+0x74>)
 80011fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_SPI3_Init+0x74>)
 8001202:	2230      	movs	r2, #48	@ 0x30
 8001204:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_SPI3_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_SPI3_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_SPI3_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_SPI3_Init+0x74>)
 800121a:	2207      	movs	r2, #7
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_SPI3_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_SPI3_Init+0x74>)
 8001226:	2208      	movs	r2, #8
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_SPI3_Init+0x74>)
 800122c:	f002 fcfc 	bl	8003c28 <HAL_SPI_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 f8f2 	bl	800141e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001f0 	.word	0x200001f0
 8001244:	40003c00 	.word	0x40003c00

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800124e:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_USART2_UART_Init+0x58>)
 800128c:	f003 fd18 	bl	8004cc0 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 f8c2 	bl	800141e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000254 	.word	0x20000254
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b4d      	ldr	r3, [pc, #308]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a4c      	ldr	r2, [pc, #304]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b44      	ldr	r3, [pc, #272]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b41      	ldr	r3, [pc, #260]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a40      	ldr	r2, [pc, #256]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b3e      	ldr	r3, [pc, #248]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a3a      	ldr	r2, [pc, #232]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001326:	f001 f915 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001330:	4831      	ldr	r0, [pc, #196]	@ (80013f8 <MX_GPIO_Init+0x150>)
 8001332:	f001 f90f 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSN_GPIO_Port, SPI3_CSN_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f001 f908 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4828      	ldr	r0, [pc, #160]	@ (80013fc <MX_GPIO_Init+0x154>)
 800135c:	f000 ff50 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001360:	2320      	movs	r3, #32
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137a:	f000 ff41 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800137e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <MX_GPIO_Init+0x150>)
 8001398:	f000 ff32 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800139c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f000 ff23 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = SPI3_CSN_Pin;
 80013ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f000 ff13 	bl	8002200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2028      	movs	r0, #40	@ 0x28
 80013e0:	f000 fe59 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e4:	2028      	movs	r0, #40	@ 0x28
 80013e6:	f000 fe72 	bl	80020ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800

08001400 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x16>
#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
 8001412:	f000 f8b9 	bl	8001588 <nrf24l01p_tx_irq>
#endif
	}

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001422:	b672      	cpsid	i
}
 8001424:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <Error_Handler+0x8>

0800142a <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f001 f88c 	bl	8002554 <HAL_GPIO_WritePin>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <cs_low>:

static void cs_low()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f001 f881 	bl	8002554 <HAL_GPIO_WritePin>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <ce_high>:

static void ce_high()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001462:	4802      	ldr	r0, [pc, #8]	@ (800146c <ce_high+0x14>)
 8001464:	f001 f876 	bl	8002554 <HAL_GPIO_WritePin>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	48000400 	.word	0x48000400

08001470 <ce_low>:

static void ce_low()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147a:	4802      	ldr	r0, [pc, #8]	@ (8001484 <ce_low+0x14>)
 800147c:	f001 f86a 	bl	8002554 <HAL_GPIO_WritePin>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	48000400 	.word	0x48000400

08001488 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af02      	add	r7, sp, #8
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8001496:	f7ff ffd3 	bl	8001440 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800149a:	f107 020e 	add.w	r2, r7, #14
 800149e:	f107 010f 	add.w	r1, r7, #15
 80014a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	4809      	ldr	r0, [pc, #36]	@ (80014d0 <read_register+0x48>)
 80014ac:	f002 ff0d 	bl	80042ca <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80014b0:	f107 010d 	add.w	r1, r7, #13
 80014b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014b8:	2201      	movs	r2, #1
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <read_register+0x48>)
 80014bc:	f002 fdcd 	bl	800405a <HAL_SPI_Receive>
    cs_high();
 80014c0:	f7ff ffb3 	bl	800142a <cs_high>

    return read_val;
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f0 	.word	0x200001f0

080014d4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	737b      	strb	r3, [r7, #13]

    cs_low();
 80014f2:	f7ff ffa5 	bl	8001440 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80014f6:	f107 020e 	add.w	r2, r7, #14
 80014fa:	f107 010f 	add.w	r1, r7, #15
 80014fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	4809      	ldr	r0, [pc, #36]	@ (800152c <write_register+0x58>)
 8001508:	f002 fedf 	bl	80042ca <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800150c:	f107 010d 	add.w	r1, r7, #13
 8001510:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001514:	2201      	movs	r2, #1
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <write_register+0x58>)
 8001518:	f002 fc29 	bl	8003d6e <HAL_SPI_Transmit>
    cs_high();
 800151c:	f7ff ff85 	bl	800142a <cs_high>

    return write_val;
 8001520:	7b7b      	ldrb	r3, [r7, #13]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001f0 	.word	0x200001f0

08001530 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4613      	mov	r3, r2
 800153e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8001540:	f000 f846 	bl	80015d0 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8001544:	f000 f898 	bl	8001678 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8001548:	f000 f91e 	bl	8001788 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f9a6 	bl	80018a0 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8001554:	797b      	ldrb	r3, [r7, #5]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f9d3 	bl	8001902 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f9b2 	bl	80018c6 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f925 	bl	80017b2 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8001568:	2005      	movs	r0, #5
 800156a:	f000 f945 	bl	80017f8 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 800156e:	2003      	movs	r0, #3
 8001570:	f000 f952 	bl	8001818 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8001574:	20fa      	movs	r0, #250	@ 0xfa
 8001576:	f000 f96b 	bl	8001850 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800157a:	f7ff ff6d 	bl	8001458 <ce_high>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <nrf24l01p_tx_irq>:
{
    nrf24l01p_write_tx_fifo(tx_payload);
}

void nrf24l01p_tx_irq()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 800158e:	f000 f8b9 	bl	8001704 <nrf24l01p_get_status>
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <nrf24l01p_tx_irq+0x44>)
 80015aa:	f000 ffeb 	bl	8002584 <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80015ae:	f000 f8c3 	bl	8001738 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80015b2:	e007      	b.n	80015c4 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ba:	4804      	ldr	r0, [pc, #16]	@ (80015cc <nrf24l01p_tx_irq+0x44>)
 80015bc:	f000 ffca 	bl	8002554 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80015c0:	f000 f8ce 	bl	8001760 <nrf24l01p_clear_max_rt>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	48000800 	.word	0x48000800

080015d0 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80015d4:	f7ff ff29 	bl	800142a <cs_high>
    ce_low();
 80015d8:	f7ff ff4a 	bl	8001470 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80015dc:	2108      	movs	r1, #8
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff ff78 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80015e4:	213f      	movs	r1, #63	@ 0x3f
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ff74 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80015ec:	2103      	movs	r1, #3
 80015ee:	2002      	movs	r0, #2
 80015f0:	f7ff ff70 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80015f4:	2103      	movs	r1, #3
 80015f6:	2003      	movs	r0, #3
 80015f8:	f7ff ff6c 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80015fc:	2103      	movs	r1, #3
 80015fe:	2004      	movs	r0, #4
 8001600:	f7ff ff68 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001604:	2102      	movs	r1, #2
 8001606:	2005      	movs	r0, #5
 8001608:	f7ff ff64 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800160c:	2107      	movs	r1, #7
 800160e:	2006      	movs	r0, #6
 8001610:	f7ff ff60 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001614:	217e      	movs	r1, #126	@ 0x7e
 8001616:	2007      	movs	r0, #7
 8001618:	f7ff ff5c 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800161c:	2100      	movs	r1, #0
 800161e:	2011      	movs	r0, #17
 8001620:	f7ff ff58 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001624:	2100      	movs	r1, #0
 8001626:	2011      	movs	r0, #17
 8001628:	f7ff ff54 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800162c:	2100      	movs	r1, #0
 800162e:	2012      	movs	r0, #18
 8001630:	f7ff ff50 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001634:	2100      	movs	r1, #0
 8001636:	2013      	movs	r0, #19
 8001638:	f7ff ff4c 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800163c:	2100      	movs	r1, #0
 800163e:	2014      	movs	r0, #20
 8001640:	f7ff ff48 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001644:	2100      	movs	r1, #0
 8001646:	2015      	movs	r0, #21
 8001648:	f7ff ff44 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800164c:	2100      	movs	r1, #0
 800164e:	2016      	movs	r0, #22
 8001650:	f7ff ff40 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001654:	2111      	movs	r1, #17
 8001656:	2017      	movs	r0, #23
 8001658:	f7ff ff3c 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800165c:	2100      	movs	r1, #0
 800165e:	201c      	movs	r0, #28
 8001660:	f7ff ff38 	bl	80014d4 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001664:	2100      	movs	r1, #0
 8001666:	201d      	movs	r0, #29
 8001668:	f7ff ff34 	bl	80014d4 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800166c:	f000 f81a 	bl	80016a4 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8001670:	f000 f830 	bl	80016d4 <nrf24l01p_flush_tx_fifo>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff ff02 	bl	8001488 <read_register>
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4619      	mov	r1, r3
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff ff1d 	bl	80014d4 <write_register>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80016aa:	23e2      	movs	r3, #226	@ 0xe2
 80016ac:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80016ae:	f7ff fec7 	bl	8001440 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80016b2:	1dba      	adds	r2, r7, #6
 80016b4:	1df9      	adds	r1, r7, #7
 80016b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <nrf24l01p_flush_rx_fifo+0x2c>)
 80016c0:	f002 fe03 	bl	80042ca <HAL_SPI_TransmitReceive>
    cs_high();
 80016c4:	f7ff feb1 	bl	800142a <cs_high>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200001f0 	.word	0x200001f0

080016d4 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80016da:	23e1      	movs	r3, #225	@ 0xe1
 80016dc:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80016de:	f7ff feaf 	bl	8001440 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80016e2:	1dba      	adds	r2, r7, #6
 80016e4:	1df9      	adds	r1, r7, #7
 80016e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	4804      	ldr	r0, [pc, #16]	@ (8001700 <nrf24l01p_flush_tx_fifo+0x2c>)
 80016f0:	f002 fdeb 	bl	80042ca <HAL_SPI_TransmitReceive>
    cs_high();
 80016f4:	f7ff fe99 	bl	800142a <cs_high>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001f0 	.word	0x200001f0

08001704 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800170a:	23ff      	movs	r3, #255	@ 0xff
 800170c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800170e:	f7ff fe97 	bl	8001440 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001712:	1dba      	adds	r2, r7, #6
 8001714:	1df9      	adds	r1, r7, #7
 8001716:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <nrf24l01p_get_status+0x30>)
 8001720:	f002 fdd3 	bl	80042ca <HAL_SPI_TransmitReceive>
    cs_high(); 
 8001724:	f7ff fe81 	bl	800142a <cs_high>

    return status;
 8001728:	79bb      	ldrb	r3, [r7, #6]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001f0 	.word	0x200001f0

08001738 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800173e:	f7ff ffe1 	bl	8001704 <nrf24l01p_get_status>
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4619      	mov	r1, r3
 8001752:	2007      	movs	r0, #7
 8001754:	f7ff febe 	bl	80014d4 <write_register>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001766:	f7ff ffcd 	bl	8001704 <nrf24l01p_get_status>
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4619      	mov	r1, r3
 800177a:	2007      	movs	r0, #7
 800177c:	f7ff feaa 	bl	80014d4 <write_register>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fe7a 	bl	8001488 <read_register>
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fe95 	bl	80014d4 <write_register>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe63 	bl	8001488 <read_register>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d002      	beq.n	80017d2 <nrf24l01p_set_crc_length+0x20>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d005      	beq.n	80017dc <nrf24l01p_set_crc_length+0x2a>
 80017d0:	e009      	b.n	80017e6 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	73fb      	strb	r3, [r7, #15]
            break;
 80017da:	e004      	b.n	80017e6 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	73fb      	strb	r3, [r7, #15]
            break;
 80017e4:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fe72 	bl	80014d4 <write_register>
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	3b02      	subs	r3, #2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	2003      	movs	r0, #3
 800180c:	f7ff fe62 	bl	80014d4 <write_register>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001822:	2004      	movs	r0, #4
 8001824:	f7ff fe30 	bl	8001488 <read_register>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	f063 030f 	orn	r3, r3, #15
 8001832:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4313      	orrs	r3, r2
 800183a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4619      	mov	r1, r3
 8001840:	2004      	movs	r0, #4
 8001842:	f7ff fe47 	bl	80014d4 <write_register>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800185a:	2004      	movs	r0, #4
 800185c:	f7ff fe14 	bl	8001488 <read_register>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	f043 030f 	orr.w	r3, r3, #15
 800186a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b25b      	sxtb	r3, r3
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	b25a      	sxtb	r2, r3
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	4313      	orrs	r3, r2
 8001886:	b25b      	sxtb	r3, r3
 8001888:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	4619      	mov	r1, r3
 800188e:	2004      	movs	r0, #4
 8001890:	f7ff fe20 	bl	80014d4 <write_register>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	10624dd3 	.word	0x10624dd3

080018a0 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80018b0:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	2005      	movs	r0, #5
 80018ba:	f7ff fe0b 	bl	80014d4 <write_register>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80018d0:	2006      	movs	r0, #6
 80018d2:	f7ff fdd9 	bl	8001488 <read_register>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f023 0306 	bic.w	r3, r3, #6
 80018dc:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	b25a      	sxtb	r2, r3
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4619      	mov	r1, r3
 80018f4:	2006      	movs	r0, #6
 80018f6:	f7ff fded 	bl	80014d4 <write_register>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800190c:	2006      	movs	r0, #6
 800190e:	f7ff fdbb 	bl	8001488 <read_register>
 8001912:	4603      	mov	r3, r0
 8001914:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001918:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d00a      	beq.n	8001936 <nrf24l01p_set_rf_air_data_rate+0x34>
 8001920:	2b02      	cmp	r3, #2
 8001922:	dc0e      	bgt.n	8001942 <nrf24l01p_set_rf_air_data_rate+0x40>
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10a      	bne.n	8001942 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	73fb      	strb	r3, [r7, #15]
            break;
 8001934:	e005      	b.n	8001942 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	f043 0320 	orr.w	r3, r3, #32
 800193c:	73fb      	strb	r3, [r7, #15]
            break;
 800193e:	e000      	b.n	8001942 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8001940:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4619      	mov	r1, r3
 8001946:	2006      	movs	r0, #6
 8001948:	f7ff fdc4 	bl	80014d4 <write_register>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	@ 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	@ 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <HAL_SPI_MspInit+0x8c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d130      	bne.n	8001a20 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_SPI_MspInit+0x90>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a00:	2306      	movs	r3, #6
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <HAL_SPI_MspInit+0x94>)
 8001a0c:	f000 fbf8 	bl	8002200 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2033      	movs	r0, #51	@ 0x33
 8001a16:	f000 fb3e 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a1a:	2033      	movs	r0, #51	@ 0x33
 8001a1c:	f000 fb57 	bl	80020ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40003c00 	.word	0x40003c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000800 	.word	0x48000800

08001a34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0ac      	sub	sp, #176	@ 0xb0
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2288      	movs	r2, #136	@ 0x88
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f005 fcde 	bl	8007416 <memset>
  if(huart->Instance==USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <HAL_UART_MspInit+0xc0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d143      	bne.n	8001aec <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 fc1d 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff fccf 	bl	800141e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_UART_MspInit+0xc4>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad8:	f000 fb92 	bl	8002200 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2026      	movs	r0, #38	@ 0x26
 8001ae2:	f000 fad8 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae6:	2026      	movs	r0, #38	@ 0x26
 8001ae8:	f000 faf1 	bl	80020ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001aec:	bf00      	nop
 8001aee:	37b0      	adds	r7, #176	@ 0xb0
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40021000 	.word	0x40021000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <NMI_Handler+0x4>

08001b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <MemManage_Handler+0x4>

08001b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b52:	f000 f981 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f003 f9d1 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000254 	.word	0x20000254

08001b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001b74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b78:	f000 fd1e 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b80:	f000 fd1a 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <SPI3_IRQHandler+0x10>)
 8001b8e:	f002 fdbb 	bl	8004708 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001f0 	.word	0x200001f0

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb6:	f005 fcdd 	bl	8007574 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bde:	bf00      	nop
 8001be0:	e7fd      	b.n	8001bde <_exit+0x12>

08001be2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e00a      	b.n	8001c0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	4601      	mov	r1, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	b2ca      	uxtb	r2, r1
 8001c02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbf0      	blt.n	8001bf4 <_read+0x12>
  }

  return len;
 8001c12:	687b      	ldr	r3, [r7, #4]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e009      	b.n	8001c42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dbf1      	blt.n	8001c2e <_write+0x12>
  }
  return len;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_close>:

int _close(int file)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_isatty>:

int _isatty(int file)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f005 fc42 	bl	8007574 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20018000 	.word	0x20018000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200002f4 	.word	0x200002f4
 8001d24:	20000448 	.word	0x20000448

08001d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d50:	f7ff ffea 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f005 fc01 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d7e:	f7ff f98f 	bl	80010a0 <main>

08001d82 <LoopForever>:

LoopForever:
    b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d90:	0800b17c 	.word	0x0800b17c
  ldr r2, =_sbss
 8001d94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d98:	20000448 	.word	0x20000448

08001d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_2_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_Init+0x3c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_Init+0x3c>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db6:	2003      	movs	r0, #3
 8001db8:	f000 f962 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 f80f 	bl	8001de0 <HAL_InitTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	e001      	b.n	8001dd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dce:	f7ff fdc1 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_InitTick+0x6c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_InitTick+0x70>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_InitTick+0x6c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f96d 	bl	80020ea <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d809      	bhi.n	8001e30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f937 	bl	8002096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e28:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_InitTick+0x74>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e007      	b.n	8001e40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e004      	b.n	8001e40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e001      	b.n	8001e40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	200002f8 	.word	0x200002f8

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200002f8 	.word	0x200002f8

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	@ (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d008      	beq.n	800212c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2204      	movs	r2, #4
 800211e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e022      	b.n	8002172 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020e 	bic.w	r2, r2, #14
 800213a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	f003 021c 	and.w	r2, r3, #28
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d005      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e029      	b.n	80021f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 020e 	bic.w	r2, r2, #14
 80021b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f003 021c 	and.w	r2, r3, #28
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
    }
  }
  return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e17f      	b.n	8002510 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8171 	beq.w	800250a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_Init+0x40>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d130      	bne.n	80022a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002276:	2201      	movs	r2, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0201 	and.w	r2, r3, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d118      	bne.n	80022e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	6939      	ldr	r1, [r7, #16]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ac 	beq.w	800250a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002530 <HAL_GPIO_Init+0x330>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002530 <HAL_GPIO_Init+0x330>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023be:	4b5c      	ldr	r3, [pc, #368]	@ (8002530 <HAL_GPIO_Init+0x330>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_GPIO_Init+0x334>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x242>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002538 <HAL_GPIO_Init+0x338>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x23e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4e      	ldr	r2, [pc, #312]	@ (800253c <HAL_GPIO_Init+0x33c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x23a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4d      	ldr	r2, [pc, #308]	@ (8002540 <HAL_GPIO_Init+0x340>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x236>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4c      	ldr	r2, [pc, #304]	@ (8002544 <HAL_GPIO_Init+0x344>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x232>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4b      	ldr	r2, [pc, #300]	@ (8002548 <HAL_GPIO_Init+0x348>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4a      	ldr	r2, [pc, #296]	@ (800254c <HAL_GPIO_Init+0x34c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x22a>
 8002426:	2306      	movs	r3, #6
 8002428:	e00c      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800242a:	2307      	movs	r3, #7
 800242c:	e00a      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800242e:	2305      	movs	r3, #5
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002432:	2304      	movs	r3, #4
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002442:	2300      	movs	r3, #0
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002454:	4937      	ldr	r1, [pc, #220]	@ (8002534 <HAL_GPIO_Init+0x334>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_GPIO_Init+0x350>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002486:	4a32      	ldr	r2, [pc, #200]	@ (8002550 <HAL_GPIO_Init+0x350>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800248c:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <HAL_GPIO_Init+0x350>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_GPIO_Init+0x350>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024b6:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <HAL_GPIO_Init+0x350>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024da:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_GPIO_Init+0x350>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_GPIO_Init+0x350>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002504:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_GPIO_Init+0x350>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f ae78 	bne.w	8002210 <HAL_GPIO_Init+0x10>
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00
 8002544:	48001000 	.word	0x48001000
 8002548:	48001400 	.word	0x48001400
 800254c:	48001800 	.word	0x48001800
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43d9      	mvns	r1, r3
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	400b      	ands	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c2:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff12 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <HAL_PWREx_GetVoltageRange+0x18>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000

08002604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002612:	d130      	bne.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800261c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002620:	d038      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800262a:	4a1e      	ldr	r2, [pc, #120]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2232      	movs	r2, #50	@ 0x32
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	e002      	b.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265c:	d102      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x60>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f2      	bne.n	800264a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002670:	d110      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e00f      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002682:	d007      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002684:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800268c:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002692:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e3ca      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b97      	ldr	r3, [pc, #604]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026cc:	4b94      	ldr	r3, [pc, #592]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80e4 	beq.w	80028ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_RCC_OscConfig+0x4a>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	f040 808b 	bne.w	8002808 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 8087 	bne.w	8002808 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fa:	4b89      	ldr	r3, [pc, #548]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e3a2      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	4b82      	ldr	r3, [pc, #520]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_RCC_OscConfig+0x7c>
 8002722:	4b7f      	ldr	r3, [pc, #508]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800272a:	e005      	b.n	8002738 <HAL_RCC_OscConfig+0x88>
 800272c:	4b7c      	ldr	r3, [pc, #496]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002738:	4293      	cmp	r3, r2
 800273a:	d223      	bcs.n	8002784 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd55 	bl	80031f0 <RCC_SetFlashLatencyFromMSIRange>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e383      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002750:	4b73      	ldr	r3, [pc, #460]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a72      	ldr	r2, [pc, #456]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b70      	ldr	r3, [pc, #448]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	496d      	ldr	r1, [pc, #436]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276e:	4b6c      	ldr	r3, [pc, #432]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	4968      	ldr	r1, [pc, #416]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
 8002782:	e025      	b.n	80027d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002784:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4960      	ldr	r1, [pc, #384]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	495b      	ldr	r1, [pc, #364]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fd15 	bl	80031f0 <RCC_SetFlashLatencyFromMSIRange>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e343      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d0:	f000 fc4a 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b52      	ldr	r3, [pc, #328]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	4950      	ldr	r1, [pc, #320]	@ (8002924 <HAL_RCC_OscConfig+0x274>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002928 <HAL_RCC_OscConfig+0x278>)
 80027ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027f0:	4b4e      	ldr	r3, [pc, #312]	@ (800292c <HAL_RCC_OscConfig+0x27c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff faf3 	bl	8001de0 <HAL_InitTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d052      	beq.n	80028aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	e327      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d032      	beq.n	8002876 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002810:	4b43      	ldr	r3, [pc, #268]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a42      	ldr	r2, [pc, #264]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281c:	f7ff fb30 	bl	8001e80 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002824:	f7ff fb2c 	bl	8001e80 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e310      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002836:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002842:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a36      	ldr	r2, [pc, #216]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4931      	ldr	r1, [pc, #196]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002860:	4b2f      	ldr	r3, [pc, #188]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	492c      	ldr	r1, [pc, #176]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e01a      	b.n	80028ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002876:	4b2a      	ldr	r3, [pc, #168]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a29      	ldr	r2, [pc, #164]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002882:	f7ff fafd 	bl	8001e80 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288a:	f7ff faf9 	bl	8001e80 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e2dd      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800289c:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x1da>
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d074      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x21a>
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d10e      	bne.n	80028e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d064      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d160      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e2ba      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x24a>
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e026      	b.n	8002948 <HAL_RCC_OscConfig+0x298>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002902:	d115      	bne.n	8002930 <HAL_RCC_OscConfig+0x280>
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a02      	ldr	r2, [pc, #8]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e014      	b.n	8002948 <HAL_RCC_OscConfig+0x298>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	0800aca0 	.word	0x0800aca0
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004
 8002930:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a9f      	ldr	r2, [pc, #636]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a9c      	ldr	r2, [pc, #624]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff fa96 	bl	8001e80 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fa92 	bl	8001e80 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	@ 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e276      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296a:	4b92      	ldr	r3, [pc, #584]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x2a8>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fa82 	bl	8001e80 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fa7e 	bl	8001e80 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e262      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002992:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d0>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d060      	beq.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x310>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d116      	bne.n	80029ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_OscConfig+0x328>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e23f      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4973      	ldr	r1, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ec:	e040      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d023      	beq.n	8002a3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f6:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff fa3d 	bl	8001e80 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff fa39 	bl	8001e80 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e21d      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1c:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b62      	ldr	r3, [pc, #392]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	495f      	ldr	r1, [pc, #380]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e018      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa19 	bl	8001e80 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff fa15 	bl	8001e80 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1f9      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a64:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01c      	beq.n	8002abe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a84:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7ff f9f4 	bl	8001e80 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff f9f0 	bl	8001e80 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1d4      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ef      	beq.n	8002a9c <HAL_RCC_OscConfig+0x3ec>
 8002abc:	e01b      	b.n	8002af6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7ff f9d7 	bl	8001e80 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7ff f9d3 	bl	8001e80 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1b7      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae8:	4b32      	ldr	r3, [pc, #200]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ef      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a6 	beq.w	8002c50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b08:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b18:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_RCC_OscConfig+0x508>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d118      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <HAL_RCC_OscConfig+0x508>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_RCC_OscConfig+0x508>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b48:	f7ff f99a 	bl	8001e80 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7ff f996 	bl	8001e80 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e17a      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <HAL_RCC_OscConfig+0x508>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4d8>
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b86:	e029      	b.n	8002bdc <HAL_RCC_OscConfig+0x52c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d115      	bne.n	8002bbc <HAL_RCC_OscConfig+0x50c>
 8002b90:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b96:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a03      	ldr	r2, [pc, #12]	@ (8002bb4 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x52c>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bcc:	4b98      	ldr	r3, [pc, #608]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	4a97      	ldr	r2, [pc, #604]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d016      	beq.n	8002c12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff f94c 	bl	8001e80 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7ff f948 	bl	8001e80 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e12a      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c02:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ed      	beq.n	8002bec <HAL_RCC_OscConfig+0x53c>
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7ff f935 	bl	8001e80 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7ff f931 	bl	8001e80 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e113      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c30:	4b7f      	ldr	r3, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ed      	bne.n	8002c1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c44:	4b7a      	ldr	r3, [pc, #488]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	4a79      	ldr	r2, [pc, #484]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80fe 	beq.w	8002e56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	f040 80d0 	bne.w	8002e04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c64:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d130      	bne.n	8002cda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	3b01      	subs	r3, #1
 8002c84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d127      	bne.n	8002cda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d11f      	bne.n	8002cda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ca4:	2a07      	cmp	r2, #7
 8002ca6:	bf14      	ite	ne
 8002ca8:	2201      	movne	r2, #1
 8002caa:	2200      	moveq	r2, #0
 8002cac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d113      	bne.n	8002cda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d109      	bne.n	8002cda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d06e      	beq.n	8002db8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d069      	beq.n	8002db4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0ad      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d08:	f7ff f8ba 	bl	8001e80 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7ff f8b6 	bl	8001e80 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e09a      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d22:	4b43      	ldr	r3, [pc, #268]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2e:	4b40      	ldr	r3, [pc, #256]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b40      	ldr	r3, [pc, #256]	@ (8002e34 <HAL_RCC_OscConfig+0x784>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d48:	0212      	lsls	r2, r2, #8
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0552      	lsls	r2, r2, #21
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d5c:	0852      	lsrs	r2, r2, #1
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0652      	lsls	r2, r2, #25
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d68:	0912      	lsrs	r2, r2, #4
 8002d6a:	0452      	lsls	r2, r2, #17
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	4930      	ldr	r1, [pc, #192]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d74:	4b2e      	ldr	r3, [pc, #184]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2d      	ldr	r2, [pc, #180]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a2a      	ldr	r2, [pc, #168]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d8c:	f7ff f878 	bl	8001e80 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7ff f874 	bl	8001e80 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e058      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db2:	e050      	b.n	8002e56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e04f      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d148      	bne.n	8002e56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ddc:	f7ff f850 	bl	8001e80 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7ff f84c 	bl	8001e80 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e030      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x734>
 8002e02:	e028      	b.n	8002e56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d023      	beq.n	8002e52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <HAL_RCC_OscConfig+0x780>)
 8002e10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7ff f833 	bl	8001e80 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	e00c      	b.n	8002e38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7ff f82f 	bl	8001e80 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d905      	bls.n	8002e38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e013      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ec      	bne.n	8002e1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4905      	ldr	r1, [pc, #20]	@ (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_RCC_OscConfig+0x7b4>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60cb      	str	r3, [r1, #12]
 8002e50:	e001      	b.n	8002e56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	feeefffc 	.word	0xfeeefffc

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0e7      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b75      	ldr	r3, [pc, #468]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b72      	ldr	r3, [pc, #456]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4970      	ldr	r1, [pc, #448]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cf      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b66      	ldr	r3, [pc, #408]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d908      	bls.n	8002eda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b63      	ldr	r3, [pc, #396]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4960      	ldr	r1, [pc, #384]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04c      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	4b5a      	ldr	r3, [pc, #360]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d121      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0a6      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e09a      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e08e      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e086      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4943      	ldr	r1, [pc, #268]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe ff96 	bl	8001e80 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe ff92 	bl	8001e80 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e06e      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	492b      	ldr	r1, [pc, #172]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d210      	bcs.n	8002fde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 0207 	bic.w	r2, r3, #7
 8002fc4:	4923      	ldr	r1, [pc, #140]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e036      	b.n	800304c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fea:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4918      	ldr	r1, [pc, #96]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4910      	ldr	r1, [pc, #64]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800301c:	f000 f824 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	490b      	ldr	r1, [pc, #44]	@ (800305c <HAL_RCC_ClockConfig+0x1f4>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 800303a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800303c:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_RCC_ClockConfig+0x1fc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fecd 	bl	8001de0 <HAL_InitTick>
 8003046:	4603      	mov	r3, r0
 8003048:	72fb      	strb	r3, [r7, #11]

  return status;
 800304a:	7afb      	ldrb	r3, [r7, #11]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40022000 	.word	0x40022000
 8003058:	40021000 	.word	0x40021000
 800305c:	0800aca0 	.word	0x0800aca0
 8003060:	20000000 	.word	0x20000000
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b3e      	ldr	r3, [pc, #248]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d121      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d11e      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800309c:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030a8:	4b31      	ldr	r3, [pc, #196]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e005      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10d      	bne.n	80030f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d102      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e0:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x110>)
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e004      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030ec:	4b23      	ldr	r3, [pc, #140]	@ (800317c <HAL_RCC_GetSysClockFreq+0x114>)
 80030ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d134      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0xa6>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d003      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0xac>
 800310c:	e005      	b.n	800311a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800310e:	4b1a      	ldr	r3, [pc, #104]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x110>)
 8003110:	617b      	str	r3, [r7, #20]
      break;
 8003112:	e005      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_RCC_GetSysClockFreq+0x114>)
 8003116:	617b      	str	r3, [r7, #20]
      break;
 8003118:	e002      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	617b      	str	r3, [r7, #20]
      break;
 800311e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	3301      	adds	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800312e:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	fb03 f202 	mul.w	r2, r3, r2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x108>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	0e5b      	lsrs	r3, r3, #25
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	3301      	adds	r3, #1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003160:	69bb      	ldr	r3, [r7, #24]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	0800acb8 	.word	0x0800acb8
 8003178:	00f42400 	.word	0x00f42400
 800317c:	007a1200 	.word	0x007a1200

08003180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4904      	ldr	r1, [pc, #16]	@ (80031c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800acb0 	.word	0x0800acb0

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c8:	f7ff ffda 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0adb      	lsrs	r3, r3, #11
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4904      	ldr	r1, [pc, #16]	@ (80031ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	0800acb0 	.word	0x0800acb0

080031f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031fc:	4b2a      	ldr	r3, [pc, #168]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003208:	f7ff f9ee 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 800320c:	6178      	str	r0, [r7, #20]
 800320e:	e014      	b.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4a24      	ldr	r2, [pc, #144]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	@ 0x58
 800321c:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003228:	f7ff f9de 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 800322c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003240:	d10b      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b80      	cmp	r3, #128	@ 0x80
 8003246:	d919      	bls.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2ba0      	cmp	r3, #160	@ 0xa0
 800324c:	d902      	bls.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800324e:	2302      	movs	r3, #2
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e013      	b.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003254:	2301      	movs	r3, #1
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e010      	b.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b80      	cmp	r3, #128	@ 0x80
 800325e:	d902      	bls.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003260:	2303      	movs	r3, #3
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e00a      	b.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b80      	cmp	r3, #128	@ 0x80
 800326a:	d102      	bne.n	8003272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326c:	2302      	movs	r3, #2
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e004      	b.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b70      	cmp	r3, #112	@ 0x70
 8003276:	d101      	bne.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003278:	2301      	movs	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	4909      	ldr	r1, [pc, #36]	@ (80032ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	d001      	beq.n	800329e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40022000 	.word	0x40022000

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b8:	2300      	movs	r3, #0
 80032ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032bc:	2300      	movs	r3, #0
 80032be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d041      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032d4:	d02a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032da:	d824      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032e6:	d81e      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032f0:	d010      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f2:	e018      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f4:	4b86      	ldr	r3, [pc, #536]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a85      	ldr	r2, [pc, #532]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003300:	e015      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fabb 	bl	8003884 <RCCEx_PLLSAI1_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003312:	e00c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3320      	adds	r3, #32
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fba6 	bl	8003a6c <RCCEx_PLLSAI2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	74fb      	strb	r3, [r7, #19]
      break;
 800332a:	e000      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800332c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003334:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003342:	4973      	ldr	r1, [pc, #460]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d041      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003360:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003364:	d02a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003366:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800336a:	d824      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800336c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003376:	d81e      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003380:	d010      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003382:	e018      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003384:	4b62      	ldr	r3, [pc, #392]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a61      	ldr	r2, [pc, #388]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003390:	e015      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fa73 	bl	8003884 <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a2:	e00c      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3320      	adds	r3, #32
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb5e 	bl	8003a6c <RCCEx_PLLSAI2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033c4:	4b52      	ldr	r3, [pc, #328]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d2:	494f      	ldr	r1, [pc, #316]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a0 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f2:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b41      	ldr	r3, [pc, #260]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	4a40      	ldr	r2, [pc, #256]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	@ 0x58
 8003414:	4b3e      	ldr	r3, [pc, #248]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003424:	4b3b      	ldr	r3, [pc, #236]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3a      	ldr	r2, [pc, #232]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003430:	f7fe fd26 	bl	8001e80 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fe fd22 	bl	8001e80 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d902      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	74fb      	strb	r3, [r7, #19]
        break;
 800344a:	e005      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800344c:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ef      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d15c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800345e:	4b2c      	ldr	r3, [pc, #176]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d019      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800347c:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003488:	4b21      	ldr	r3, [pc, #132]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003498:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a8:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe fce1 	bl	8001e80 <HAL_GetTick>
 80034be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	e00b      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fcdd 	bl	8001e80 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d902      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	74fb      	strb	r3, [r7, #19]
            break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ec      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ee:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	4904      	ldr	r1, [pc, #16]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351c:	7c7b      	ldrb	r3, [r7, #17]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4b9e      	ldr	r3, [pc, #632]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4a9d      	ldr	r2, [pc, #628]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4b98      	ldr	r3, [pc, #608]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f023 0203 	bic.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	4994      	ldr	r1, [pc, #592]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355c:	4b8f      	ldr	r3, [pc, #572]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	f023 020c 	bic.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356a:	498c      	ldr	r1, [pc, #560]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800357e:	4b87      	ldr	r3, [pc, #540]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003584:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	4983      	ldr	r1, [pc, #524]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a0:	4b7e      	ldr	r3, [pc, #504]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	497b      	ldr	r1, [pc, #492]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c2:	4b76      	ldr	r3, [pc, #472]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d0:	4972      	ldr	r1, [pc, #456]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e4:	4b6d      	ldr	r3, [pc, #436]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	496a      	ldr	r1, [pc, #424]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003606:	4b65      	ldr	r3, [pc, #404]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	4961      	ldr	r1, [pc, #388]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003628:	4b5c      	ldr	r3, [pc, #368]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	4959      	ldr	r1, [pc, #356]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364a:	4b54      	ldr	r3, [pc, #336]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003658:	4950      	ldr	r1, [pc, #320]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366c:	4b4b      	ldr	r3, [pc, #300]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	4948      	ldr	r1, [pc, #288]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368e:	4b43      	ldr	r3, [pc, #268]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	493f      	ldr	r1, [pc, #252]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d028      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b0:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036be:	4937      	ldr	r1, [pc, #220]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ce:	d106      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b32      	ldr	r3, [pc, #200]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a31      	ldr	r2, [pc, #196]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	e011      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8c8 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800370e:	4b23      	ldr	r3, [pc, #140]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371c:	491f      	ldr	r1, [pc, #124]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372c:	d106      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003738:	60d3      	str	r3, [r2, #12]
 800373a:	e011      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f899 	bl	8003884 <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377a:	4908      	ldr	r1, [pc, #32]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a02      	ldr	r2, [pc, #8]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e014      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f867 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037de:	4928      	ldr	r1, [pc, #160]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ee:	d10d      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f844 	bl	8003884 <RCCEx_PLLSAI1_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d014      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	74bb      	strb	r3, [r7, #18]
 800380a:	e011      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003814:	d10c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3320      	adds	r3, #32
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f925 	bl	8003a6c <RCCEx_PLLSAI2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800383c:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384a:	490d      	ldr	r1, [pc, #52]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385e:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003864:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003876:	7cbb      	ldrb	r3, [r7, #18]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003892:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800389e:	4b72      	ldr	r3, [pc, #456]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
       ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
       ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d047      	beq.n	800395a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e044      	b.n	800395a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d018      	beq.n	800390a <RCCEx_PLLSAI1_Config+0x86>
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d825      	bhi.n	8003928 <RCCEx_PLLSAI1_Config+0xa4>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <RCCEx_PLLSAI1_Config+0x62>
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d009      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x74>
 80038e4:	e020      	b.n	8003928 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e6:	4b60      	ldr	r3, [pc, #384]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f6:	e01a      	b.n	800392e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003908:	e013      	b.n	8003932 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390a:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003916:	4b54      	ldr	r3, [pc, #336]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003926:	e006      	b.n	8003936 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e004      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003936:	bf00      	nop
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	430b      	orrs	r3, r1
 8003954:	4944      	ldr	r1, [pc, #272]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d17d      	bne.n	8003a5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003960:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fe fa88 	bl	8001e80 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fe fa84 	bl	8001e80 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003988:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ef      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d160      	bne.n	8003a5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a0:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	0912      	lsrs	r2, r2, #4
 80039b8:	0452      	lsls	r2, r2, #17
 80039ba:	430a      	orrs	r2, r1
 80039bc:	492a      	ldr	r1, [pc, #168]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	610b      	str	r3, [r1, #16]
 80039c2:	e027      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d112      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ca:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	0211      	lsls	r1, r2, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6912      	ldr	r2, [r2, #16]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	3a01      	subs	r2, #1
 80039e4:	0552      	lsls	r2, r2, #21
 80039e6:	430a      	orrs	r2, r1
 80039e8:	491f      	ldr	r1, [pc, #124]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]
 80039ee:	e011      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	0211      	lsls	r1, r2, #8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6952      	ldr	r2, [r2, #20]
 8003a06:	0852      	lsrs	r2, r2, #1
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	0652      	lsls	r2, r2, #25
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a14:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a13      	ldr	r2, [pc, #76]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe fa2e 	bl	8001e80 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a28:	f7fe fa2a 	bl	8001e80 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
          break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a86:	4b67      	ldr	r3, [pc, #412]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0203 	and.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d10d      	bne.n	8003ab2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
       ||
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a9e:	4b61      	ldr	r3, [pc, #388]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
       ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d047      	beq.n	8003b42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e044      	b.n	8003b42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d018      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0x86>
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d825      	bhi.n	8003b10 <RCCEx_PLLSAI2_Config+0xa4>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d002      	beq.n	8003ace <RCCEx_PLLSAI2_Config+0x62>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d009      	beq.n	8003ae0 <RCCEx_PLLSAI2_Config+0x74>
 8003acc:	e020      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ace:	4b55      	ldr	r3, [pc, #340]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ade:	e01a      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae0:	4b50      	ldr	r3, [pc, #320]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e013      	b.n	8003b1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af2:	4b4c      	ldr	r3, [pc, #304]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afe:	4b49      	ldr	r3, [pc, #292]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0e:	e006      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e004      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b26:	4b3f      	ldr	r3, [pc, #252]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4939      	ldr	r1, [pc, #228]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d167      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a35      	ldr	r2, [pc, #212]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fe f994 	bl	8001e80 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b5a:	e009      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b5c:	f7fe f990 	bl	8001e80 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6e:	e005      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b70:	4b2c      	ldr	r3, [pc, #176]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ef      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d14a      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d111      	bne.n	8003bac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b88:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	0912      	lsrs	r2, r2, #4
 8003ba0:	0452      	lsls	r2, r2, #17
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	491f      	ldr	r1, [pc, #124]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	614b      	str	r3, [r1, #20]
 8003baa:	e011      	b.n	8003bd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6892      	ldr	r2, [r2, #8]
 8003bbc:	0211      	lsls	r1, r2, #8
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6912      	ldr	r2, [r2, #16]
 8003bc2:	0852      	lsrs	r2, r2, #1
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	0652      	lsls	r2, r2, #25
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	4916      	ldr	r1, [pc, #88]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fe f950 	bl	8001e80 <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003be2:	e009      	b.n	8003bf8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be4:	f7fe f94c 	bl	8001e80 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d902      	bls.n	8003bf8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf6:	e005      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ef      	beq.n	8003be4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e095      	b.n	8003d66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4a:	d009      	beq.n	8003c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	e005      	b.n	8003c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fe8e 	bl	800199c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ca0:	d902      	bls.n	8003ca8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e002      	b.n	8003cae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cb6:	d007      	beq.n	8003cc8 <HAL_SPI_Init+0xa0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	ea42 0103 	orr.w	r1, r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 0204 	and.w	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7e:	f7fe f87f 	bl	8001e80 <HAL_GetTick>
 8003d82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d001      	beq.n	8003d98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
 8003d96:	e15c      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Transmit+0x36>
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e154      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_SPI_Transmit+0x48>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e14d      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e08:	d10f      	bne.n	8003e2a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b40      	cmp	r3, #64	@ 0x40
 8003e36:	d007      	beq.n	8003e48 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e50:	d952      	bls.n	8003ef8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0xf2>
 8003e5a:	8b7b      	ldrh	r3, [r7, #26]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d145      	bne.n	8003eec <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e84:	e032      	b.n	8003eec <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d112      	bne.n	8003eba <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb8:	e018      	b.n	8003eec <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eba:	f7fd ffe1 	bl	8001e80 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d803      	bhi.n	8003ed2 <HAL_SPI_Transmit+0x164>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d102      	bne.n	8003ed8 <HAL_SPI_Transmit+0x16a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0b2      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1c7      	bne.n	8003e86 <HAL_SPI_Transmit+0x118>
 8003ef6:	e083      	b.n	8004000 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Transmit+0x198>
 8003f00:	8b7b      	ldrh	r3, [r7, #26]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d177      	bne.n	8003ff6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d912      	bls.n	8003f36 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	1c9a      	adds	r2, r3, #2
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b02      	subs	r3, #2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f34:	e05f      	b.n	8003ff6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f5c:	e04b      	b.n	8003ff6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d12b      	bne.n	8003fc4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d912      	bls.n	8003f9c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	881a      	ldrh	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b02      	subs	r3, #2
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f9a:	e02c      	b.n	8003ff6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fc2:	e018      	b.n	8003ff6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc4:	f7fd ff5c 	bl	8001e80 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d803      	bhi.n	8003fdc <HAL_SPI_Transmit+0x26e>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Transmit+0x274>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e02d      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ae      	bne.n	8003f5e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fe15 	bl	8004c34 <SPI_EndRxTxTransaction>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004050:	2300      	movs	r3, #0
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b088      	sub	sp, #32
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	e123      	b.n	80042c2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Receive+0x50>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10e      	bne.n	80040aa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2204      	movs	r2, #4
 8004090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f912 	bl	80042ca <HAL_SPI_TransmitReceive>
 80040a6:	4603      	mov	r3, r0
 80040a8:	e10b      	b.n	80042c2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040aa:	f7fd fee9 	bl	8001e80 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_SPI_Receive+0x62>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e100      	b.n	80042c2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_SPI_Receive+0x74>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0f9      	b.n	80042c2 <HAL_SPI_Receive+0x268>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2204      	movs	r2, #4
 80040da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004120:	d908      	bls.n	8004134 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e007      	b.n	8004144 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414c:	d10f      	bne.n	800416e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800415c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800416c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004178:	2b40      	cmp	r3, #64	@ 0x40
 800417a:	d007      	beq.n	800418c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004194:	d875      	bhi.n	8004282 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004196:	e037      	b.n	8004208 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d117      	bne.n	80041d6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f103 020c 	add.w	r2, r3, #12
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80041d4:	e018      	b.n	8004208 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d6:	f7fd fe53 	bl	8001e80 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d803      	bhi.n	80041ee <HAL_SPI_Receive+0x194>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d102      	bne.n	80041f4 <HAL_SPI_Receive+0x19a>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05c      	b.n	80042c2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1c1      	bne.n	8004198 <HAL_SPI_Receive+0x13e>
 8004214:	e03b      	b.n	800428e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d115      	bne.n	8004250 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	b292      	uxth	r2, r2
 8004230:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800424e:	e018      	b.n	8004282 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004250:	f7fd fe16 	bl	8001e80 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d803      	bhi.n	8004268 <HAL_SPI_Receive+0x20e>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d102      	bne.n	800426e <HAL_SPI_Receive+0x214>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e01f      	b.n	80042c2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1c3      	bne.n	8004216 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fc76 	bl	8004b84 <SPI_EndRxTransaction>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	@ 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042d8:	2301      	movs	r3, #1
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042dc:	f7fd fdd0 	bl	8001e80 <HAL_GetTick>
 80042e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d00c      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x4e>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004304:	d106      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x4a>
 800430e:	7ffb      	ldrb	r3, [r7, #31]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d001      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e1f3      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_SPI_TransmitReceive+0x60>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_TransmitReceive+0x60>
 8004324:	887b      	ldrh	r3, [r7, #2]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e1e8      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_SPI_TransmitReceive+0x72>
 8004338:	2302      	movs	r3, #2
 800433a:	e1e1      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b04      	cmp	r3, #4
 800434e:	d003      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2205      	movs	r2, #5
 8004354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	887a      	ldrh	r2, [r7, #2]
 800437e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439a:	d802      	bhi.n	80043a2 <HAL_SPI_TransmitReceive+0xd8>
 800439c:	8abb      	ldrh	r3, [r7, #20]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d908      	bls.n	80043b4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	e007      	b.n	80043c4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d007      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043ea:	f240 8083 	bls.w	80044f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x132>
 80043f6:	8afb      	ldrh	r3, [r7, #22]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d16f      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004420:	e05c      	b.n	80044dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d11b      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x19e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x19e>
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b01      	cmp	r3, #1
 800443e:	d113      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11c      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x1e6>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	b292      	uxth	r2, r2
 800448e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044b0:	f7fd fce6 	bl	8001e80 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044bc:	429a      	cmp	r2, r3
 80044be:	d80d      	bhi.n	80044dc <HAL_SPI_TransmitReceive+0x212>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e111      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d19d      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x158>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d197      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x158>
 80044f2:	e0e5      	b.n	80046c0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x23a>
 80044fc:	8afb      	ldrh	r3, [r7, #22]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	f040 80d1 	bne.w	80046a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d912      	bls.n	8004534 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	881a      	ldrh	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b02      	subs	r3, #2
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004532:	e0b8      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	7812      	ldrb	r2, [r2, #0]
 8004540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455a:	e0a4      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d134      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x30a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d02f      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x30a>
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	2b01      	cmp	r3, #1
 8004578:	d12c      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d912      	bls.n	80045aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b02      	subs	r3, #2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a8:	e012      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d148      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x3aa>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d042      	beq.n	8004674 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d923      	bls.n	8004642 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	b292      	uxth	r2, r2
 8004606:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b02      	subs	r3, #2
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d81f      	bhi.n	8004670 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	e016      	b.n	8004670 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f103 020c 	add.w	r2, r3, #12
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004674:	f7fd fc04 	bl	8001e80 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004680:	429a      	cmp	r2, r3
 8004682:	d803      	bhi.n	800468c <HAL_SPI_TransmitReceive+0x3c2>
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d102      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x3c8>
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e02c      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f af55 	bne.w	800455c <HAL_SPI_TransmitReceive+0x292>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f47f af4e 	bne.w	800455c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fab5 	bl	8004c34 <SPI_EndRxTxTransaction>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e00e      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3728      	adds	r7, #40	@ 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
    return;
 800474a:	e0d7      	b.n	80048fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_SPI_IRQHandler+0x66>
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	09db      	lsrs	r3, r3, #7
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
    return;
 800476c:	e0c6      	b.n	80048fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <HAL_SPI_IRQHandler+0x8c>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80b4 	beq.w	80048fc <HAL_SPI_IRQHandler+0x1f4>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80ad 	beq.w	80048fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d023      	beq.n	80047f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d011      	beq.n	80047de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e00b      	b.n	80047f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]
        return;
 80047f4:	e082      	b.n	80048fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483c:	f043 0208 	orr.w	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	2b00      	cmp	r3, #0
 8004858:	d04f      	beq.n	80048fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004868:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_SPI_IRQHandler+0x17e>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d034      	beq.n	80048f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0203 	bic.w	r2, r2, #3
 8004894:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <HAL_SPI_IRQHandler+0x1fc>)
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fc67 	bl	800217e <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004904 <HAL_SPI_IRQHandler+0x1fc>)
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fc51 	bl	800217e <HAL_DMA_Abort_IT>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80048ee:	e003      	b.n	80048f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f809 	bl	8004908 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048f6:	e000      	b.n	80048fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048f8:	bf00      	nop
    return;
 80048fa:	bf00      	nop
  }
}
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	0800491d 	.word	0x0800491d

08004908 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ffe5 	bl	8004908 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004958:	f7fd fa92 	bl	8001e80 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004968:	f7fd fa8a 	bl	8001e80 <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496e:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	0d1b      	lsrs	r3, r3, #20
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497e:	e054      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d050      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004988:	f7fd fa7a 	bl	8001e80 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	429a      	cmp	r2, r3
 8004996:	d902      	bls.n	800499e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13d      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b6:	d111      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	d004      	beq.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ca:	d107      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e4:	d10f      	bne.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e017      	b.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d19b      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000000 	.word	0x20000000

08004a58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a6a:	f7fd fa09 	bl	8001e80 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a7a:	f7fd fa01 	bl	8001e80 <HAL_GetTick>
 8004a7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a88:	4b3d      	ldr	r3, [pc, #244]	@ (8004b80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	00da      	lsls	r2, r3, #3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	0d1b      	lsrs	r3, r3, #20
 8004a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004aa0:	e060      	b.n	8004b64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004aa8:	d107      	bne.n	8004aba <SPI_WaitFifoStateUntilTimeout+0x62>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d050      	beq.n	8004b64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac2:	f7fd f9dd 	bl	8001e80 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d902      	bls.n	8004ad8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d13d      	bne.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ae6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af0:	d111      	bne.n	8004b16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afa:	d004      	beq.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b04:	d107      	bne.n	8004b16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b1e:	d10f      	bne.n	8004b40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e010      	b.n	8004b76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d196      	bne.n	8004aa2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3728      	adds	r7, #40	@ 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000000 	.word	0x20000000

08004b84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b98:	d111      	bne.n	8004bbe <SPI_EndRxTransaction+0x3a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba2:	d004      	beq.n	8004bae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bac:	d107      	bne.n	8004bbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff febd 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e023      	b.n	8004c2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bec:	d11d      	bne.n	8004c2a <SPI_EndRxTransaction+0xa6>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf6:	d004      	beq.n	8004c02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c00:	d113      	bne.n	8004c2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff ff22 	bl	8004a58 <SPI_WaitFifoStateUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e000      	b.n	8004c2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff ff03 	bl	8004a58 <SPI_WaitFifoStateUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e027      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2180      	movs	r1, #128	@ 0x80
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fe68 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e014      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff fedc 	bl	8004a58 <SPI_WaitFifoStateUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e000      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e040      	b.n	8004d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc fea6 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	@ 0x24
 8004cec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fedc 	bl	8005ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fc21 	bl	8005554 <UART_SetConfig>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e01b      	b.n	8004d54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 ff5b 	bl	8005c08 <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d177      	bne.n	8004e64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Transmit+0x24>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e070      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2221      	movs	r2, #33	@ 0x21
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d92:	f7fd f875 	bl	8001e80 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db0:	d108      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dcc:	e02f      	b.n	8004e2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2180      	movs	r1, #128	@ 0x80
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 ffbd 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e03b      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e00:	b292      	uxth	r2, r2
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	3302      	adds	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e007      	b.n	8004e1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1c9      	bne.n	8004dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2140      	movs	r1, #64	@ 0x40
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 ff87 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e005      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	@ 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d137      	bne.n	8004ef8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Receive_IT+0x24>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e030      	b.n	8004efa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <HAL_UART_Receive_IT+0x94>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d01f      	beq.n	8004ee8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d018      	beq.n	8004ee8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 ffa0 	bl	8005e34 <UART_Start_Receive_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	e000      	b.n	8004efa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3728      	adds	r7, #40	@ 0x28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40008000 	.word	0x40008000

08004f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f36:	4013      	ands	r3, r2
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d115      	bne.n	8004f70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 82ca 	beq.w	80054fa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      }
      return;
 8004f6e:	e2c4      	b.n	80054fa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8117 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f8a:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_UART_IRQHandler+0x298>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 810a 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d011      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
 8004fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501a:	f043 0202 	orr.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2208      	movs	r2, #8
 800504e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005068:	2b00      	cmp	r3, #0
 800506a:	d012      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8230 	beq.w	80054fe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d005      	beq.n	80050ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04f      	beq.n	800518a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 ff68 	bl	8005fc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d141      	bne.n	8005182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800511c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800512a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800512e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1d9      	bne.n	80050fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	4a13      	ldr	r2, [pc, #76]	@ (80051a4 <HAL_UART_IRQHandler+0x29c>)
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd f80d 	bl	800217e <HAL_DMA_Abort_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005174:	4610      	mov	r0, r2
 8005176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	e00f      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9d4 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	e00b      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9d0 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e007      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9cc 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005198:	e1b1      	b.n	80054fe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	bf00      	nop
    return;
 800519c:	e1af      	b.n	80054fe <HAL_UART_IRQHandler+0x5f6>
 800519e:	bf00      	nop
 80051a0:	04000120 	.word	0x04000120
 80051a4:	08006089 	.word	0x08006089

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 816a 	bne.w	8005486 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8163 	beq.w	8005486 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 815c 	beq.w	8005486 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	f040 80d4 	bne.w	800538e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80ad 	beq.w	8005356 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005206:	429a      	cmp	r2, r3
 8005208:	f080 80a5 	bcs.w	8005356 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005212:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 8086 	bne.w	8005334 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800523c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005256:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800525e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1da      	bne.n	8005228 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3308      	adds	r3, #8
 8005278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800529a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800529e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e1      	bne.n	8005272 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005304:	f023 0310 	bic.w	r3, r3, #16
 8005308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005316:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005318:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800531c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e4      	bne.n	80052f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532e:	4618      	mov	r0, r3
 8005330:	f7fc fee7 	bl	8002102 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005346:	b29b      	uxth	r3, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b29b      	uxth	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8f4 	bl	800553c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005354:	e0d5      	b.n	8005502 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800535c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005360:	429a      	cmp	r2, r3
 8005362:	f040 80ce 	bne.w	8005502 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b20      	cmp	r3, #32
 8005374:	f040 80c5 	bne.w	8005502 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8d8 	bl	800553c <HAL_UARTEx_RxEventCallback>
      return;
 800538c:	e0b9      	b.n	8005502 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800539a:	b29b      	uxth	r3, r3
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80ab 	beq.w	8005506 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80053b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a6 	beq.w	8005506 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e4      	bne.n	80053ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005414:	633a      	str	r2, [r7, #48]	@ 0x30
 8005416:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e3      	bne.n	80053f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	60fb      	str	r3, [r7, #12]
   return(result);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	617b      	str	r3, [r7, #20]
   return(result);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e4      	bne.n	800543c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f85c 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005484:	e03f      	b.n	8005506 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <HAL_UART_IRQHandler+0x5a8>
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 ffe9 	bl	8006480 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ae:	e02d      	b.n	800550c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01c      	beq.n	800550a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
    }
    return;
 80054d8:	e017      	b.n	800550a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <HAL_UART_IRQHandler+0x604>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00c      	beq.n	800550c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fdde 	bl	80060b4 <UART_EndTransmit_IT>
    return;
 80054f8:	e008      	b.n	800550c <HAL_UART_IRQHandler+0x604>
      return;
 80054fa:	bf00      	nop
 80054fc:	e006      	b.n	800550c <HAL_UART_IRQHandler+0x604>
    return;
 80054fe:	bf00      	nop
 8005500:	e004      	b.n	800550c <HAL_UART_IRQHandler+0x604>
      return;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <HAL_UART_IRQHandler+0x604>
      return;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_UART_IRQHandler+0x604>
    return;
 800550a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800550c:	37e8      	adds	r7, #232	@ 0xe8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop

08005514 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b08a      	sub	sp, #40	@ 0x28
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4313      	orrs	r3, r2
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4ba4      	ldr	r3, [pc, #656]	@ (8005814 <UART_SetConfig+0x2c0>)
 8005584:	4013      	ands	r3, r2
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800558c:	430b      	orrs	r3, r1
 800558e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a99      	ldr	r2, [pc, #612]	@ (8005818 <UART_SetConfig+0x2c4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	4313      	orrs	r3, r2
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a90      	ldr	r2, [pc, #576]	@ (800581c <UART_SetConfig+0x2c8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d126      	bne.n	800562c <UART_SetConfig+0xd8>
 80055de:	4b90      	ldr	r3, [pc, #576]	@ (8005820 <UART_SetConfig+0x2cc>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d81b      	bhi.n	8005624 <UART_SetConfig+0xd0>
 80055ec:	a201      	add	r2, pc, #4	@ (adr r2, 80055f4 <UART_SetConfig+0xa0>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005605 	.word	0x08005605
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800561d 	.word	0x0800561d
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560a:	e116      	b.n	800583a <UART_SetConfig+0x2e6>
 800560c:	2302      	movs	r3, #2
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005612:	e112      	b.n	800583a <UART_SetConfig+0x2e6>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800561a:	e10e      	b.n	800583a <UART_SetConfig+0x2e6>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005622:	e10a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562a:	e106      	b.n	800583a <UART_SetConfig+0x2e6>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7c      	ldr	r2, [pc, #496]	@ (8005824 <UART_SetConfig+0x2d0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d138      	bne.n	80056a8 <UART_SetConfig+0x154>
 8005636:	4b7a      	ldr	r3, [pc, #488]	@ (8005820 <UART_SetConfig+0x2cc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d82d      	bhi.n	80056a0 <UART_SetConfig+0x14c>
 8005644:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0xf8>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005681 	.word	0x08005681
 8005650:	080056a1 	.word	0x080056a1
 8005654:	080056a1 	.word	0x080056a1
 8005658:	080056a1 	.word	0x080056a1
 800565c:	08005691 	.word	0x08005691
 8005660:	080056a1 	.word	0x080056a1
 8005664:	080056a1 	.word	0x080056a1
 8005668:	080056a1 	.word	0x080056a1
 800566c:	08005689 	.word	0x08005689
 8005670:	080056a1 	.word	0x080056a1
 8005674:	080056a1 	.word	0x080056a1
 8005678:	080056a1 	.word	0x080056a1
 800567c:	08005699 	.word	0x08005699
 8005680:	2300      	movs	r3, #0
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e0d8      	b.n	800583a <UART_SetConfig+0x2e6>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568e:	e0d4      	b.n	800583a <UART_SetConfig+0x2e6>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005696:	e0d0      	b.n	800583a <UART_SetConfig+0x2e6>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569e:	e0cc      	b.n	800583a <UART_SetConfig+0x2e6>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a6:	e0c8      	b.n	800583a <UART_SetConfig+0x2e6>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005828 <UART_SetConfig+0x2d4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d125      	bne.n	80056fe <UART_SetConfig+0x1aa>
 80056b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005820 <UART_SetConfig+0x2cc>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056bc:	2b30      	cmp	r3, #48	@ 0x30
 80056be:	d016      	beq.n	80056ee <UART_SetConfig+0x19a>
 80056c0:	2b30      	cmp	r3, #48	@ 0x30
 80056c2:	d818      	bhi.n	80056f6 <UART_SetConfig+0x1a2>
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d00a      	beq.n	80056de <UART_SetConfig+0x18a>
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d814      	bhi.n	80056f6 <UART_SetConfig+0x1a2>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <UART_SetConfig+0x182>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d008      	beq.n	80056e6 <UART_SetConfig+0x192>
 80056d4:	e00f      	b.n	80056f6 <UART_SetConfig+0x1a2>
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056dc:	e0ad      	b.n	800583a <UART_SetConfig+0x2e6>
 80056de:	2302      	movs	r3, #2
 80056e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e4:	e0a9      	b.n	800583a <UART_SetConfig+0x2e6>
 80056e6:	2304      	movs	r3, #4
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ec:	e0a5      	b.n	800583a <UART_SetConfig+0x2e6>
 80056ee:	2308      	movs	r3, #8
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f4:	e0a1      	b.n	800583a <UART_SetConfig+0x2e6>
 80056f6:	2310      	movs	r3, #16
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fc:	e09d      	b.n	800583a <UART_SetConfig+0x2e6>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4a      	ldr	r2, [pc, #296]	@ (800582c <UART_SetConfig+0x2d8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d125      	bne.n	8005754 <UART_SetConfig+0x200>
 8005708:	4b45      	ldr	r3, [pc, #276]	@ (8005820 <UART_SetConfig+0x2cc>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005712:	2bc0      	cmp	r3, #192	@ 0xc0
 8005714:	d016      	beq.n	8005744 <UART_SetConfig+0x1f0>
 8005716:	2bc0      	cmp	r3, #192	@ 0xc0
 8005718:	d818      	bhi.n	800574c <UART_SetConfig+0x1f8>
 800571a:	2b80      	cmp	r3, #128	@ 0x80
 800571c:	d00a      	beq.n	8005734 <UART_SetConfig+0x1e0>
 800571e:	2b80      	cmp	r3, #128	@ 0x80
 8005720:	d814      	bhi.n	800574c <UART_SetConfig+0x1f8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <UART_SetConfig+0x1d8>
 8005726:	2b40      	cmp	r3, #64	@ 0x40
 8005728:	d008      	beq.n	800573c <UART_SetConfig+0x1e8>
 800572a:	e00f      	b.n	800574c <UART_SetConfig+0x1f8>
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005732:	e082      	b.n	800583a <UART_SetConfig+0x2e6>
 8005734:	2302      	movs	r3, #2
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e07e      	b.n	800583a <UART_SetConfig+0x2e6>
 800573c:	2304      	movs	r3, #4
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e07a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005744:	2308      	movs	r3, #8
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e076      	b.n	800583a <UART_SetConfig+0x2e6>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e072      	b.n	800583a <UART_SetConfig+0x2e6>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	@ (8005830 <UART_SetConfig+0x2dc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d12a      	bne.n	80057b4 <UART_SetConfig+0x260>
 800575e:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <UART_SetConfig+0x2cc>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800576c:	d01a      	beq.n	80057a4 <UART_SetConfig+0x250>
 800576e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005772:	d81b      	bhi.n	80057ac <UART_SetConfig+0x258>
 8005774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005778:	d00c      	beq.n	8005794 <UART_SetConfig+0x240>
 800577a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577e:	d815      	bhi.n	80057ac <UART_SetConfig+0x258>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <UART_SetConfig+0x238>
 8005784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005788:	d008      	beq.n	800579c <UART_SetConfig+0x248>
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x258>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005792:	e052      	b.n	800583a <UART_SetConfig+0x2e6>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579a:	e04e      	b.n	800583a <UART_SetConfig+0x2e6>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e04a      	b.n	800583a <UART_SetConfig+0x2e6>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e046      	b.n	800583a <UART_SetConfig+0x2e6>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e042      	b.n	800583a <UART_SetConfig+0x2e6>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <UART_SetConfig+0x2c4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d13a      	bne.n	8005834 <UART_SetConfig+0x2e0>
 80057be:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <UART_SetConfig+0x2cc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057cc:	d01a      	beq.n	8005804 <UART_SetConfig+0x2b0>
 80057ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057d2:	d81b      	bhi.n	800580c <UART_SetConfig+0x2b8>
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d8:	d00c      	beq.n	80057f4 <UART_SetConfig+0x2a0>
 80057da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057de:	d815      	bhi.n	800580c <UART_SetConfig+0x2b8>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <UART_SetConfig+0x298>
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e8:	d008      	beq.n	80057fc <UART_SetConfig+0x2a8>
 80057ea:	e00f      	b.n	800580c <UART_SetConfig+0x2b8>
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f2:	e022      	b.n	800583a <UART_SetConfig+0x2e6>
 80057f4:	2302      	movs	r3, #2
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fa:	e01e      	b.n	800583a <UART_SetConfig+0x2e6>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e01a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e016      	b.n	800583a <UART_SetConfig+0x2e6>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e012      	b.n	800583a <UART_SetConfig+0x2e6>
 8005814:	efff69f3 	.word	0xefff69f3
 8005818:	40008000 	.word	0x40008000
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	40004800 	.word	0x40004800
 800582c:	40004c00 	.word	0x40004c00
 8005830:	40005000 	.word	0x40005000
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a9f      	ldr	r2, [pc, #636]	@ (8005abc <UART_SetConfig+0x568>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d17a      	bne.n	800593a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005848:	2b08      	cmp	r3, #8
 800584a:	d824      	bhi.n	8005896 <UART_SetConfig+0x342>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <UART_SetConfig+0x300>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005879 	.word	0x08005879
 8005858:	08005897 	.word	0x08005897
 800585c:	08005881 	.word	0x08005881
 8005860:	08005897 	.word	0x08005897
 8005864:	08005887 	.word	0x08005887
 8005868:	08005897 	.word	0x08005897
 800586c:	08005897 	.word	0x08005897
 8005870:	08005897 	.word	0x08005897
 8005874:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fd fc8e 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 800587c:	61f8      	str	r0, [r7, #28]
        break;
 800587e:	e010      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b8f      	ldr	r3, [pc, #572]	@ (8005ac0 <UART_SetConfig+0x56c>)
 8005882:	61fb      	str	r3, [r7, #28]
        break;
 8005884:	e00d      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fd fbef 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 800588a:	61f8      	str	r0, [r7, #28]
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005892:	61fb      	str	r3, [r7, #28]
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80fb 	beq.w	8005aa0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d305      	bcc.n	80058c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d903      	bls.n	80058ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058cc:	e0e8      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2200      	movs	r2, #0
 80058d2:	461c      	mov	r4, r3
 80058d4:	4615      	mov	r5, r2
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	022b      	lsls	r3, r5, #8
 80058e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058e4:	0222      	lsls	r2, r4, #8
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6849      	ldr	r1, [r1, #4]
 80058ea:	0849      	lsrs	r1, r1, #1
 80058ec:	2000      	movs	r0, #0
 80058ee:	4688      	mov	r8, r1
 80058f0:	4681      	mov	r9, r0
 80058f2:	eb12 0a08 	adds.w	sl, r2, r8
 80058f6:	eb43 0b09 	adc.w	fp, r3, r9
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005908:	4650      	mov	r0, sl
 800590a:	4659      	mov	r1, fp
 800590c:	f7fb f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800591e:	d308      	bcc.n	8005932 <UART_SetConfig+0x3de>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005926:	d204      	bcs.n	8005932 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e0b6      	b.n	8005aa0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005938:	e0b2      	b.n	8005aa0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005942:	d15e      	bne.n	8005a02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005944:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005948:	2b08      	cmp	r3, #8
 800594a:	d828      	bhi.n	800599e <UART_SetConfig+0x44a>
 800594c:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <UART_SetConfig+0x400>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005979 	.word	0x08005979
 8005958:	08005981 	.word	0x08005981
 800595c:	08005989 	.word	0x08005989
 8005960:	0800599f 	.word	0x0800599f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800599f 	.word	0x0800599f
 800596c:	0800599f 	.word	0x0800599f
 8005970:	0800599f 	.word	0x0800599f
 8005974:	08005997 	.word	0x08005997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fd fc0e 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 800597c:	61f8      	str	r0, [r7, #28]
        break;
 800597e:	e014      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005980:	f7fd fc20 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8005984:	61f8      	str	r0, [r7, #28]
        break;
 8005986:	e010      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005988:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac0 <UART_SetConfig+0x56c>)
 800598a:	61fb      	str	r3, [r7, #28]
        break;
 800598c:	e00d      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598e:	f7fd fb6b 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8005992:	61f8      	str	r0, [r7, #28]
        break;
 8005994:	e009      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800599a:	61fb      	str	r3, [r7, #28]
        break;
 800599c:	e005      	b.n	80059aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d077      	beq.n	8005aa0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005a      	lsls	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b0f      	cmp	r3, #15
 80059ca:	d916      	bls.n	80059fa <UART_SetConfig+0x4a6>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d2:	d212      	bcs.n	80059fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f023 030f 	bic.w	r3, r3, #15
 80059dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	8afa      	ldrh	r2, [r7, #22]
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	e052      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a00:	e04e      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d827      	bhi.n	8005a5a <UART_SetConfig+0x506>
 8005a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <UART_SetConfig+0x4bc>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a4b 	.word	0x08005a4b
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a5b 	.word	0x08005a5b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fd fbb0 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8005a38:	61f8      	str	r0, [r7, #28]
        break;
 8005a3a:	e014      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fd fbc2 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e010      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <UART_SetConfig+0x56c>)
 8005a46:	61fb      	str	r3, [r7, #28]
        break;
 8005a48:	e00d      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fd fb0d 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8005a4e:	61f8      	str	r0, [r7, #28]
        break;
 8005a50:	e009      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a56:	61fb      	str	r3, [r7, #28]
        break;
 8005a58:	e005      	b.n	8005a66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a64:	bf00      	nop
    }

    if (pclk != 0U)
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d019      	beq.n	8005aa0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	085a      	lsrs	r2, r3, #1
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d909      	bls.n	8005a9a <UART_SetConfig+0x546>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d205      	bcs.n	8005a9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e002      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005aac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	@ 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	40008000 	.word	0x40008000
 8005ac0:	00f42400 	.word	0x00f42400

08005ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01a      	beq.n	8005bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bc2:	d10a      	bne.n	8005bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b098      	sub	sp, #96	@ 0x60
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c18:	f7fc f932 	bl	8001e80 <HAL_GetTick>
 8005c1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d12e      	bne.n	8005c8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f88c 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d021      	beq.n	8005c8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e062      	b.n	8005d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d149      	bne.n	8005d2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f856 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d03c      	beq.n	8005d2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	617b      	str	r3, [r7, #20]
   return(result);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e011      	b.n	8005d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3758      	adds	r7, #88	@ 0x58
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d68:	e04f      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d04b      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d72:	f7fc f885 	bl	8001e80 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e04e      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d037      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b80      	cmp	r3, #128	@ 0x80
 8005d9e:	d034      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b40      	cmp	r3, #64	@ 0x40
 8005da4:	d031      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d110      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2208      	movs	r2, #8
 8005dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f8ff 	bl	8005fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e029      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de4:	d111      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f8e5 	bl	8005fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e00f      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d0a0      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b097      	sub	sp, #92	@ 0x5c
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e66:	d10e      	bne.n	8005e86 <UART_Start_Receive_IT+0x52>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <UART_Start_Receive_IT+0x48>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e7a:	e02d      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	22ff      	movs	r2, #255	@ 0xff
 8005e80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e84:	e028      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <UART_Start_Receive_IT+0x76>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <UART_Start_Receive_IT+0x6c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e9e:	e01b      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	227f      	movs	r2, #127	@ 0x7f
 8005ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ea8:	e016      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eb2:	d10d      	bne.n	8005ed0 <UART_Start_Receive_IT+0x9c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <UART_Start_Receive_IT+0x92>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	227f      	movs	r2, #127	@ 0x7f
 8005ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ec4:	e008      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	223f      	movs	r2, #63	@ 0x3f
 8005eca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ece:	e003      	b.n	8005ed8 <UART_Start_Receive_IT+0xa4>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2222      	movs	r2, #34	@ 0x22
 8005ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f24:	d107      	bne.n	8005f36 <UART_Start_Receive_IT+0x102>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a21      	ldr	r2, [pc, #132]	@ (8005fb8 <UART_Start_Receive_IT+0x184>)
 8005f32:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f34:	e002      	b.n	8005f3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a20      	ldr	r2, [pc, #128]	@ (8005fbc <UART_Start_Receive_IT+0x188>)
 8005f3a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d019      	beq.n	8005f78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f64:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_Start_Receive_IT+0x110>
 8005f76:	e018      	b.n	8005faa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	613b      	str	r3, [r7, #16]
   return(result);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f043 0320 	orr.w	r3, r3, #32
 8005f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	69f9      	ldr	r1, [r7, #28]
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	375c      	adds	r7, #92	@ 0x5c
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	080062c5 	.word	0x080062c5
 8005fbc:	08006109 	.word	0x08006109

08005fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b095      	sub	sp, #84	@ 0x54
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e6      	bne.n	8005fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	61fb      	str	r3, [r7, #28]
   return(result);
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800601a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800601c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	2b01      	cmp	r3, #1
 8006034:	d118      	bne.n	8006068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60bb      	str	r3, [r7, #8]
   return(result);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	647b      	str	r3, [r7, #68]	@ 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800607c:	bf00      	nop
 800607e:	3754      	adds	r7, #84	@ 0x54
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fa3e 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	613b      	str	r3, [r7, #16]
   return(result);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fa0a 	bl	8005514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006100:	bf00      	nop
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b09c      	sub	sp, #112	@ 0x70
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006116:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006120:	2b22      	cmp	r3, #34	@ 0x22
 8006122:	f040 80be 	bne.w	80062a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800612c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006130:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006134:	b2d9      	uxtb	r1, r3
 8006136:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800613a:	b2da      	uxtb	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	400a      	ands	r2, r1
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 80a3 	bne.w	80062b6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800617e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800618e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006190:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800619c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e6      	bne.n	8006170 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80061c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a34      	ldr	r2, [pc, #208]	@ (80062c0 <UART_RxISR_8BIT+0x1b8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d01f      	beq.n	8006234 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	623b      	str	r3, [r7, #32]
   return(result);
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006216:	663b      	str	r3, [r7, #96]	@ 0x60
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30
 8006222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006238:	2b01      	cmp	r3, #1
 800623a:	d12e      	bne.n	800629a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0310 	bic.w	r3, r3, #16
 8006256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	69b9      	ldr	r1, [r7, #24]
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	617b      	str	r3, [r7, #20]
   return(result);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d103      	bne.n	800628a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2210      	movs	r2, #16
 8006288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff f952 	bl	800553c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006298:	e00d      	b.n	80062b6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fa fec0 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 80062a0:	e009      	b.n	80062b6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	8b1b      	ldrh	r3, [r3, #24]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0208 	orr.w	r2, r2, #8
 80062b2:	b292      	uxth	r2, r2
 80062b4:	831a      	strh	r2, [r3, #24]
}
 80062b6:	bf00      	nop
 80062b8:	3770      	adds	r7, #112	@ 0x70
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40008000 	.word	0x40008000

080062c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b09c      	sub	sp, #112	@ 0x70
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062dc:	2b22      	cmp	r3, #34	@ 0x22
 80062de:	f040 80be 	bne.w	800645e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80062f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062fa:	4013      	ands	r3, r2
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006300:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006306:	1c9a      	adds	r2, r3, #2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 80a3 	bne.w	8006472 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800633a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006340:	667b      	str	r3, [r7, #100]	@ 0x64
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800634a:	657b      	str	r3, [r7, #84]	@ 0x54
 800634c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006350:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	663b      	str	r3, [r7, #96]	@ 0x60
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800637e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a34      	ldr	r2, [pc, #208]	@ (800647c <UART_RxISR_16BIT+0x1b8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d01f      	beq.n	80063f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d12e      	bne.n	8006456 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60bb      	str	r3, [r7, #8]
   return(result);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6979      	ldr	r1, [r7, #20]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	613b      	str	r3, [r7, #16]
   return(result);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d103      	bne.n	8006446 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2210      	movs	r2, #16
 8006444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff f874 	bl	800553c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006454:	e00d      	b.n	8006472 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fa fde2 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 800645c:	e009      	b.n	8006472 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	8b1b      	ldrh	r3, [r3, #24]
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0208 	orr.w	r2, r2, #8
 800646e:	b292      	uxth	r2, r2
 8006470:	831a      	strh	r2, [r3, #24]
}
 8006472:	bf00      	nop
 8006474:	3770      	adds	r7, #112	@ 0x70
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40008000 	.word	0x40008000

08006480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <__cvt>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	ec57 6b10 	vmov	r6, r7, d0
 800649c:	2f00      	cmp	r7, #0
 800649e:	460c      	mov	r4, r1
 80064a0:	4619      	mov	r1, r3
 80064a2:	463b      	mov	r3, r7
 80064a4:	bfbb      	ittet	lt
 80064a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064aa:	461f      	movlt	r7, r3
 80064ac:	2300      	movge	r3, #0
 80064ae:	232d      	movlt	r3, #45	@ 0x2d
 80064b0:	700b      	strb	r3, [r1, #0]
 80064b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064b8:	4691      	mov	r9, r2
 80064ba:	f023 0820 	bic.w	r8, r3, #32
 80064be:	bfbc      	itt	lt
 80064c0:	4632      	movlt	r2, r6
 80064c2:	4616      	movlt	r6, r2
 80064c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064c8:	d005      	beq.n	80064d6 <__cvt+0x42>
 80064ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064ce:	d100      	bne.n	80064d2 <__cvt+0x3e>
 80064d0:	3401      	adds	r4, #1
 80064d2:	2102      	movs	r1, #2
 80064d4:	e000      	b.n	80064d8 <__cvt+0x44>
 80064d6:	2103      	movs	r1, #3
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	ab02      	add	r3, sp, #8
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	ec47 6b10 	vmov	d0, r6, r7
 80064e4:	4653      	mov	r3, sl
 80064e6:	4622      	mov	r2, r4
 80064e8:	f001 f91e 	bl	8007728 <_dtoa_r>
 80064ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064f0:	4605      	mov	r5, r0
 80064f2:	d119      	bne.n	8006528 <__cvt+0x94>
 80064f4:	f019 0f01 	tst.w	r9, #1
 80064f8:	d00e      	beq.n	8006518 <__cvt+0x84>
 80064fa:	eb00 0904 	add.w	r9, r0, r4
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	4630      	mov	r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	f7fa fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800650a:	b108      	cbz	r0, 8006510 <__cvt+0x7c>
 800650c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006510:	2230      	movs	r2, #48	@ 0x30
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	454b      	cmp	r3, r9
 8006516:	d31e      	bcc.n	8006556 <__cvt+0xc2>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800651c:	1b5b      	subs	r3, r3, r5
 800651e:	4628      	mov	r0, r5
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	b004      	add	sp, #16
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800652c:	eb00 0904 	add.w	r9, r0, r4
 8006530:	d1e5      	bne.n	80064fe <__cvt+0x6a>
 8006532:	7803      	ldrb	r3, [r0, #0]
 8006534:	2b30      	cmp	r3, #48	@ 0x30
 8006536:	d10a      	bne.n	800654e <__cvt+0xba>
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006544:	b918      	cbnz	r0, 800654e <__cvt+0xba>
 8006546:	f1c4 0401 	rsb	r4, r4, #1
 800654a:	f8ca 4000 	str.w	r4, [sl]
 800654e:	f8da 3000 	ldr.w	r3, [sl]
 8006552:	4499      	add	r9, r3
 8006554:	e7d3      	b.n	80064fe <__cvt+0x6a>
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	e7d9      	b.n	8006512 <__cvt+0x7e>

0800655e <__exponent>:
 800655e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006560:	2900      	cmp	r1, #0
 8006562:	bfba      	itte	lt
 8006564:	4249      	neglt	r1, r1
 8006566:	232d      	movlt	r3, #45	@ 0x2d
 8006568:	232b      	movge	r3, #43	@ 0x2b
 800656a:	2909      	cmp	r1, #9
 800656c:	7002      	strb	r2, [r0, #0]
 800656e:	7043      	strb	r3, [r0, #1]
 8006570:	dd29      	ble.n	80065c6 <__exponent+0x68>
 8006572:	f10d 0307 	add.w	r3, sp, #7
 8006576:	461d      	mov	r5, r3
 8006578:	270a      	movs	r7, #10
 800657a:	461a      	mov	r2, r3
 800657c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006580:	fb07 1416 	mls	r4, r7, r6, r1
 8006584:	3430      	adds	r4, #48	@ 0x30
 8006586:	f802 4c01 	strb.w	r4, [r2, #-1]
 800658a:	460c      	mov	r4, r1
 800658c:	2c63      	cmp	r4, #99	@ 0x63
 800658e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006592:	4631      	mov	r1, r6
 8006594:	dcf1      	bgt.n	800657a <__exponent+0x1c>
 8006596:	3130      	adds	r1, #48	@ 0x30
 8006598:	1e94      	subs	r4, r2, #2
 800659a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800659e:	1c41      	adds	r1, r0, #1
 80065a0:	4623      	mov	r3, r4
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	d30a      	bcc.n	80065bc <__exponent+0x5e>
 80065a6:	f10d 0309 	add.w	r3, sp, #9
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	42ac      	cmp	r4, r5
 80065ae:	bf88      	it	hi
 80065b0:	2300      	movhi	r3, #0
 80065b2:	3302      	adds	r3, #2
 80065b4:	4403      	add	r3, r0
 80065b6:	1a18      	subs	r0, r3, r0
 80065b8:	b003      	add	sp, #12
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065c4:	e7ed      	b.n	80065a2 <__exponent+0x44>
 80065c6:	2330      	movs	r3, #48	@ 0x30
 80065c8:	3130      	adds	r1, #48	@ 0x30
 80065ca:	7083      	strb	r3, [r0, #2]
 80065cc:	70c1      	strb	r1, [r0, #3]
 80065ce:	1d03      	adds	r3, r0, #4
 80065d0:	e7f1      	b.n	80065b6 <__exponent+0x58>
	...

080065d4 <_printf_float>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	b08d      	sub	sp, #52	@ 0x34
 80065da:	460c      	mov	r4, r1
 80065dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065e0:	4616      	mov	r6, r2
 80065e2:	461f      	mov	r7, r3
 80065e4:	4605      	mov	r5, r0
 80065e6:	f000 ff7b 	bl	80074e0 <_localeconv_r>
 80065ea:	6803      	ldr	r3, [r0, #0]
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7f9 fe3e 	bl	8000270 <strlen>
 80065f4:	2300      	movs	r3, #0
 80065f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065f8:	f8d8 3000 	ldr.w	r3, [r8]
 80065fc:	9005      	str	r0, [sp, #20]
 80065fe:	3307      	adds	r3, #7
 8006600:	f023 0307 	bic.w	r3, r3, #7
 8006604:	f103 0208 	add.w	r2, r3, #8
 8006608:	f894 a018 	ldrb.w	sl, [r4, #24]
 800660c:	f8d4 b000 	ldr.w	fp, [r4]
 8006610:	f8c8 2000 	str.w	r2, [r8]
 8006614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006618:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800661c:	9307      	str	r3, [sp, #28]
 800661e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006622:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800662a:	4b9c      	ldr	r3, [pc, #624]	@ (800689c <_printf_float+0x2c8>)
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	f7fa fa7c 	bl	8000b2c <__aeabi_dcmpun>
 8006634:	bb70      	cbnz	r0, 8006694 <_printf_float+0xc0>
 8006636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663a:	4b98      	ldr	r3, [pc, #608]	@ (800689c <_printf_float+0x2c8>)
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	f7fa fa56 	bl	8000af0 <__aeabi_dcmple>
 8006644:	bb30      	cbnz	r0, 8006694 <_printf_float+0xc0>
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7fa fa45 	bl	8000adc <__aeabi_dcmplt>
 8006652:	b110      	cbz	r0, 800665a <_printf_float+0x86>
 8006654:	232d      	movs	r3, #45	@ 0x2d
 8006656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665a:	4a91      	ldr	r2, [pc, #580]	@ (80068a0 <_printf_float+0x2cc>)
 800665c:	4b91      	ldr	r3, [pc, #580]	@ (80068a4 <_printf_float+0x2d0>)
 800665e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006662:	bf8c      	ite	hi
 8006664:	4690      	movhi	r8, r2
 8006666:	4698      	movls	r8, r3
 8006668:	2303      	movs	r3, #3
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	f02b 0304 	bic.w	r3, fp, #4
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	f04f 0900 	mov.w	r9, #0
 8006676:	9700      	str	r7, [sp, #0]
 8006678:	4633      	mov	r3, r6
 800667a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800667c:	4621      	mov	r1, r4
 800667e:	4628      	mov	r0, r5
 8006680:	f000 f9d2 	bl	8006a28 <_printf_common>
 8006684:	3001      	adds	r0, #1
 8006686:	f040 808d 	bne.w	80067a4 <_printf_float+0x1d0>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	b00d      	add	sp, #52	@ 0x34
 8006690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7fa fa46 	bl	8000b2c <__aeabi_dcmpun>
 80066a0:	b140      	cbz	r0, 80066b4 <_printf_float+0xe0>
 80066a2:	464b      	mov	r3, r9
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bfbc      	itt	lt
 80066a8:	232d      	movlt	r3, #45	@ 0x2d
 80066aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066ae:	4a7e      	ldr	r2, [pc, #504]	@ (80068a8 <_printf_float+0x2d4>)
 80066b0:	4b7e      	ldr	r3, [pc, #504]	@ (80068ac <_printf_float+0x2d8>)
 80066b2:	e7d4      	b.n	800665e <_printf_float+0x8a>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066ba:	9206      	str	r2, [sp, #24]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	d13b      	bne.n	8006738 <_printf_float+0x164>
 80066c0:	2306      	movs	r3, #6
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066c8:	2300      	movs	r3, #0
 80066ca:	6022      	str	r2, [r4, #0]
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80066d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066d4:	ab09      	add	r3, sp, #36	@ 0x24
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	6861      	ldr	r1, [r4, #4]
 80066da:	ec49 8b10 	vmov	d0, r8, r9
 80066de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff fed6 	bl	8006494 <__cvt>
 80066e8:	9b06      	ldr	r3, [sp, #24]
 80066ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066ec:	2b47      	cmp	r3, #71	@ 0x47
 80066ee:	4680      	mov	r8, r0
 80066f0:	d129      	bne.n	8006746 <_printf_float+0x172>
 80066f2:	1cc8      	adds	r0, r1, #3
 80066f4:	db02      	blt.n	80066fc <_printf_float+0x128>
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	4299      	cmp	r1, r3
 80066fa:	dd41      	ble.n	8006780 <_printf_float+0x1ac>
 80066fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006700:	fa5f fa8a 	uxtb.w	sl, sl
 8006704:	3901      	subs	r1, #1
 8006706:	4652      	mov	r2, sl
 8006708:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800670c:	9109      	str	r1, [sp, #36]	@ 0x24
 800670e:	f7ff ff26 	bl	800655e <__exponent>
 8006712:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006714:	1813      	adds	r3, r2, r0
 8006716:	2a01      	cmp	r2, #1
 8006718:	4681      	mov	r9, r0
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	dc02      	bgt.n	8006724 <_printf_float+0x150>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	07d2      	lsls	r2, r2, #31
 8006722:	d501      	bpl.n	8006728 <_printf_float+0x154>
 8006724:	3301      	adds	r3, #1
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0a2      	beq.n	8006676 <_printf_float+0xa2>
 8006730:	232d      	movs	r3, #45	@ 0x2d
 8006732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006736:	e79e      	b.n	8006676 <_printf_float+0xa2>
 8006738:	9a06      	ldr	r2, [sp, #24]
 800673a:	2a47      	cmp	r2, #71	@ 0x47
 800673c:	d1c2      	bne.n	80066c4 <_printf_float+0xf0>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1c0      	bne.n	80066c4 <_printf_float+0xf0>
 8006742:	2301      	movs	r3, #1
 8006744:	e7bd      	b.n	80066c2 <_printf_float+0xee>
 8006746:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800674a:	d9db      	bls.n	8006704 <_printf_float+0x130>
 800674c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006750:	d118      	bne.n	8006784 <_printf_float+0x1b0>
 8006752:	2900      	cmp	r1, #0
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	dd0b      	ble.n	8006770 <_printf_float+0x19c>
 8006758:	6121      	str	r1, [r4, #16]
 800675a:	b913      	cbnz	r3, 8006762 <_printf_float+0x18e>
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	07d0      	lsls	r0, r2, #31
 8006760:	d502      	bpl.n	8006768 <_printf_float+0x194>
 8006762:	3301      	adds	r3, #1
 8006764:	440b      	add	r3, r1
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	65a1      	str	r1, [r4, #88]	@ 0x58
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	e7db      	b.n	8006728 <_printf_float+0x154>
 8006770:	b913      	cbnz	r3, 8006778 <_printf_float+0x1a4>
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	07d2      	lsls	r2, r2, #31
 8006776:	d501      	bpl.n	800677c <_printf_float+0x1a8>
 8006778:	3302      	adds	r3, #2
 800677a:	e7f4      	b.n	8006766 <_printf_float+0x192>
 800677c:	2301      	movs	r3, #1
 800677e:	e7f2      	b.n	8006766 <_printf_float+0x192>
 8006780:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	4299      	cmp	r1, r3
 8006788:	db05      	blt.n	8006796 <_printf_float+0x1c2>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	6121      	str	r1, [r4, #16]
 800678e:	07d8      	lsls	r0, r3, #31
 8006790:	d5ea      	bpl.n	8006768 <_printf_float+0x194>
 8006792:	1c4b      	adds	r3, r1, #1
 8006794:	e7e7      	b.n	8006766 <_printf_float+0x192>
 8006796:	2900      	cmp	r1, #0
 8006798:	bfd4      	ite	le
 800679a:	f1c1 0202 	rsble	r2, r1, #2
 800679e:	2201      	movgt	r2, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	e7e0      	b.n	8006766 <_printf_float+0x192>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	055a      	lsls	r2, r3, #21
 80067a8:	d407      	bmi.n	80067ba <_printf_float+0x1e6>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d12b      	bne.n	8006810 <_printf_float+0x23c>
 80067b8:	e767      	b.n	800668a <_printf_float+0xb6>
 80067ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067be:	f240 80dd 	bls.w	800697c <_printf_float+0x3a8>
 80067c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067c6:	2200      	movs	r2, #0
 80067c8:	2300      	movs	r3, #0
 80067ca:	f7fa f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d033      	beq.n	800683a <_printf_float+0x266>
 80067d2:	4a37      	ldr	r2, [pc, #220]	@ (80068b0 <_printf_float+0x2dc>)
 80067d4:	2301      	movs	r3, #1
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f af54 	beq.w	800668a <_printf_float+0xb6>
 80067e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067e6:	4543      	cmp	r3, r8
 80067e8:	db02      	blt.n	80067f0 <_printf_float+0x21c>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	07d8      	lsls	r0, r3, #31
 80067ee:	d50f      	bpl.n	8006810 <_printf_float+0x23c>
 80067f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af45 	beq.w	800668a <_printf_float+0xb6>
 8006800:	f04f 0900 	mov.w	r9, #0
 8006804:	f108 38ff 	add.w	r8, r8, #4294967295
 8006808:	f104 0a1a 	add.w	sl, r4, #26
 800680c:	45c8      	cmp	r8, r9
 800680e:	dc09      	bgt.n	8006824 <_printf_float+0x250>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	f100 8103 	bmi.w	8006a1e <_printf_float+0x44a>
 8006818:	68e0      	ldr	r0, [r4, #12]
 800681a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800681c:	4298      	cmp	r0, r3
 800681e:	bfb8      	it	lt
 8006820:	4618      	movlt	r0, r3
 8006822:	e734      	b.n	800668e <_printf_float+0xba>
 8006824:	2301      	movs	r3, #1
 8006826:	4652      	mov	r2, sl
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af2b 	beq.w	800668a <_printf_float+0xb6>
 8006834:	f109 0901 	add.w	r9, r9, #1
 8006838:	e7e8      	b.n	800680c <_printf_float+0x238>
 800683a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc39      	bgt.n	80068b4 <_printf_float+0x2e0>
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <_printf_float+0x2dc>)
 8006842:	2301      	movs	r3, #1
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af1d 	beq.w	800668a <_printf_float+0xb6>
 8006850:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006854:	ea59 0303 	orrs.w	r3, r9, r3
 8006858:	d102      	bne.n	8006860 <_printf_float+0x28c>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	07d9      	lsls	r1, r3, #31
 800685e:	d5d7      	bpl.n	8006810 <_printf_float+0x23c>
 8006860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af0d 	beq.w	800668a <_printf_float+0xb6>
 8006870:	f04f 0a00 	mov.w	sl, #0
 8006874:	f104 0b1a 	add.w	fp, r4, #26
 8006878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687a:	425b      	negs	r3, r3
 800687c:	4553      	cmp	r3, sl
 800687e:	dc01      	bgt.n	8006884 <_printf_float+0x2b0>
 8006880:	464b      	mov	r3, r9
 8006882:	e793      	b.n	80067ac <_printf_float+0x1d8>
 8006884:	2301      	movs	r3, #1
 8006886:	465a      	mov	r2, fp
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f aefb 	beq.w	800668a <_printf_float+0xb6>
 8006894:	f10a 0a01 	add.w	sl, sl, #1
 8006898:	e7ee      	b.n	8006878 <_printf_float+0x2a4>
 800689a:	bf00      	nop
 800689c:	7fefffff 	.word	0x7fefffff
 80068a0:	0800acec 	.word	0x0800acec
 80068a4:	0800ace8 	.word	0x0800ace8
 80068a8:	0800acf4 	.word	0x0800acf4
 80068ac:	0800acf0 	.word	0x0800acf0
 80068b0:	0800acf8 	.word	0x0800acf8
 80068b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068ba:	4553      	cmp	r3, sl
 80068bc:	bfa8      	it	ge
 80068be:	4653      	movge	r3, sl
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	4699      	mov	r9, r3
 80068c4:	dc36      	bgt.n	8006934 <_printf_float+0x360>
 80068c6:	f04f 0b00 	mov.w	fp, #0
 80068ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ce:	f104 021a 	add.w	r2, r4, #26
 80068d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068d4:	9306      	str	r3, [sp, #24]
 80068d6:	eba3 0309 	sub.w	r3, r3, r9
 80068da:	455b      	cmp	r3, fp
 80068dc:	dc31      	bgt.n	8006942 <_printf_float+0x36e>
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	459a      	cmp	sl, r3
 80068e2:	dc3a      	bgt.n	800695a <_printf_float+0x386>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07da      	lsls	r2, r3, #31
 80068e8:	d437      	bmi.n	800695a <_printf_float+0x386>
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	ebaa 0903 	sub.w	r9, sl, r3
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	ebaa 0303 	sub.w	r3, sl, r3
 80068f6:	4599      	cmp	r9, r3
 80068f8:	bfa8      	it	ge
 80068fa:	4699      	movge	r9, r3
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	dc33      	bgt.n	800696a <_printf_float+0x396>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690a:	f104 0b1a 	add.w	fp, r4, #26
 800690e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006910:	ebaa 0303 	sub.w	r3, sl, r3
 8006914:	eba3 0309 	sub.w	r3, r3, r9
 8006918:	4543      	cmp	r3, r8
 800691a:	f77f af79 	ble.w	8006810 <_printf_float+0x23c>
 800691e:	2301      	movs	r3, #1
 8006920:	465a      	mov	r2, fp
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f aeae 	beq.w	800668a <_printf_float+0xb6>
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	e7ec      	b.n	800690e <_printf_float+0x33a>
 8006934:	4642      	mov	r2, r8
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	d1c2      	bne.n	80068c6 <_printf_float+0x2f2>
 8006940:	e6a3      	b.n	800668a <_printf_float+0xb6>
 8006942:	2301      	movs	r3, #1
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	9206      	str	r2, [sp, #24]
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f ae9c 	beq.w	800668a <_printf_float+0xb6>
 8006952:	9a06      	ldr	r2, [sp, #24]
 8006954:	f10b 0b01 	add.w	fp, fp, #1
 8006958:	e7bb      	b.n	80068d2 <_printf_float+0x2fe>
 800695a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	d1c0      	bne.n	80068ea <_printf_float+0x316>
 8006968:	e68f      	b.n	800668a <_printf_float+0xb6>
 800696a:	9a06      	ldr	r2, [sp, #24]
 800696c:	464b      	mov	r3, r9
 800696e:	4442      	add	r2, r8
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	d1c3      	bne.n	8006902 <_printf_float+0x32e>
 800697a:	e686      	b.n	800668a <_printf_float+0xb6>
 800697c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006980:	f1ba 0f01 	cmp.w	sl, #1
 8006984:	dc01      	bgt.n	800698a <_printf_float+0x3b6>
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d536      	bpl.n	80069f8 <_printf_float+0x424>
 800698a:	2301      	movs	r3, #1
 800698c:	4642      	mov	r2, r8
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae78 	beq.w	800668a <_printf_float+0xb6>
 800699a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae70 	beq.w	800668a <_printf_float+0xb6>
 80069aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b6:	f7fa f887 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ba:	b9c0      	cbnz	r0, 80069ee <_printf_float+0x41a>
 80069bc:	4653      	mov	r3, sl
 80069be:	f108 0201 	add.w	r2, r8, #1
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d10c      	bne.n	80069e6 <_printf_float+0x412>
 80069cc:	e65d      	b.n	800668a <_printf_float+0xb6>
 80069ce:	2301      	movs	r3, #1
 80069d0:	465a      	mov	r2, fp
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae56 	beq.w	800668a <_printf_float+0xb6>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	45d0      	cmp	r8, sl
 80069e4:	dbf3      	blt.n	80069ce <_printf_float+0x3fa>
 80069e6:	464b      	mov	r3, r9
 80069e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069ec:	e6df      	b.n	80067ae <_printf_float+0x1da>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 0b1a 	add.w	fp, r4, #26
 80069f6:	e7f4      	b.n	80069e2 <_printf_float+0x40e>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4642      	mov	r2, r8
 80069fc:	e7e1      	b.n	80069c2 <_printf_float+0x3ee>
 80069fe:	2301      	movs	r3, #1
 8006a00:	464a      	mov	r2, r9
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae3e 	beq.w	800668a <_printf_float+0xb6>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	68e3      	ldr	r3, [r4, #12]
 8006a14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a16:	1a5b      	subs	r3, r3, r1
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	dcf0      	bgt.n	80069fe <_printf_float+0x42a>
 8006a1c:	e6fc      	b.n	8006818 <_printf_float+0x244>
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	f104 0919 	add.w	r9, r4, #25
 8006a26:	e7f4      	b.n	8006a12 <_printf_float+0x43e>

08006a28 <_printf_common>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	4698      	mov	r8, r3
 8006a30:	688a      	ldr	r2, [r1, #8]
 8006a32:	690b      	ldr	r3, [r1, #16]
 8006a34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	bfb8      	it	lt
 8006a3c:	4613      	movlt	r3, r2
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a44:	4607      	mov	r7, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b10a      	cbz	r2, 8006a4e <_printf_common+0x26>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	0699      	lsls	r1, r3, #26
 8006a52:	bf42      	ittt	mi
 8006a54:	6833      	ldrmi	r3, [r6, #0]
 8006a56:	3302      	addmi	r3, #2
 8006a58:	6033      	strmi	r3, [r6, #0]
 8006a5a:	6825      	ldr	r5, [r4, #0]
 8006a5c:	f015 0506 	ands.w	r5, r5, #6
 8006a60:	d106      	bne.n	8006a70 <_printf_common+0x48>
 8006a62:	f104 0a19 	add.w	sl, r4, #25
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	6832      	ldr	r2, [r6, #0]
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dc26      	bgt.n	8006abe <_printf_common+0x96>
 8006a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	3b00      	subs	r3, #0
 8006a78:	bf18      	it	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	0692      	lsls	r2, r2, #26
 8006a7e:	d42b      	bmi.n	8006ad8 <_printf_common+0xb0>
 8006a80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a84:	4641      	mov	r1, r8
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c8      	blx	r9
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d01e      	beq.n	8006acc <_printf_common+0xa4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	6922      	ldr	r2, [r4, #16]
 8006a92:	f003 0306 	and.w	r3, r3, #6
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	bf02      	ittt	eq
 8006a9a:	68e5      	ldreq	r5, [r4, #12]
 8006a9c:	6833      	ldreq	r3, [r6, #0]
 8006a9e:	1aed      	subeq	r5, r5, r3
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	bf0c      	ite	eq
 8006aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa8:	2500      	movne	r5, #0
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bfc4      	itt	gt
 8006aae:	1a9b      	subgt	r3, r3, r2
 8006ab0:	18ed      	addgt	r5, r5, r3
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	341a      	adds	r4, #26
 8006ab6:	42b5      	cmp	r5, r6
 8006ab8:	d11a      	bne.n	8006af0 <_printf_common+0xc8>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e008      	b.n	8006ad0 <_printf_common+0xa8>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	47c8      	blx	r9
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d103      	bne.n	8006ad4 <_printf_common+0xac>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	e7c6      	b.n	8006a66 <_printf_common+0x3e>
 8006ad8:	18e1      	adds	r1, r4, r3
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	2030      	movs	r0, #48	@ 0x30
 8006ade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ae2:	4422      	add	r2, r4
 8006ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006aec:	3302      	adds	r3, #2
 8006aee:	e7c7      	b.n	8006a80 <_printf_common+0x58>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4622      	mov	r2, r4
 8006af4:	4641      	mov	r1, r8
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c8      	blx	r9
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0e6      	beq.n	8006acc <_printf_common+0xa4>
 8006afe:	3601      	adds	r6, #1
 8006b00:	e7d9      	b.n	8006ab6 <_printf_common+0x8e>
	...

08006b04 <_printf_i>:
 8006b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	7e0f      	ldrb	r7, [r1, #24]
 8006b0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b0c:	2f78      	cmp	r7, #120	@ 0x78
 8006b0e:	4691      	mov	r9, r2
 8006b10:	4680      	mov	r8, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	469a      	mov	sl, r3
 8006b16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b1a:	d807      	bhi.n	8006b2c <_printf_i+0x28>
 8006b1c:	2f62      	cmp	r7, #98	@ 0x62
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x32>
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	f000 80d1 	beq.w	8006cc8 <_printf_i+0x1c4>
 8006b26:	2f58      	cmp	r7, #88	@ 0x58
 8006b28:	f000 80b8 	beq.w	8006c9c <_printf_i+0x198>
 8006b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b34:	e03a      	b.n	8006bac <_printf_i+0xa8>
 8006b36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b3a:	2b15      	cmp	r3, #21
 8006b3c:	d8f6      	bhi.n	8006b2c <_printf_i+0x28>
 8006b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b44 <_printf_i+0x40>)
 8006b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006bb1 	.word	0x08006bb1
 8006b4c:	08006b2d 	.word	0x08006b2d
 8006b50:	08006b2d 	.word	0x08006b2d
 8006b54:	08006b2d 	.word	0x08006b2d
 8006b58:	08006b2d 	.word	0x08006b2d
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006b2d 	.word	0x08006b2d
 8006b64:	08006b2d 	.word	0x08006b2d
 8006b68:	08006b2d 	.word	0x08006b2d
 8006b6c:	08006b2d 	.word	0x08006b2d
 8006b70:	08006caf 	.word	0x08006caf
 8006b74:	08006bdb 	.word	0x08006bdb
 8006b78:	08006c69 	.word	0x08006c69
 8006b7c:	08006b2d 	.word	0x08006b2d
 8006b80:	08006b2d 	.word	0x08006b2d
 8006b84:	08006cd1 	.word	0x08006cd1
 8006b88:	08006b2d 	.word	0x08006b2d
 8006b8c:	08006bdb 	.word	0x08006bdb
 8006b90:	08006b2d 	.word	0x08006b2d
 8006b94:	08006b2d 	.word	0x08006b2d
 8006b98:	08006c71 	.word	0x08006c71
 8006b9c:	6833      	ldr	r3, [r6, #0]
 8006b9e:	1d1a      	adds	r2, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6032      	str	r2, [r6, #0]
 8006ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bac:	2301      	movs	r3, #1
 8006bae:	e09c      	b.n	8006cea <_printf_i+0x1e6>
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	6820      	ldr	r0, [r4, #0]
 8006bb4:	1d19      	adds	r1, r3, #4
 8006bb6:	6031      	str	r1, [r6, #0]
 8006bb8:	0606      	lsls	r6, r0, #24
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0xbc>
 8006bbc:	681d      	ldr	r5, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <_printf_i+0xc4>
 8006bc0:	0645      	lsls	r5, r0, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0xb8>
 8006bc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	da03      	bge.n	8006bd4 <_printf_i+0xd0>
 8006bcc:	232d      	movs	r3, #45	@ 0x2d
 8006bce:	426d      	negs	r5, r5
 8006bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd4:	4858      	ldr	r0, [pc, #352]	@ (8006d38 <_printf_i+0x234>)
 8006bd6:	230a      	movs	r3, #10
 8006bd8:	e011      	b.n	8006bfe <_printf_i+0xfa>
 8006bda:	6821      	ldr	r1, [r4, #0]
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	0608      	lsls	r0, r1, #24
 8006be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006be4:	d402      	bmi.n	8006bec <_printf_i+0xe8>
 8006be6:	0649      	lsls	r1, r1, #25
 8006be8:	bf48      	it	mi
 8006bea:	b2ad      	uxthmi	r5, r5
 8006bec:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bee:	4852      	ldr	r0, [pc, #328]	@ (8006d38 <_printf_i+0x234>)
 8006bf0:	6033      	str	r3, [r6, #0]
 8006bf2:	bf14      	ite	ne
 8006bf4:	230a      	movne	r3, #10
 8006bf6:	2308      	moveq	r3, #8
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bfe:	6866      	ldr	r6, [r4, #4]
 8006c00:	60a6      	str	r6, [r4, #8]
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	db05      	blt.n	8006c12 <_printf_i+0x10e>
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	432e      	orrs	r6, r5
 8006c0a:	f021 0104 	bic.w	r1, r1, #4
 8006c0e:	6021      	str	r1, [r4, #0]
 8006c10:	d04b      	beq.n	8006caa <_printf_i+0x1a6>
 8006c12:	4616      	mov	r6, r2
 8006c14:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c18:	fb03 5711 	mls	r7, r3, r1, r5
 8006c1c:	5dc7      	ldrb	r7, [r0, r7]
 8006c1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c22:	462f      	mov	r7, r5
 8006c24:	42bb      	cmp	r3, r7
 8006c26:	460d      	mov	r5, r1
 8006c28:	d9f4      	bls.n	8006c14 <_printf_i+0x110>
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d10b      	bne.n	8006c46 <_printf_i+0x142>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	07df      	lsls	r7, r3, #31
 8006c32:	d508      	bpl.n	8006c46 <_printf_i+0x142>
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	6861      	ldr	r1, [r4, #4]
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	bfde      	ittt	le
 8006c3c:	2330      	movle	r3, #48	@ 0x30
 8006c3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c46:	1b92      	subs	r2, r2, r6
 8006c48:	6122      	str	r2, [r4, #16]
 8006c4a:	f8cd a000 	str.w	sl, [sp]
 8006c4e:	464b      	mov	r3, r9
 8006c50:	aa03      	add	r2, sp, #12
 8006c52:	4621      	mov	r1, r4
 8006c54:	4640      	mov	r0, r8
 8006c56:	f7ff fee7 	bl	8006a28 <_printf_common>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d14a      	bne.n	8006cf4 <_printf_i+0x1f0>
 8006c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c62:	b004      	add	sp, #16
 8006c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	f043 0320 	orr.w	r3, r3, #32
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	4832      	ldr	r0, [pc, #200]	@ (8006d3c <_printf_i+0x238>)
 8006c72:	2778      	movs	r7, #120	@ 0x78
 8006c74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	6831      	ldr	r1, [r6, #0]
 8006c7c:	061f      	lsls	r7, r3, #24
 8006c7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c82:	d402      	bmi.n	8006c8a <_printf_i+0x186>
 8006c84:	065f      	lsls	r7, r3, #25
 8006c86:	bf48      	it	mi
 8006c88:	b2ad      	uxthmi	r5, r5
 8006c8a:	6031      	str	r1, [r6, #0]
 8006c8c:	07d9      	lsls	r1, r3, #31
 8006c8e:	bf44      	itt	mi
 8006c90:	f043 0320 	orrmi.w	r3, r3, #32
 8006c94:	6023      	strmi	r3, [r4, #0]
 8006c96:	b11d      	cbz	r5, 8006ca0 <_printf_i+0x19c>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	e7ad      	b.n	8006bf8 <_printf_i+0xf4>
 8006c9c:	4826      	ldr	r0, [pc, #152]	@ (8006d38 <_printf_i+0x234>)
 8006c9e:	e7e9      	b.n	8006c74 <_printf_i+0x170>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	f023 0320 	bic.w	r3, r3, #32
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	e7f6      	b.n	8006c98 <_printf_i+0x194>
 8006caa:	4616      	mov	r6, r2
 8006cac:	e7bd      	b.n	8006c2a <_printf_i+0x126>
 8006cae:	6833      	ldr	r3, [r6, #0]
 8006cb0:	6825      	ldr	r5, [r4, #0]
 8006cb2:	6961      	ldr	r1, [r4, #20]
 8006cb4:	1d18      	adds	r0, r3, #4
 8006cb6:	6030      	str	r0, [r6, #0]
 8006cb8:	062e      	lsls	r6, r5, #24
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	d501      	bpl.n	8006cc2 <_printf_i+0x1be>
 8006cbe:	6019      	str	r1, [r3, #0]
 8006cc0:	e002      	b.n	8006cc8 <_printf_i+0x1c4>
 8006cc2:	0668      	lsls	r0, r5, #25
 8006cc4:	d5fb      	bpl.n	8006cbe <_printf_i+0x1ba>
 8006cc6:	8019      	strh	r1, [r3, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6123      	str	r3, [r4, #16]
 8006ccc:	4616      	mov	r6, r2
 8006cce:	e7bc      	b.n	8006c4a <_printf_i+0x146>
 8006cd0:	6833      	ldr	r3, [r6, #0]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	6032      	str	r2, [r6, #0]
 8006cd6:	681e      	ldr	r6, [r3, #0]
 8006cd8:	6862      	ldr	r2, [r4, #4]
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7f9 fa77 	bl	80001d0 <memchr>
 8006ce2:	b108      	cbz	r0, 8006ce8 <_printf_i+0x1e4>
 8006ce4:	1b80      	subs	r0, r0, r6
 8006ce6:	6060      	str	r0, [r4, #4]
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	2300      	movs	r3, #0
 8006cee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cf2:	e7aa      	b.n	8006c4a <_printf_i+0x146>
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	47d0      	blx	sl
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d0ad      	beq.n	8006c5e <_printf_i+0x15a>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	079b      	lsls	r3, r3, #30
 8006d06:	d413      	bmi.n	8006d30 <_printf_i+0x22c>
 8006d08:	68e0      	ldr	r0, [r4, #12]
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	bfb8      	it	lt
 8006d10:	4618      	movlt	r0, r3
 8006d12:	e7a6      	b.n	8006c62 <_printf_i+0x15e>
 8006d14:	2301      	movs	r3, #1
 8006d16:	4632      	mov	r2, r6
 8006d18:	4649      	mov	r1, r9
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	47d0      	blx	sl
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d09d      	beq.n	8006c5e <_printf_i+0x15a>
 8006d22:	3501      	adds	r5, #1
 8006d24:	68e3      	ldr	r3, [r4, #12]
 8006d26:	9903      	ldr	r1, [sp, #12]
 8006d28:	1a5b      	subs	r3, r3, r1
 8006d2a:	42ab      	cmp	r3, r5
 8006d2c:	dcf2      	bgt.n	8006d14 <_printf_i+0x210>
 8006d2e:	e7eb      	b.n	8006d08 <_printf_i+0x204>
 8006d30:	2500      	movs	r5, #0
 8006d32:	f104 0619 	add.w	r6, r4, #25
 8006d36:	e7f5      	b.n	8006d24 <_printf_i+0x220>
 8006d38:	0800acfa 	.word	0x0800acfa
 8006d3c:	0800ad0b 	.word	0x0800ad0b

08006d40 <_scanf_float>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	b087      	sub	sp, #28
 8006d46:	4691      	mov	r9, r2
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	688b      	ldr	r3, [r1, #8]
 8006d4c:	1e5a      	subs	r2, r3, #1
 8006d4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d52:	bf81      	itttt	hi
 8006d54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d58:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d60:	608b      	strhi	r3, [r1, #8]
 8006d62:	680b      	ldr	r3, [r1, #0]
 8006d64:	460a      	mov	r2, r1
 8006d66:	f04f 0500 	mov.w	r5, #0
 8006d6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d6e:	f842 3b1c 	str.w	r3, [r2], #28
 8006d72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d76:	4680      	mov	r8, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	bf98      	it	ls
 8006d7c:	f04f 0b00 	movls.w	fp, #0
 8006d80:	9201      	str	r2, [sp, #4]
 8006d82:	4616      	mov	r6, r2
 8006d84:	46aa      	mov	sl, r5
 8006d86:	462f      	mov	r7, r5
 8006d88:	9502      	str	r5, [sp, #8]
 8006d8a:	68a2      	ldr	r2, [r4, #8]
 8006d8c:	b15a      	cbz	r2, 8006da6 <_scanf_float+0x66>
 8006d8e:	f8d9 3000 	ldr.w	r3, [r9]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d96:	d863      	bhi.n	8006e60 <_scanf_float+0x120>
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d83b      	bhi.n	8006e14 <_scanf_float+0xd4>
 8006d9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006da0:	b2c8      	uxtb	r0, r1
 8006da2:	280e      	cmp	r0, #14
 8006da4:	d939      	bls.n	8006e1a <_scanf_float+0xda>
 8006da6:	b11f      	cbz	r7, 8006db0 <_scanf_float+0x70>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db4:	f1ba 0f01 	cmp.w	sl, #1
 8006db8:	f200 8114 	bhi.w	8006fe4 <_scanf_float+0x2a4>
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	f200 8105 	bhi.w	8006fce <_scanf_float+0x28e>
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	b007      	add	sp, #28
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006dd0:	2a0d      	cmp	r2, #13
 8006dd2:	d8e8      	bhi.n	8006da6 <_scanf_float+0x66>
 8006dd4:	a101      	add	r1, pc, #4	@ (adr r1, 8006ddc <_scanf_float+0x9c>)
 8006dd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006f25 	.word	0x08006f25
 8006de0:	08006da7 	.word	0x08006da7
 8006de4:	08006da7 	.word	0x08006da7
 8006de8:	08006da7 	.word	0x08006da7
 8006dec:	08006f81 	.word	0x08006f81
 8006df0:	08006f5b 	.word	0x08006f5b
 8006df4:	08006da7 	.word	0x08006da7
 8006df8:	08006da7 	.word	0x08006da7
 8006dfc:	08006f33 	.word	0x08006f33
 8006e00:	08006da7 	.word	0x08006da7
 8006e04:	08006da7 	.word	0x08006da7
 8006e08:	08006da7 	.word	0x08006da7
 8006e0c:	08006da7 	.word	0x08006da7
 8006e10:	08006eef 	.word	0x08006eef
 8006e14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006e18:	e7da      	b.n	8006dd0 <_scanf_float+0x90>
 8006e1a:	290e      	cmp	r1, #14
 8006e1c:	d8c3      	bhi.n	8006da6 <_scanf_float+0x66>
 8006e1e:	a001      	add	r0, pc, #4	@ (adr r0, 8006e24 <_scanf_float+0xe4>)
 8006e20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e24:	08006edf 	.word	0x08006edf
 8006e28:	08006da7 	.word	0x08006da7
 8006e2c:	08006edf 	.word	0x08006edf
 8006e30:	08006f6f 	.word	0x08006f6f
 8006e34:	08006da7 	.word	0x08006da7
 8006e38:	08006e81 	.word	0x08006e81
 8006e3c:	08006ec5 	.word	0x08006ec5
 8006e40:	08006ec5 	.word	0x08006ec5
 8006e44:	08006ec5 	.word	0x08006ec5
 8006e48:	08006ec5 	.word	0x08006ec5
 8006e4c:	08006ec5 	.word	0x08006ec5
 8006e50:	08006ec5 	.word	0x08006ec5
 8006e54:	08006ec5 	.word	0x08006ec5
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e62:	d809      	bhi.n	8006e78 <_scanf_float+0x138>
 8006e64:	2b60      	cmp	r3, #96	@ 0x60
 8006e66:	d8b1      	bhi.n	8006dcc <_scanf_float+0x8c>
 8006e68:	2b54      	cmp	r3, #84	@ 0x54
 8006e6a:	d07b      	beq.n	8006f64 <_scanf_float+0x224>
 8006e6c:	2b59      	cmp	r3, #89	@ 0x59
 8006e6e:	d19a      	bne.n	8006da6 <_scanf_float+0x66>
 8006e70:	2d07      	cmp	r5, #7
 8006e72:	d198      	bne.n	8006da6 <_scanf_float+0x66>
 8006e74:	2508      	movs	r5, #8
 8006e76:	e02f      	b.n	8006ed8 <_scanf_float+0x198>
 8006e78:	2b74      	cmp	r3, #116	@ 0x74
 8006e7a:	d073      	beq.n	8006f64 <_scanf_float+0x224>
 8006e7c:	2b79      	cmp	r3, #121	@ 0x79
 8006e7e:	e7f6      	b.n	8006e6e <_scanf_float+0x12e>
 8006e80:	6821      	ldr	r1, [r4, #0]
 8006e82:	05c8      	lsls	r0, r1, #23
 8006e84:	d51e      	bpl.n	8006ec4 <_scanf_float+0x184>
 8006e86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e8a:	6021      	str	r1, [r4, #0]
 8006e8c:	3701      	adds	r7, #1
 8006e8e:	f1bb 0f00 	cmp.w	fp, #0
 8006e92:	d003      	beq.n	8006e9c <_scanf_float+0x15c>
 8006e94:	3201      	adds	r2, #1
 8006e96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e9a:	60a2      	str	r2, [r4, #8]
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f8c9 3004 	str.w	r3, [r9, #4]
 8006eb4:	f340 8082 	ble.w	8006fbc <_scanf_float+0x27c>
 8006eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c9 3000 	str.w	r3, [r9]
 8006ec2:	e762      	b.n	8006d8a <_scanf_float+0x4a>
 8006ec4:	eb1a 0105 	adds.w	r1, sl, r5
 8006ec8:	f47f af6d 	bne.w	8006da6 <_scanf_float+0x66>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ed2:	6022      	str	r2, [r4, #0]
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	468a      	mov	sl, r1
 8006ed8:	f806 3b01 	strb.w	r3, [r6], #1
 8006edc:	e7de      	b.n	8006e9c <_scanf_float+0x15c>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	0610      	lsls	r0, r2, #24
 8006ee2:	f57f af60 	bpl.w	8006da6 <_scanf_float+0x66>
 8006ee6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	e7f4      	b.n	8006ed8 <_scanf_float+0x198>
 8006eee:	f1ba 0f00 	cmp.w	sl, #0
 8006ef2:	d10c      	bne.n	8006f0e <_scanf_float+0x1ce>
 8006ef4:	b977      	cbnz	r7, 8006f14 <_scanf_float+0x1d4>
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006efc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f00:	d108      	bne.n	8006f14 <_scanf_float+0x1d4>
 8006f02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f06:	6022      	str	r2, [r4, #0]
 8006f08:	f04f 0a01 	mov.w	sl, #1
 8006f0c:	e7e4      	b.n	8006ed8 <_scanf_float+0x198>
 8006f0e:	f1ba 0f02 	cmp.w	sl, #2
 8006f12:	d050      	beq.n	8006fb6 <_scanf_float+0x276>
 8006f14:	2d01      	cmp	r5, #1
 8006f16:	d002      	beq.n	8006f1e <_scanf_float+0x1de>
 8006f18:	2d04      	cmp	r5, #4
 8006f1a:	f47f af44 	bne.w	8006da6 <_scanf_float+0x66>
 8006f1e:	3501      	adds	r5, #1
 8006f20:	b2ed      	uxtb	r5, r5
 8006f22:	e7d9      	b.n	8006ed8 <_scanf_float+0x198>
 8006f24:	f1ba 0f01 	cmp.w	sl, #1
 8006f28:	f47f af3d 	bne.w	8006da6 <_scanf_float+0x66>
 8006f2c:	f04f 0a02 	mov.w	sl, #2
 8006f30:	e7d2      	b.n	8006ed8 <_scanf_float+0x198>
 8006f32:	b975      	cbnz	r5, 8006f52 <_scanf_float+0x212>
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	f47f af37 	bne.w	8006da8 <_scanf_float+0x68>
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f44:	f040 8103 	bne.w	800714e <_scanf_float+0x40e>
 8006f48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	2501      	movs	r5, #1
 8006f50:	e7c2      	b.n	8006ed8 <_scanf_float+0x198>
 8006f52:	2d03      	cmp	r5, #3
 8006f54:	d0e3      	beq.n	8006f1e <_scanf_float+0x1de>
 8006f56:	2d05      	cmp	r5, #5
 8006f58:	e7df      	b.n	8006f1a <_scanf_float+0x1da>
 8006f5a:	2d02      	cmp	r5, #2
 8006f5c:	f47f af23 	bne.w	8006da6 <_scanf_float+0x66>
 8006f60:	2503      	movs	r5, #3
 8006f62:	e7b9      	b.n	8006ed8 <_scanf_float+0x198>
 8006f64:	2d06      	cmp	r5, #6
 8006f66:	f47f af1e 	bne.w	8006da6 <_scanf_float+0x66>
 8006f6a:	2507      	movs	r5, #7
 8006f6c:	e7b4      	b.n	8006ed8 <_scanf_float+0x198>
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	0591      	lsls	r1, r2, #22
 8006f72:	f57f af18 	bpl.w	8006da6 <_scanf_float+0x66>
 8006f76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	9702      	str	r7, [sp, #8]
 8006f7e:	e7ab      	b.n	8006ed8 <_scanf_float+0x198>
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f8a:	d005      	beq.n	8006f98 <_scanf_float+0x258>
 8006f8c:	0550      	lsls	r0, r2, #21
 8006f8e:	f57f af0a 	bpl.w	8006da6 <_scanf_float+0x66>
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	f000 80db 	beq.w	800714e <_scanf_float+0x40e>
 8006f98:	0591      	lsls	r1, r2, #22
 8006f9a:	bf58      	it	pl
 8006f9c:	9902      	ldrpl	r1, [sp, #8]
 8006f9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006fa2:	bf58      	it	pl
 8006fa4:	1a79      	subpl	r1, r7, r1
 8006fa6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006faa:	bf58      	it	pl
 8006fac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fb0:	6022      	str	r2, [r4, #0]
 8006fb2:	2700      	movs	r7, #0
 8006fb4:	e790      	b.n	8006ed8 <_scanf_float+0x198>
 8006fb6:	f04f 0a03 	mov.w	sl, #3
 8006fba:	e78d      	b.n	8006ed8 <_scanf_float+0x198>
 8006fbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4798      	blx	r3
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f aedf 	beq.w	8006d8a <_scanf_float+0x4a>
 8006fcc:	e6eb      	b.n	8006da6 <_scanf_float+0x66>
 8006fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fd6:	464a      	mov	r2, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4798      	blx	r3
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	e6eb      	b.n	8006dbc <_scanf_float+0x7c>
 8006fe4:	1e6b      	subs	r3, r5, #1
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d824      	bhi.n	8007034 <_scanf_float+0x2f4>
 8006fea:	2d02      	cmp	r5, #2
 8006fec:	d836      	bhi.n	800705c <_scanf_float+0x31c>
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	f67f aee7 	bls.w	8006dc4 <_scanf_float+0x84>
 8006ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ffe:	464a      	mov	r2, r9
 8007000:	4640      	mov	r0, r8
 8007002:	4798      	blx	r3
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	3b01      	subs	r3, #1
 8007008:	6123      	str	r3, [r4, #16]
 800700a:	e7f0      	b.n	8006fee <_scanf_float+0x2ae>
 800700c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007010:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007014:	464a      	mov	r2, r9
 8007016:	4640      	mov	r0, r8
 8007018:	4798      	blx	r3
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	3b01      	subs	r3, #1
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007024:	fa5f fa8a 	uxtb.w	sl, sl
 8007028:	f1ba 0f02 	cmp.w	sl, #2
 800702c:	d1ee      	bne.n	800700c <_scanf_float+0x2cc>
 800702e:	3d03      	subs	r5, #3
 8007030:	b2ed      	uxtb	r5, r5
 8007032:	1b76      	subs	r6, r6, r5
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	05da      	lsls	r2, r3, #23
 8007038:	d530      	bpl.n	800709c <_scanf_float+0x35c>
 800703a:	055b      	lsls	r3, r3, #21
 800703c:	d511      	bpl.n	8007062 <_scanf_float+0x322>
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	429e      	cmp	r6, r3
 8007042:	f67f aebf 	bls.w	8006dc4 <_scanf_float+0x84>
 8007046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800704a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800704e:	464a      	mov	r2, r9
 8007050:	4640      	mov	r0, r8
 8007052:	4798      	blx	r3
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	3b01      	subs	r3, #1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	e7f0      	b.n	800703e <_scanf_float+0x2fe>
 800705c:	46aa      	mov	sl, r5
 800705e:	46b3      	mov	fp, r6
 8007060:	e7de      	b.n	8007020 <_scanf_float+0x2e0>
 8007062:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	2965      	cmp	r1, #101	@ 0x65
 800706a:	f103 33ff 	add.w	r3, r3, #4294967295
 800706e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	d00c      	beq.n	8007090 <_scanf_float+0x350>
 8007076:	2945      	cmp	r1, #69	@ 0x45
 8007078:	d00a      	beq.n	8007090 <_scanf_float+0x350>
 800707a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800707e:	464a      	mov	r2, r9
 8007080:	4640      	mov	r0, r8
 8007082:	4798      	blx	r3
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800708a:	3b01      	subs	r3, #1
 800708c:	1eb5      	subs	r5, r6, #2
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007094:	464a      	mov	r2, r9
 8007096:	4640      	mov	r0, r8
 8007098:	4798      	blx	r3
 800709a:	462e      	mov	r6, r5
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	f012 0210 	ands.w	r2, r2, #16
 80070a2:	d001      	beq.n	80070a8 <_scanf_float+0x368>
 80070a4:	2000      	movs	r0, #0
 80070a6:	e68e      	b.n	8006dc6 <_scanf_float+0x86>
 80070a8:	7032      	strb	r2, [r6, #0]
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b4:	d125      	bne.n	8007102 <_scanf_float+0x3c2>
 80070b6:	9b02      	ldr	r3, [sp, #8]
 80070b8:	429f      	cmp	r7, r3
 80070ba:	d00a      	beq.n	80070d2 <_scanf_float+0x392>
 80070bc:	1bda      	subs	r2, r3, r7
 80070be:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070c2:	429e      	cmp	r6, r3
 80070c4:	bf28      	it	cs
 80070c6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070ca:	4922      	ldr	r1, [pc, #136]	@ (8007154 <_scanf_float+0x414>)
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 f93d 	bl	800734c <siprintf>
 80070d2:	9901      	ldr	r1, [sp, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	4640      	mov	r0, r8
 80070d8:	f002 fca2 	bl	8009a20 <_strtod_r>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f011 0f02 	tst.w	r1, #2
 80070e6:	ec57 6b10 	vmov	r6, r7, d0
 80070ea:	f103 0204 	add.w	r2, r3, #4
 80070ee:	d015      	beq.n	800711c <_scanf_float+0x3dc>
 80070f0:	9903      	ldr	r1, [sp, #12]
 80070f2:	600a      	str	r2, [r1, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	e9c3 6700 	strd	r6, r7, [r3]
 80070fa:	68e3      	ldr	r3, [r4, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60e3      	str	r3, [r4, #12]
 8007100:	e7d0      	b.n	80070a4 <_scanf_float+0x364>
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0e4      	beq.n	80070d2 <_scanf_float+0x392>
 8007108:	9905      	ldr	r1, [sp, #20]
 800710a:	230a      	movs	r3, #10
 800710c:	3101      	adds	r1, #1
 800710e:	4640      	mov	r0, r8
 8007110:	f002 fd06 	bl	8009b20 <_strtol_r>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	9e05      	ldr	r6, [sp, #20]
 8007118:	1ac2      	subs	r2, r0, r3
 800711a:	e7d0      	b.n	80070be <_scanf_float+0x37e>
 800711c:	f011 0f04 	tst.w	r1, #4
 8007120:	9903      	ldr	r1, [sp, #12]
 8007122:	600a      	str	r2, [r1, #0]
 8007124:	d1e6      	bne.n	80070f4 <_scanf_float+0x3b4>
 8007126:	681d      	ldr	r5, [r3, #0]
 8007128:	4632      	mov	r2, r6
 800712a:	463b      	mov	r3, r7
 800712c:	4630      	mov	r0, r6
 800712e:	4639      	mov	r1, r7
 8007130:	f7f9 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8007134:	b128      	cbz	r0, 8007142 <_scanf_float+0x402>
 8007136:	4808      	ldr	r0, [pc, #32]	@ (8007158 <_scanf_float+0x418>)
 8007138:	f000 fa4a 	bl	80075d0 <nanf>
 800713c:	ed85 0a00 	vstr	s0, [r5]
 8007140:	e7db      	b.n	80070fa <_scanf_float+0x3ba>
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fd4f 	bl	8000be8 <__aeabi_d2f>
 800714a:	6028      	str	r0, [r5, #0]
 800714c:	e7d5      	b.n	80070fa <_scanf_float+0x3ba>
 800714e:	2700      	movs	r7, #0
 8007150:	e62e      	b.n	8006db0 <_scanf_float+0x70>
 8007152:	bf00      	nop
 8007154:	0800ad1c 	.word	0x0800ad1c
 8007158:	0800adcd 	.word	0x0800adcd

0800715c <std>:
 800715c:	2300      	movs	r3, #0
 800715e:	b510      	push	{r4, lr}
 8007160:	4604      	mov	r4, r0
 8007162:	e9c0 3300 	strd	r3, r3, [r0]
 8007166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800716a:	6083      	str	r3, [r0, #8]
 800716c:	8181      	strh	r1, [r0, #12]
 800716e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007170:	81c2      	strh	r2, [r0, #14]
 8007172:	6183      	str	r3, [r0, #24]
 8007174:	4619      	mov	r1, r3
 8007176:	2208      	movs	r2, #8
 8007178:	305c      	adds	r0, #92	@ 0x5c
 800717a:	f000 f94c 	bl	8007416 <memset>
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <std+0x58>)
 8007180:	6263      	str	r3, [r4, #36]	@ 0x24
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <std+0x5c>)
 8007184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <std+0x60>)
 8007188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <std+0x64>)
 800718c:	6323      	str	r3, [r4, #48]	@ 0x30
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <std+0x68>)
 8007190:	6224      	str	r4, [r4, #32]
 8007192:	429c      	cmp	r4, r3
 8007194:	d006      	beq.n	80071a4 <std+0x48>
 8007196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800719a:	4294      	cmp	r4, r2
 800719c:	d002      	beq.n	80071a4 <std+0x48>
 800719e:	33d0      	adds	r3, #208	@ 0xd0
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d105      	bne.n	80071b0 <std+0x54>
 80071a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	f000 ba0c 	b.w	80075c8 <__retarget_lock_init_recursive>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	bf00      	nop
 80071b4:	08007391 	.word	0x08007391
 80071b8:	080073b3 	.word	0x080073b3
 80071bc:	080073eb 	.word	0x080073eb
 80071c0:	0800740f 	.word	0x0800740f
 80071c4:	200002fc 	.word	0x200002fc

080071c8 <stdio_exit_handler>:
 80071c8:	4a02      	ldr	r2, [pc, #8]	@ (80071d4 <stdio_exit_handler+0xc>)
 80071ca:	4903      	ldr	r1, [pc, #12]	@ (80071d8 <stdio_exit_handler+0x10>)
 80071cc:	4803      	ldr	r0, [pc, #12]	@ (80071dc <stdio_exit_handler+0x14>)
 80071ce:	f000 b869 	b.w	80072a4 <_fwalk_sglue>
 80071d2:	bf00      	nop
 80071d4:	2000000c 	.word	0x2000000c
 80071d8:	08009edd 	.word	0x08009edd
 80071dc:	2000001c 	.word	0x2000001c

080071e0 <cleanup_stdio>:
 80071e0:	6841      	ldr	r1, [r0, #4]
 80071e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <cleanup_stdio+0x34>)
 80071e4:	4299      	cmp	r1, r3
 80071e6:	b510      	push	{r4, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	d001      	beq.n	80071f0 <cleanup_stdio+0x10>
 80071ec:	f002 fe76 	bl	8009edc <_fflush_r>
 80071f0:	68a1      	ldr	r1, [r4, #8]
 80071f2:	4b09      	ldr	r3, [pc, #36]	@ (8007218 <cleanup_stdio+0x38>)
 80071f4:	4299      	cmp	r1, r3
 80071f6:	d002      	beq.n	80071fe <cleanup_stdio+0x1e>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f002 fe6f 	bl	8009edc <_fflush_r>
 80071fe:	68e1      	ldr	r1, [r4, #12]
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <cleanup_stdio+0x3c>)
 8007202:	4299      	cmp	r1, r3
 8007204:	d004      	beq.n	8007210 <cleanup_stdio+0x30>
 8007206:	4620      	mov	r0, r4
 8007208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720c:	f002 be66 	b.w	8009edc <_fflush_r>
 8007210:	bd10      	pop	{r4, pc}
 8007212:	bf00      	nop
 8007214:	200002fc 	.word	0x200002fc
 8007218:	20000364 	.word	0x20000364
 800721c:	200003cc 	.word	0x200003cc

08007220 <global_stdio_init.part.0>:
 8007220:	b510      	push	{r4, lr}
 8007222:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <global_stdio_init.part.0+0x30>)
 8007224:	4c0b      	ldr	r4, [pc, #44]	@ (8007254 <global_stdio_init.part.0+0x34>)
 8007226:	4a0c      	ldr	r2, [pc, #48]	@ (8007258 <global_stdio_init.part.0+0x38>)
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	4620      	mov	r0, r4
 800722c:	2200      	movs	r2, #0
 800722e:	2104      	movs	r1, #4
 8007230:	f7ff ff94 	bl	800715c <std>
 8007234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007238:	2201      	movs	r2, #1
 800723a:	2109      	movs	r1, #9
 800723c:	f7ff ff8e 	bl	800715c <std>
 8007240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007244:	2202      	movs	r2, #2
 8007246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724a:	2112      	movs	r1, #18
 800724c:	f7ff bf86 	b.w	800715c <std>
 8007250:	20000434 	.word	0x20000434
 8007254:	200002fc 	.word	0x200002fc
 8007258:	080071c9 	.word	0x080071c9

0800725c <__sfp_lock_acquire>:
 800725c:	4801      	ldr	r0, [pc, #4]	@ (8007264 <__sfp_lock_acquire+0x8>)
 800725e:	f000 b9b4 	b.w	80075ca <__retarget_lock_acquire_recursive>
 8007262:	bf00      	nop
 8007264:	2000043d 	.word	0x2000043d

08007268 <__sfp_lock_release>:
 8007268:	4801      	ldr	r0, [pc, #4]	@ (8007270 <__sfp_lock_release+0x8>)
 800726a:	f000 b9af 	b.w	80075cc <__retarget_lock_release_recursive>
 800726e:	bf00      	nop
 8007270:	2000043d 	.word	0x2000043d

08007274 <__sinit>:
 8007274:	b510      	push	{r4, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	f7ff fff0 	bl	800725c <__sfp_lock_acquire>
 800727c:	6a23      	ldr	r3, [r4, #32]
 800727e:	b11b      	cbz	r3, 8007288 <__sinit+0x14>
 8007280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007284:	f7ff bff0 	b.w	8007268 <__sfp_lock_release>
 8007288:	4b04      	ldr	r3, [pc, #16]	@ (800729c <__sinit+0x28>)
 800728a:	6223      	str	r3, [r4, #32]
 800728c:	4b04      	ldr	r3, [pc, #16]	@ (80072a0 <__sinit+0x2c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f5      	bne.n	8007280 <__sinit+0xc>
 8007294:	f7ff ffc4 	bl	8007220 <global_stdio_init.part.0>
 8007298:	e7f2      	b.n	8007280 <__sinit+0xc>
 800729a:	bf00      	nop
 800729c:	080071e1 	.word	0x080071e1
 80072a0:	20000434 	.word	0x20000434

080072a4 <_fwalk_sglue>:
 80072a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a8:	4607      	mov	r7, r0
 80072aa:	4688      	mov	r8, r1
 80072ac:	4614      	mov	r4, r2
 80072ae:	2600      	movs	r6, #0
 80072b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072b4:	f1b9 0901 	subs.w	r9, r9, #1
 80072b8:	d505      	bpl.n	80072c6 <_fwalk_sglue+0x22>
 80072ba:	6824      	ldr	r4, [r4, #0]
 80072bc:	2c00      	cmp	r4, #0
 80072be:	d1f7      	bne.n	80072b0 <_fwalk_sglue+0xc>
 80072c0:	4630      	mov	r0, r6
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	89ab      	ldrh	r3, [r5, #12]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d907      	bls.n	80072dc <_fwalk_sglue+0x38>
 80072cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072d0:	3301      	adds	r3, #1
 80072d2:	d003      	beq.n	80072dc <_fwalk_sglue+0x38>
 80072d4:	4629      	mov	r1, r5
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	4306      	orrs	r6, r0
 80072dc:	3568      	adds	r5, #104	@ 0x68
 80072de:	e7e9      	b.n	80072b4 <_fwalk_sglue+0x10>

080072e0 <sniprintf>:
 80072e0:	b40c      	push	{r2, r3}
 80072e2:	b530      	push	{r4, r5, lr}
 80072e4:	4b18      	ldr	r3, [pc, #96]	@ (8007348 <sniprintf+0x68>)
 80072e6:	1e0c      	subs	r4, r1, #0
 80072e8:	681d      	ldr	r5, [r3, #0]
 80072ea:	b09d      	sub	sp, #116	@ 0x74
 80072ec:	da08      	bge.n	8007300 <sniprintf+0x20>
 80072ee:	238b      	movs	r3, #139	@ 0x8b
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f04f 30ff 	mov.w	r0, #4294967295
 80072f6:	b01d      	add	sp, #116	@ 0x74
 80072f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072fc:	b002      	add	sp, #8
 80072fe:	4770      	bx	lr
 8007300:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007304:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800730e:	bf14      	ite	ne
 8007310:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007314:	4623      	moveq	r3, r4
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800731e:	9002      	str	r0, [sp, #8]
 8007320:	9006      	str	r0, [sp, #24]
 8007322:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007326:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007328:	ab21      	add	r3, sp, #132	@ 0x84
 800732a:	a902      	add	r1, sp, #8
 800732c:	4628      	mov	r0, r5
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	f002 fc54 	bl	8009bdc <_svfiprintf_r>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	bfbc      	itt	lt
 8007338:	238b      	movlt	r3, #139	@ 0x8b
 800733a:	602b      	strlt	r3, [r5, #0]
 800733c:	2c00      	cmp	r4, #0
 800733e:	d0da      	beq.n	80072f6 <sniprintf+0x16>
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	e7d6      	b.n	80072f6 <sniprintf+0x16>
 8007348:	20000018 	.word	0x20000018

0800734c <siprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b510      	push	{r4, lr}
 8007350:	b09d      	sub	sp, #116	@ 0x74
 8007352:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007354:	9002      	str	r0, [sp, #8]
 8007356:	9006      	str	r0, [sp, #24]
 8007358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800735c:	480a      	ldr	r0, [pc, #40]	@ (8007388 <siprintf+0x3c>)
 800735e:	9107      	str	r1, [sp, #28]
 8007360:	9104      	str	r1, [sp, #16]
 8007362:	490a      	ldr	r1, [pc, #40]	@ (800738c <siprintf+0x40>)
 8007364:	f853 2b04 	ldr.w	r2, [r3], #4
 8007368:	9105      	str	r1, [sp, #20]
 800736a:	2400      	movs	r4, #0
 800736c:	a902      	add	r1, sp, #8
 800736e:	6800      	ldr	r0, [r0, #0]
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007374:	f002 fc32 	bl	8009bdc <_svfiprintf_r>
 8007378:	9b02      	ldr	r3, [sp, #8]
 800737a:	701c      	strb	r4, [r3, #0]
 800737c:	b01d      	add	sp, #116	@ 0x74
 800737e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007382:	b003      	add	sp, #12
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000018 	.word	0x20000018
 800738c:	ffff0208 	.word	0xffff0208

08007390 <__sread>:
 8007390:	b510      	push	{r4, lr}
 8007392:	460c      	mov	r4, r1
 8007394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007398:	f000 f8c8 	bl	800752c <_read_r>
 800739c:	2800      	cmp	r0, #0
 800739e:	bfab      	itete	ge
 80073a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073a2:	89a3      	ldrhlt	r3, [r4, #12]
 80073a4:	181b      	addge	r3, r3, r0
 80073a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073aa:	bfac      	ite	ge
 80073ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ae:	81a3      	strhlt	r3, [r4, #12]
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <__swrite>:
 80073b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b6:	461f      	mov	r7, r3
 80073b8:	898b      	ldrh	r3, [r1, #12]
 80073ba:	05db      	lsls	r3, r3, #23
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	4616      	mov	r6, r2
 80073c2:	d505      	bpl.n	80073d0 <__swrite+0x1e>
 80073c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c8:	2302      	movs	r3, #2
 80073ca:	2200      	movs	r2, #0
 80073cc:	f000 f89c 	bl	8007508 <_lseek_r>
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	4632      	mov	r2, r6
 80073de:	463b      	mov	r3, r7
 80073e0:	4628      	mov	r0, r5
 80073e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	f000 b8b3 	b.w	8007550 <_write_r>

080073ea <__sseek>:
 80073ea:	b510      	push	{r4, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 f889 	bl	8007508 <_lseek_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	bf15      	itete	ne
 80073fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007402:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007406:	81a3      	strheq	r3, [r4, #12]
 8007408:	bf18      	it	ne
 800740a:	81a3      	strhne	r3, [r4, #12]
 800740c:	bd10      	pop	{r4, pc}

0800740e <__sclose>:
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 b869 	b.w	80074e8 <_close_r>

08007416 <memset>:
 8007416:	4402      	add	r2, r0
 8007418:	4603      	mov	r3, r0
 800741a:	4293      	cmp	r3, r2
 800741c:	d100      	bne.n	8007420 <memset+0xa>
 800741e:	4770      	bx	lr
 8007420:	f803 1b01 	strb.w	r1, [r3], #1
 8007424:	e7f9      	b.n	800741a <memset+0x4>
	...

08007428 <strtok>:
 8007428:	4b16      	ldr	r3, [pc, #88]	@ (8007484 <strtok+0x5c>)
 800742a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742e:	681f      	ldr	r7, [r3, #0]
 8007430:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007432:	4605      	mov	r5, r0
 8007434:	460e      	mov	r6, r1
 8007436:	b9ec      	cbnz	r4, 8007474 <strtok+0x4c>
 8007438:	2050      	movs	r0, #80	@ 0x50
 800743a:	f000 ff8f 	bl	800835c <malloc>
 800743e:	4602      	mov	r2, r0
 8007440:	6478      	str	r0, [r7, #68]	@ 0x44
 8007442:	b920      	cbnz	r0, 800744e <strtok+0x26>
 8007444:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <strtok+0x60>)
 8007446:	4811      	ldr	r0, [pc, #68]	@ (800748c <strtok+0x64>)
 8007448:	215b      	movs	r1, #91	@ 0x5b
 800744a:	f000 f8c7 	bl	80075dc <__assert_func>
 800744e:	e9c0 4400 	strd	r4, r4, [r0]
 8007452:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007456:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800745a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800745e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007462:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007466:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800746a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800746e:	6184      	str	r4, [r0, #24]
 8007470:	7704      	strb	r4, [r0, #28]
 8007472:	6244      	str	r4, [r0, #36]	@ 0x24
 8007474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	2301      	movs	r3, #1
 800747c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	f000 b806 	b.w	8007490 <__strtok_r>
 8007484:	20000018 	.word	0x20000018
 8007488:	0800ad21 	.word	0x0800ad21
 800748c:	0800ad38 	.word	0x0800ad38

08007490 <__strtok_r>:
 8007490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007492:	4604      	mov	r4, r0
 8007494:	b908      	cbnz	r0, 800749a <__strtok_r+0xa>
 8007496:	6814      	ldr	r4, [r2, #0]
 8007498:	b144      	cbz	r4, 80074ac <__strtok_r+0x1c>
 800749a:	4620      	mov	r0, r4
 800749c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80074a0:	460f      	mov	r7, r1
 80074a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80074a6:	b91e      	cbnz	r6, 80074b0 <__strtok_r+0x20>
 80074a8:	b965      	cbnz	r5, 80074c4 <__strtok_r+0x34>
 80074aa:	6015      	str	r5, [r2, #0]
 80074ac:	2000      	movs	r0, #0
 80074ae:	e005      	b.n	80074bc <__strtok_r+0x2c>
 80074b0:	42b5      	cmp	r5, r6
 80074b2:	d1f6      	bne.n	80074a2 <__strtok_r+0x12>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1f0      	bne.n	800749a <__strtok_r+0xa>
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	7003      	strb	r3, [r0, #0]
 80074bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074be:	461c      	mov	r4, r3
 80074c0:	e00c      	b.n	80074dc <__strtok_r+0x4c>
 80074c2:	b91d      	cbnz	r5, 80074cc <__strtok_r+0x3c>
 80074c4:	4627      	mov	r7, r4
 80074c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074ca:	460e      	mov	r6, r1
 80074cc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	d1f6      	bne.n	80074c2 <__strtok_r+0x32>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f2      	beq.n	80074be <__strtok_r+0x2e>
 80074d8:	2300      	movs	r3, #0
 80074da:	703b      	strb	r3, [r7, #0]
 80074dc:	6014      	str	r4, [r2, #0]
 80074de:	e7ed      	b.n	80074bc <__strtok_r+0x2c>

080074e0 <_localeconv_r>:
 80074e0:	4800      	ldr	r0, [pc, #0]	@ (80074e4 <_localeconv_r+0x4>)
 80074e2:	4770      	bx	lr
 80074e4:	20000158 	.word	0x20000158

080074e8 <_close_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d06      	ldr	r5, [pc, #24]	@ (8007504 <_close_r+0x1c>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	f7fa fbae 	bl	8001c54 <_close>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_close_r+0x1a>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_close_r+0x1a>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000438 	.word	0x20000438

08007508 <_lseek_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d07      	ldr	r5, [pc, #28]	@ (8007528 <_lseek_r+0x20>)
 800750c:	4604      	mov	r4, r0
 800750e:	4608      	mov	r0, r1
 8007510:	4611      	mov	r1, r2
 8007512:	2200      	movs	r2, #0
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f7fa fbc3 	bl	8001ca2 <_lseek>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_lseek_r+0x1e>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_lseek_r+0x1e>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	20000438 	.word	0x20000438

0800752c <_read_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	@ (800754c <_read_r+0x20>)
 8007530:	4604      	mov	r4, r0
 8007532:	4608      	mov	r0, r1
 8007534:	4611      	mov	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f7fa fb51 	bl	8001be2 <_read>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_read_r+0x1e>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_read_r+0x1e>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000438 	.word	0x20000438

08007550 <_write_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	@ (8007570 <_write_r+0x20>)
 8007554:	4604      	mov	r4, r0
 8007556:	4608      	mov	r0, r1
 8007558:	4611      	mov	r1, r2
 800755a:	2200      	movs	r2, #0
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fa fb5c 	bl	8001c1c <_write>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_write_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_write_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000438 	.word	0x20000438

08007574 <__errno>:
 8007574:	4b01      	ldr	r3, [pc, #4]	@ (800757c <__errno+0x8>)
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000018 	.word	0x20000018

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4d0d      	ldr	r5, [pc, #52]	@ (80075b8 <__libc_init_array+0x38>)
 8007584:	4c0d      	ldr	r4, [pc, #52]	@ (80075bc <__libc_init_array+0x3c>)
 8007586:	1b64      	subs	r4, r4, r5
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	2600      	movs	r6, #0
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	4d0b      	ldr	r5, [pc, #44]	@ (80075c0 <__libc_init_array+0x40>)
 8007592:	4c0c      	ldr	r4, [pc, #48]	@ (80075c4 <__libc_init_array+0x44>)
 8007594:	f003 fb76 	bl	800ac84 <_init>
 8007598:	1b64      	subs	r4, r4, r5
 800759a:	10a4      	asrs	r4, r4, #2
 800759c:	2600      	movs	r6, #0
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	0800b174 	.word	0x0800b174
 80075bc:	0800b174 	.word	0x0800b174
 80075c0:	0800b174 	.word	0x0800b174
 80075c4:	0800b178 	.word	0x0800b178

080075c8 <__retarget_lock_init_recursive>:
 80075c8:	4770      	bx	lr

080075ca <__retarget_lock_acquire_recursive>:
 80075ca:	4770      	bx	lr

080075cc <__retarget_lock_release_recursive>:
 80075cc:	4770      	bx	lr
	...

080075d0 <nanf>:
 80075d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075d8 <nanf+0x8>
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	7fc00000 	.word	0x7fc00000

080075dc <__assert_func>:
 80075dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075de:	4614      	mov	r4, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <__assert_func+0x2c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4605      	mov	r5, r0
 80075e8:	68d8      	ldr	r0, [r3, #12]
 80075ea:	b14c      	cbz	r4, 8007600 <__assert_func+0x24>
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <__assert_func+0x30>)
 80075ee:	9100      	str	r1, [sp, #0]
 80075f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f4:	4906      	ldr	r1, [pc, #24]	@ (8007610 <__assert_func+0x34>)
 80075f6:	462b      	mov	r3, r5
 80075f8:	f002 fc98 	bl	8009f2c <fiprintf>
 80075fc:	f002 fcfc 	bl	8009ff8 <abort>
 8007600:	4b04      	ldr	r3, [pc, #16]	@ (8007614 <__assert_func+0x38>)
 8007602:	461c      	mov	r4, r3
 8007604:	e7f3      	b.n	80075ee <__assert_func+0x12>
 8007606:	bf00      	nop
 8007608:	20000018 	.word	0x20000018
 800760c:	0800ad92 	.word	0x0800ad92
 8007610:	0800ad9f 	.word	0x0800ad9f
 8007614:	0800adcd 	.word	0x0800adcd

08007618 <quorem>:
 8007618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	6903      	ldr	r3, [r0, #16]
 800761e:	690c      	ldr	r4, [r1, #16]
 8007620:	42a3      	cmp	r3, r4
 8007622:	4607      	mov	r7, r0
 8007624:	db7e      	blt.n	8007724 <quorem+0x10c>
 8007626:	3c01      	subs	r4, #1
 8007628:	f101 0814 	add.w	r8, r1, #20
 800762c:	00a3      	lsls	r3, r4, #2
 800762e:	f100 0514 	add.w	r5, r0, #20
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800763e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007642:	3301      	adds	r3, #1
 8007644:	429a      	cmp	r2, r3
 8007646:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800764a:	fbb2 f6f3 	udiv	r6, r2, r3
 800764e:	d32e      	bcc.n	80076ae <quorem+0x96>
 8007650:	f04f 0a00 	mov.w	sl, #0
 8007654:	46c4      	mov	ip, r8
 8007656:	46ae      	mov	lr, r5
 8007658:	46d3      	mov	fp, sl
 800765a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800765e:	b298      	uxth	r0, r3
 8007660:	fb06 a000 	mla	r0, r6, r0, sl
 8007664:	0c02      	lsrs	r2, r0, #16
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	fb06 2303 	mla	r3, r6, r3, r2
 800766c:	f8de 2000 	ldr.w	r2, [lr]
 8007670:	b280      	uxth	r0, r0
 8007672:	b292      	uxth	r2, r2
 8007674:	1a12      	subs	r2, r2, r0
 8007676:	445a      	add	r2, fp
 8007678:	f8de 0000 	ldr.w	r0, [lr]
 800767c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007680:	b29b      	uxth	r3, r3
 8007682:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007686:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800768a:	b292      	uxth	r2, r2
 800768c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007690:	45e1      	cmp	r9, ip
 8007692:	f84e 2b04 	str.w	r2, [lr], #4
 8007696:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800769a:	d2de      	bcs.n	800765a <quorem+0x42>
 800769c:	9b00      	ldr	r3, [sp, #0]
 800769e:	58eb      	ldr	r3, [r5, r3]
 80076a0:	b92b      	cbnz	r3, 80076ae <quorem+0x96>
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	429d      	cmp	r5, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	d32f      	bcc.n	800770c <quorem+0xf4>
 80076ac:	613c      	str	r4, [r7, #16]
 80076ae:	4638      	mov	r0, r7
 80076b0:	f001 f9c6 	bl	8008a40 <__mcmp>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	db25      	blt.n	8007704 <quorem+0xec>
 80076b8:	4629      	mov	r1, r5
 80076ba:	2000      	movs	r0, #0
 80076bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80076c0:	f8d1 c000 	ldr.w	ip, [r1]
 80076c4:	fa1f fe82 	uxth.w	lr, r2
 80076c8:	fa1f f38c 	uxth.w	r3, ip
 80076cc:	eba3 030e 	sub.w	r3, r3, lr
 80076d0:	4403      	add	r3, r0
 80076d2:	0c12      	lsrs	r2, r2, #16
 80076d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e2:	45c1      	cmp	r9, r8
 80076e4:	f841 3b04 	str.w	r3, [r1], #4
 80076e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076ec:	d2e6      	bcs.n	80076bc <quorem+0xa4>
 80076ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f6:	b922      	cbnz	r2, 8007702 <quorem+0xea>
 80076f8:	3b04      	subs	r3, #4
 80076fa:	429d      	cmp	r5, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	d30b      	bcc.n	8007718 <quorem+0x100>
 8007700:	613c      	str	r4, [r7, #16]
 8007702:	3601      	adds	r6, #1
 8007704:	4630      	mov	r0, r6
 8007706:	b003      	add	sp, #12
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	3b04      	subs	r3, #4
 8007710:	2a00      	cmp	r2, #0
 8007712:	d1cb      	bne.n	80076ac <quorem+0x94>
 8007714:	3c01      	subs	r4, #1
 8007716:	e7c6      	b.n	80076a6 <quorem+0x8e>
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	3b04      	subs	r3, #4
 800771c:	2a00      	cmp	r2, #0
 800771e:	d1ef      	bne.n	8007700 <quorem+0xe8>
 8007720:	3c01      	subs	r4, #1
 8007722:	e7ea      	b.n	80076fa <quorem+0xe2>
 8007724:	2000      	movs	r0, #0
 8007726:	e7ee      	b.n	8007706 <quorem+0xee>

08007728 <_dtoa_r>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	69c7      	ldr	r7, [r0, #28]
 800772e:	b097      	sub	sp, #92	@ 0x5c
 8007730:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007734:	ec55 4b10 	vmov	r4, r5, d0
 8007738:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800773a:	9107      	str	r1, [sp, #28]
 800773c:	4681      	mov	r9, r0
 800773e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007740:	9311      	str	r3, [sp, #68]	@ 0x44
 8007742:	b97f      	cbnz	r7, 8007764 <_dtoa_r+0x3c>
 8007744:	2010      	movs	r0, #16
 8007746:	f000 fe09 	bl	800835c <malloc>
 800774a:	4602      	mov	r2, r0
 800774c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007750:	b920      	cbnz	r0, 800775c <_dtoa_r+0x34>
 8007752:	4ba9      	ldr	r3, [pc, #676]	@ (80079f8 <_dtoa_r+0x2d0>)
 8007754:	21ef      	movs	r1, #239	@ 0xef
 8007756:	48a9      	ldr	r0, [pc, #676]	@ (80079fc <_dtoa_r+0x2d4>)
 8007758:	f7ff ff40 	bl	80075dc <__assert_func>
 800775c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007760:	6007      	str	r7, [r0, #0]
 8007762:	60c7      	str	r7, [r0, #12]
 8007764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007768:	6819      	ldr	r1, [r3, #0]
 800776a:	b159      	cbz	r1, 8007784 <_dtoa_r+0x5c>
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	604a      	str	r2, [r1, #4]
 8007770:	2301      	movs	r3, #1
 8007772:	4093      	lsls	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
 8007776:	4648      	mov	r0, r9
 8007778:	f000 fee6 	bl	8008548 <_Bfree>
 800777c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	1e2b      	subs	r3, r5, #0
 8007786:	bfb9      	ittee	lt
 8007788:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800778c:	9305      	strlt	r3, [sp, #20]
 800778e:	2300      	movge	r3, #0
 8007790:	6033      	strge	r3, [r6, #0]
 8007792:	9f05      	ldr	r7, [sp, #20]
 8007794:	4b9a      	ldr	r3, [pc, #616]	@ (8007a00 <_dtoa_r+0x2d8>)
 8007796:	bfbc      	itt	lt
 8007798:	2201      	movlt	r2, #1
 800779a:	6032      	strlt	r2, [r6, #0]
 800779c:	43bb      	bics	r3, r7
 800779e:	d112      	bne.n	80077c6 <_dtoa_r+0x9e>
 80077a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077ac:	4323      	orrs	r3, r4
 80077ae:	f000 855a 	beq.w	8008266 <_dtoa_r+0xb3e>
 80077b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007a14 <_dtoa_r+0x2ec>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 855c 	beq.w	8008276 <_dtoa_r+0xb4e>
 80077be:	f10a 0303 	add.w	r3, sl, #3
 80077c2:	f000 bd56 	b.w	8008272 <_dtoa_r+0xb4a>
 80077c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077ca:	2200      	movs	r2, #0
 80077cc:	ec51 0b17 	vmov	r0, r1, d7
 80077d0:	2300      	movs	r3, #0
 80077d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077d6:	f7f9 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80077da:	4680      	mov	r8, r0
 80077dc:	b158      	cbz	r0, 80077f6 <_dtoa_r+0xce>
 80077de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077e0:	2301      	movs	r3, #1
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077e6:	b113      	cbz	r3, 80077ee <_dtoa_r+0xc6>
 80077e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077ea:	4b86      	ldr	r3, [pc, #536]	@ (8007a04 <_dtoa_r+0x2dc>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007a18 <_dtoa_r+0x2f0>
 80077f2:	f000 bd40 	b.w	8008276 <_dtoa_r+0xb4e>
 80077f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80077fa:	aa14      	add	r2, sp, #80	@ 0x50
 80077fc:	a915      	add	r1, sp, #84	@ 0x54
 80077fe:	4648      	mov	r0, r9
 8007800:	f001 fa3e 	bl	8008c80 <__d2b>
 8007804:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007808:	9002      	str	r0, [sp, #8]
 800780a:	2e00      	cmp	r6, #0
 800780c:	d078      	beq.n	8007900 <_dtoa_r+0x1d8>
 800780e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007810:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800781c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007820:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007824:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007828:	4619      	mov	r1, r3
 800782a:	2200      	movs	r2, #0
 800782c:	4b76      	ldr	r3, [pc, #472]	@ (8007a08 <_dtoa_r+0x2e0>)
 800782e:	f7f8 fd2b 	bl	8000288 <__aeabi_dsub>
 8007832:	a36b      	add	r3, pc, #428	@ (adr r3, 80079e0 <_dtoa_r+0x2b8>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fede 	bl	80005f8 <__aeabi_dmul>
 800783c:	a36a      	add	r3, pc, #424	@ (adr r3, 80079e8 <_dtoa_r+0x2c0>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fd23 	bl	800028c <__adddf3>
 8007846:	4604      	mov	r4, r0
 8007848:	4630      	mov	r0, r6
 800784a:	460d      	mov	r5, r1
 800784c:	f7f8 fe6a 	bl	8000524 <__aeabi_i2d>
 8007850:	a367      	add	r3, pc, #412	@ (adr r3, 80079f0 <_dtoa_r+0x2c8>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f8 fd13 	bl	800028c <__adddf3>
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	f7f9 f975 	bl	8000b58 <__aeabi_d2iz>
 800786e:	2200      	movs	r2, #0
 8007870:	4607      	mov	r7, r0
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f7f9 f930 	bl	8000adc <__aeabi_dcmplt>
 800787c:	b140      	cbz	r0, 8007890 <_dtoa_r+0x168>
 800787e:	4638      	mov	r0, r7
 8007880:	f7f8 fe50 	bl	8000524 <__aeabi_i2d>
 8007884:	4622      	mov	r2, r4
 8007886:	462b      	mov	r3, r5
 8007888:	f7f9 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800788c:	b900      	cbnz	r0, 8007890 <_dtoa_r+0x168>
 800788e:	3f01      	subs	r7, #1
 8007890:	2f16      	cmp	r7, #22
 8007892:	d852      	bhi.n	800793a <_dtoa_r+0x212>
 8007894:	4b5d      	ldr	r3, [pc, #372]	@ (8007a0c <_dtoa_r+0x2e4>)
 8007896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078a2:	f7f9 f91b 	bl	8000adc <__aeabi_dcmplt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d049      	beq.n	800793e <_dtoa_r+0x216>
 80078aa:	3f01      	subs	r7, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80078b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078b2:	1b9b      	subs	r3, r3, r6
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	bf45      	ittet	mi
 80078b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80078bc:	9300      	strmi	r3, [sp, #0]
 80078be:	2300      	movpl	r3, #0
 80078c0:	2300      	movmi	r3, #0
 80078c2:	9206      	str	r2, [sp, #24]
 80078c4:	bf54      	ite	pl
 80078c6:	9300      	strpl	r3, [sp, #0]
 80078c8:	9306      	strmi	r3, [sp, #24]
 80078ca:	2f00      	cmp	r7, #0
 80078cc:	db39      	blt.n	8007942 <_dtoa_r+0x21a>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80078d2:	443b      	add	r3, r7
 80078d4:	9306      	str	r3, [sp, #24]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	9b07      	ldr	r3, [sp, #28]
 80078dc:	2b09      	cmp	r3, #9
 80078de:	d863      	bhi.n	80079a8 <_dtoa_r+0x280>
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	bfc4      	itt	gt
 80078e4:	3b04      	subgt	r3, #4
 80078e6:	9307      	strgt	r3, [sp, #28]
 80078e8:	9b07      	ldr	r3, [sp, #28]
 80078ea:	f1a3 0302 	sub.w	r3, r3, #2
 80078ee:	bfcc      	ite	gt
 80078f0:	2400      	movgt	r4, #0
 80078f2:	2401      	movle	r4, #1
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d863      	bhi.n	80079c0 <_dtoa_r+0x298>
 80078f8:	e8df f003 	tbb	[pc, r3]
 80078fc:	2b375452 	.word	0x2b375452
 8007900:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007904:	441e      	add	r6, r3
 8007906:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800790a:	2b20      	cmp	r3, #32
 800790c:	bfc1      	itttt	gt
 800790e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007912:	409f      	lslgt	r7, r3
 8007914:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007918:	fa24 f303 	lsrgt.w	r3, r4, r3
 800791c:	bfd6      	itet	le
 800791e:	f1c3 0320 	rsble	r3, r3, #32
 8007922:	ea47 0003 	orrgt.w	r0, r7, r3
 8007926:	fa04 f003 	lslle.w	r0, r4, r3
 800792a:	f7f8 fdeb 	bl	8000504 <__aeabi_ui2d>
 800792e:	2201      	movs	r2, #1
 8007930:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007934:	3e01      	subs	r6, #1
 8007936:	9212      	str	r2, [sp, #72]	@ 0x48
 8007938:	e776      	b.n	8007828 <_dtoa_r+0x100>
 800793a:	2301      	movs	r3, #1
 800793c:	e7b7      	b.n	80078ae <_dtoa_r+0x186>
 800793e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007940:	e7b6      	b.n	80078b0 <_dtoa_r+0x188>
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	1bdb      	subs	r3, r3, r7
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	427b      	negs	r3, r7
 800794a:	9308      	str	r3, [sp, #32]
 800794c:	2300      	movs	r3, #0
 800794e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007950:	e7c3      	b.n	80078da <_dtoa_r+0x1b2>
 8007952:	2301      	movs	r3, #1
 8007954:	9309      	str	r3, [sp, #36]	@ 0x24
 8007956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007958:	eb07 0b03 	add.w	fp, r7, r3
 800795c:	f10b 0301 	add.w	r3, fp, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	9303      	str	r3, [sp, #12]
 8007964:	bfb8      	it	lt
 8007966:	2301      	movlt	r3, #1
 8007968:	e006      	b.n	8007978 <_dtoa_r+0x250>
 800796a:	2301      	movs	r3, #1
 800796c:	9309      	str	r3, [sp, #36]	@ 0x24
 800796e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd28      	ble.n	80079c6 <_dtoa_r+0x29e>
 8007974:	469b      	mov	fp, r3
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800797c:	2100      	movs	r1, #0
 800797e:	2204      	movs	r2, #4
 8007980:	f102 0514 	add.w	r5, r2, #20
 8007984:	429d      	cmp	r5, r3
 8007986:	d926      	bls.n	80079d6 <_dtoa_r+0x2ae>
 8007988:	6041      	str	r1, [r0, #4]
 800798a:	4648      	mov	r0, r9
 800798c:	f000 fd9c 	bl	80084c8 <_Balloc>
 8007990:	4682      	mov	sl, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d142      	bne.n	8007a1c <_dtoa_r+0x2f4>
 8007996:	4b1e      	ldr	r3, [pc, #120]	@ (8007a10 <_dtoa_r+0x2e8>)
 8007998:	4602      	mov	r2, r0
 800799a:	f240 11af 	movw	r1, #431	@ 0x1af
 800799e:	e6da      	b.n	8007756 <_dtoa_r+0x2e>
 80079a0:	2300      	movs	r3, #0
 80079a2:	e7e3      	b.n	800796c <_dtoa_r+0x244>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e7d5      	b.n	8007954 <_dtoa_r+0x22c>
 80079a8:	2401      	movs	r4, #1
 80079aa:	2300      	movs	r3, #0
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80079b0:	f04f 3bff 	mov.w	fp, #4294967295
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80079ba:	2312      	movs	r3, #18
 80079bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80079be:	e7db      	b.n	8007978 <_dtoa_r+0x250>
 80079c0:	2301      	movs	r3, #1
 80079c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c4:	e7f4      	b.n	80079b0 <_dtoa_r+0x288>
 80079c6:	f04f 0b01 	mov.w	fp, #1
 80079ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80079ce:	465b      	mov	r3, fp
 80079d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079d4:	e7d0      	b.n	8007978 <_dtoa_r+0x250>
 80079d6:	3101      	adds	r1, #1
 80079d8:	0052      	lsls	r2, r2, #1
 80079da:	e7d1      	b.n	8007980 <_dtoa_r+0x258>
 80079dc:	f3af 8000 	nop.w
 80079e0:	636f4361 	.word	0x636f4361
 80079e4:	3fd287a7 	.word	0x3fd287a7
 80079e8:	8b60c8b3 	.word	0x8b60c8b3
 80079ec:	3fc68a28 	.word	0x3fc68a28
 80079f0:	509f79fb 	.word	0x509f79fb
 80079f4:	3fd34413 	.word	0x3fd34413
 80079f8:	0800ad21 	.word	0x0800ad21
 80079fc:	0800addb 	.word	0x0800addb
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	0800acf9 	.word	0x0800acf9
 8007a08:	3ff80000 	.word	0x3ff80000
 8007a0c:	0800af50 	.word	0x0800af50
 8007a10:	0800ae33 	.word	0x0800ae33
 8007a14:	0800add7 	.word	0x0800add7
 8007a18:	0800acf8 	.word	0x0800acf8
 8007a1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a20:	6018      	str	r0, [r3, #0]
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	2b0e      	cmp	r3, #14
 8007a26:	f200 80a1 	bhi.w	8007b6c <_dtoa_r+0x444>
 8007a2a:	2c00      	cmp	r4, #0
 8007a2c:	f000 809e 	beq.w	8007b6c <_dtoa_r+0x444>
 8007a30:	2f00      	cmp	r7, #0
 8007a32:	dd33      	ble.n	8007a9c <_dtoa_r+0x374>
 8007a34:	4b9c      	ldr	r3, [pc, #624]	@ (8007ca8 <_dtoa_r+0x580>)
 8007a36:	f007 020f 	and.w	r2, r7, #15
 8007a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a3e:	ed93 7b00 	vldr	d7, [r3]
 8007a42:	05f8      	lsls	r0, r7, #23
 8007a44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a4c:	d516      	bpl.n	8007a7c <_dtoa_r+0x354>
 8007a4e:	4b97      	ldr	r3, [pc, #604]	@ (8007cac <_dtoa_r+0x584>)
 8007a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a58:	f7f8 fef8 	bl	800084c <__aeabi_ddiv>
 8007a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a60:	f004 040f 	and.w	r4, r4, #15
 8007a64:	2603      	movs	r6, #3
 8007a66:	4d91      	ldr	r5, [pc, #580]	@ (8007cac <_dtoa_r+0x584>)
 8007a68:	b954      	cbnz	r4, 8007a80 <_dtoa_r+0x358>
 8007a6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a72:	f7f8 feeb 	bl	800084c <__aeabi_ddiv>
 8007a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a7a:	e028      	b.n	8007ace <_dtoa_r+0x3a6>
 8007a7c:	2602      	movs	r6, #2
 8007a7e:	e7f2      	b.n	8007a66 <_dtoa_r+0x33e>
 8007a80:	07e1      	lsls	r1, r4, #31
 8007a82:	d508      	bpl.n	8007a96 <_dtoa_r+0x36e>
 8007a84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a94:	3601      	adds	r6, #1
 8007a96:	1064      	asrs	r4, r4, #1
 8007a98:	3508      	adds	r5, #8
 8007a9a:	e7e5      	b.n	8007a68 <_dtoa_r+0x340>
 8007a9c:	f000 80af 	beq.w	8007bfe <_dtoa_r+0x4d6>
 8007aa0:	427c      	negs	r4, r7
 8007aa2:	4b81      	ldr	r3, [pc, #516]	@ (8007ca8 <_dtoa_r+0x580>)
 8007aa4:	4d81      	ldr	r5, [pc, #516]	@ (8007cac <_dtoa_r+0x584>)
 8007aa6:	f004 020f 	and.w	r2, r4, #15
 8007aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ab6:	f7f8 fd9f 	bl	80005f8 <__aeabi_dmul>
 8007aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007abe:	1124      	asrs	r4, r4, #4
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2602      	movs	r6, #2
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	f040 808f 	bne.w	8007be8 <_dtoa_r+0x4c0>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1d3      	bne.n	8007a76 <_dtoa_r+0x34e>
 8007ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ad0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8094 	beq.w	8007c02 <_dtoa_r+0x4da>
 8007ada:	4b75      	ldr	r3, [pc, #468]	@ (8007cb0 <_dtoa_r+0x588>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 fffb 	bl	8000adc <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f000 808b 	beq.w	8007c02 <_dtoa_r+0x4da>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8087 	beq.w	8007c02 <_dtoa_r+0x4da>
 8007af4:	f1bb 0f00 	cmp.w	fp, #0
 8007af8:	dd34      	ble.n	8007b64 <_dtoa_r+0x43c>
 8007afa:	4620      	mov	r0, r4
 8007afc:	4b6d      	ldr	r3, [pc, #436]	@ (8007cb4 <_dtoa_r+0x58c>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b0e:	3601      	adds	r6, #1
 8007b10:	465c      	mov	r4, fp
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7f8 fd06 	bl	8000524 <__aeabi_i2d>
 8007b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b1c:	f7f8 fd6c 	bl	80005f8 <__aeabi_dmul>
 8007b20:	4b65      	ldr	r3, [pc, #404]	@ (8007cb8 <_dtoa_r+0x590>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	f7f8 fbb2 	bl	800028c <__adddf3>
 8007b28:	4605      	mov	r5, r0
 8007b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d16a      	bne.n	8007c08 <_dtoa_r+0x4e0>
 8007b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b36:	4b61      	ldr	r3, [pc, #388]	@ (8007cbc <_dtoa_r+0x594>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f7f8 fba5 	bl	8000288 <__aeabi_dsub>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b46:	462a      	mov	r2, r5
 8007b48:	4633      	mov	r3, r6
 8007b4a:	f7f8 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8298 	bne.w	8008084 <_dtoa_r+0x95c>
 8007b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b5e:	f7f8 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8007b62:	bb38      	cbnz	r0, 8007bb4 <_dtoa_r+0x48c>
 8007b64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f2c0 8157 	blt.w	8007e22 <_dtoa_r+0x6fa>
 8007b74:	2f0e      	cmp	r7, #14
 8007b76:	f300 8154 	bgt.w	8007e22 <_dtoa_r+0x6fa>
 8007b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007ca8 <_dtoa_r+0x580>)
 8007b7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b80:	ed93 7b00 	vldr	d7, [r3]
 8007b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	ed8d 7b00 	vstr	d7, [sp]
 8007b8c:	f280 80e5 	bge.w	8007d5a <_dtoa_r+0x632>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f300 80e1 	bgt.w	8007d5a <_dtoa_r+0x632>
 8007b98:	d10c      	bne.n	8007bb4 <_dtoa_r+0x48c>
 8007b9a:	4b48      	ldr	r3, [pc, #288]	@ (8007cbc <_dtoa_r+0x594>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	ec51 0b17 	vmov	r0, r1, d7
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007baa:	f7f8 ffab 	bl	8000b04 <__aeabi_dcmpge>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f000 8266 	beq.w	8008080 <_dtoa_r+0x958>
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	4625      	mov	r5, r4
 8007bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bba:	4656      	mov	r6, sl
 8007bbc:	ea6f 0803 	mvn.w	r8, r3
 8007bc0:	2700      	movs	r7, #0
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 fcbf 	bl	8008548 <_Bfree>
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	f000 80bd 	beq.w	8007d4a <_dtoa_r+0x622>
 8007bd0:	b12f      	cbz	r7, 8007bde <_dtoa_r+0x4b6>
 8007bd2:	42af      	cmp	r7, r5
 8007bd4:	d003      	beq.n	8007bde <_dtoa_r+0x4b6>
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4648      	mov	r0, r9
 8007bda:	f000 fcb5 	bl	8008548 <_Bfree>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4648      	mov	r0, r9
 8007be2:	f000 fcb1 	bl	8008548 <_Bfree>
 8007be6:	e0b0      	b.n	8007d4a <_dtoa_r+0x622>
 8007be8:	07e2      	lsls	r2, r4, #31
 8007bea:	d505      	bpl.n	8007bf8 <_dtoa_r+0x4d0>
 8007bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bf0:	f7f8 fd02 	bl	80005f8 <__aeabi_dmul>
 8007bf4:	3601      	adds	r6, #1
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	1064      	asrs	r4, r4, #1
 8007bfa:	3508      	adds	r5, #8
 8007bfc:	e762      	b.n	8007ac4 <_dtoa_r+0x39c>
 8007bfe:	2602      	movs	r6, #2
 8007c00:	e765      	b.n	8007ace <_dtoa_r+0x3a6>
 8007c02:	9c03      	ldr	r4, [sp, #12]
 8007c04:	46b8      	mov	r8, r7
 8007c06:	e784      	b.n	8007b12 <_dtoa_r+0x3ea>
 8007c08:	4b27      	ldr	r3, [pc, #156]	@ (8007ca8 <_dtoa_r+0x580>)
 8007c0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c14:	4454      	add	r4, sl
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d054      	beq.n	8007cc4 <_dtoa_r+0x59c>
 8007c1a:	4929      	ldr	r1, [pc, #164]	@ (8007cc0 <_dtoa_r+0x598>)
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7f8 fe15 	bl	800084c <__aeabi_ddiv>
 8007c22:	4633      	mov	r3, r6
 8007c24:	462a      	mov	r2, r5
 8007c26:	f7f8 fb2f 	bl	8000288 <__aeabi_dsub>
 8007c2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c2e:	4656      	mov	r6, sl
 8007c30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c34:	f7f8 ff90 	bl	8000b58 <__aeabi_d2iz>
 8007c38:	4605      	mov	r5, r0
 8007c3a:	f7f8 fc73 	bl	8000524 <__aeabi_i2d>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c46:	f7f8 fb1f 	bl	8000288 <__aeabi_dsub>
 8007c4a:	3530      	adds	r5, #48	@ 0x30
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c54:	f806 5b01 	strb.w	r5, [r6], #1
 8007c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c5c:	f7f8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d172      	bne.n	8007d4a <_dtoa_r+0x622>
 8007c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c68:	4911      	ldr	r1, [pc, #68]	@ (8007cb0 <_dtoa_r+0x588>)
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f8 fb0c 	bl	8000288 <__aeabi_dsub>
 8007c70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c74:	f7f8 ff32 	bl	8000adc <__aeabi_dcmplt>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f040 80b4 	bne.w	8007de6 <_dtoa_r+0x6be>
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	f43f af70 	beq.w	8007b64 <_dtoa_r+0x43c>
 8007c84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c88:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <_dtoa_r+0x58c>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fcb4 	bl	80005f8 <__aeabi_dmul>
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <_dtoa_r+0x58c>)
 8007c92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c96:	2200      	movs	r2, #0
 8007c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9c:	f7f8 fcac 	bl	80005f8 <__aeabi_dmul>
 8007ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca4:	e7c4      	b.n	8007c30 <_dtoa_r+0x508>
 8007ca6:	bf00      	nop
 8007ca8:	0800af50 	.word	0x0800af50
 8007cac:	0800af28 	.word	0x0800af28
 8007cb0:	3ff00000 	.word	0x3ff00000
 8007cb4:	40240000 	.word	0x40240000
 8007cb8:	401c0000 	.word	0x401c0000
 8007cbc:	40140000 	.word	0x40140000
 8007cc0:	3fe00000 	.word	0x3fe00000
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007cd2:	4656      	mov	r6, sl
 8007cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd8:	f7f8 ff3e 	bl	8000b58 <__aeabi_d2iz>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	f7f8 fc21 	bl	8000524 <__aeabi_i2d>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cea:	f7f8 facd 	bl	8000288 <__aeabi_dsub>
 8007cee:	3530      	adds	r5, #48	@ 0x30
 8007cf0:	f806 5b01 	strb.w	r5, [r6], #1
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	d124      	bne.n	8007d4e <_dtoa_r+0x626>
 8007d04:	4baf      	ldr	r3, [pc, #700]	@ (8007fc4 <_dtoa_r+0x89c>)
 8007d06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d0a:	f7f8 fabf 	bl	800028c <__adddf3>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d16:	f7f8 feff 	bl	8000b18 <__aeabi_dcmpgt>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d163      	bne.n	8007de6 <_dtoa_r+0x6be>
 8007d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d22:	49a8      	ldr	r1, [pc, #672]	@ (8007fc4 <_dtoa_r+0x89c>)
 8007d24:	2000      	movs	r0, #0
 8007d26:	f7f8 faaf 	bl	8000288 <__aeabi_dsub>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d32:	f7f8 fed3 	bl	8000adc <__aeabi_dcmplt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f43f af14 	beq.w	8007b64 <_dtoa_r+0x43c>
 8007d3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d3e:	1e73      	subs	r3, r6, #1
 8007d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d46:	2b30      	cmp	r3, #48	@ 0x30
 8007d48:	d0f8      	beq.n	8007d3c <_dtoa_r+0x614>
 8007d4a:	4647      	mov	r7, r8
 8007d4c:	e03b      	b.n	8007dc6 <_dtoa_r+0x69e>
 8007d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8007fc8 <_dtoa_r+0x8a0>)
 8007d50:	f7f8 fc52 	bl	80005f8 <__aeabi_dmul>
 8007d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d58:	e7bc      	b.n	8007cd4 <_dtoa_r+0x5ac>
 8007d5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d5e:	4656      	mov	r6, sl
 8007d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fd70 	bl	800084c <__aeabi_ddiv>
 8007d6c:	f7f8 fef4 	bl	8000b58 <__aeabi_d2iz>
 8007d70:	4680      	mov	r8, r0
 8007d72:	f7f8 fbd7 	bl	8000524 <__aeabi_i2d>
 8007d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7a:	f7f8 fc3d 	bl	80005f8 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4620      	mov	r0, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d8a:	f7f8 fa7d 	bl	8000288 <__aeabi_dsub>
 8007d8e:	f806 4b01 	strb.w	r4, [r6], #1
 8007d92:	9d03      	ldr	r5, [sp, #12]
 8007d94:	eba6 040a 	sub.w	r4, r6, sl
 8007d98:	42a5      	cmp	r5, r4
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	d133      	bne.n	8007e08 <_dtoa_r+0x6e0>
 8007da0:	f7f8 fa74 	bl	800028c <__adddf3>
 8007da4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	f7f8 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 8007db0:	b9c0      	cbnz	r0, 8007de4 <_dtoa_r+0x6bc>
 8007db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbe:	b110      	cbz	r0, 8007dc6 <_dtoa_r+0x69e>
 8007dc0:	f018 0f01 	tst.w	r8, #1
 8007dc4:	d10e      	bne.n	8007de4 <_dtoa_r+0x6bc>
 8007dc6:	9902      	ldr	r1, [sp, #8]
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f000 fbbd 	bl	8008548 <_Bfree>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	7033      	strb	r3, [r6, #0]
 8007dd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dd4:	3701      	adds	r7, #1
 8007dd6:	601f      	str	r7, [r3, #0]
 8007dd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 824b 	beq.w	8008276 <_dtoa_r+0xb4e>
 8007de0:	601e      	str	r6, [r3, #0]
 8007de2:	e248      	b.n	8008276 <_dtoa_r+0xb4e>
 8007de4:	46b8      	mov	r8, r7
 8007de6:	4633      	mov	r3, r6
 8007de8:	461e      	mov	r6, r3
 8007dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dee:	2a39      	cmp	r2, #57	@ 0x39
 8007df0:	d106      	bne.n	8007e00 <_dtoa_r+0x6d8>
 8007df2:	459a      	cmp	sl, r3
 8007df4:	d1f8      	bne.n	8007de8 <_dtoa_r+0x6c0>
 8007df6:	2230      	movs	r2, #48	@ 0x30
 8007df8:	f108 0801 	add.w	r8, r8, #1
 8007dfc:	f88a 2000 	strb.w	r2, [sl]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	3201      	adds	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e7a0      	b.n	8007d4a <_dtoa_r+0x622>
 8007e08:	4b6f      	ldr	r3, [pc, #444]	@ (8007fc8 <_dtoa_r+0x8a0>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f7f8 fbf4 	bl	80005f8 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	f7f8 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d09f      	beq.n	8007d60 <_dtoa_r+0x638>
 8007e20:	e7d1      	b.n	8007dc6 <_dtoa_r+0x69e>
 8007e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f000 80ea 	beq.w	8007ffe <_dtoa_r+0x8d6>
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	f300 80cd 	bgt.w	8007fcc <_dtoa_r+0x8a4>
 8007e32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	f000 80c1 	beq.w	8007fbc <_dtoa_r+0x894>
 8007e3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e3e:	9c08      	ldr	r4, [sp, #32]
 8007e40:	9e00      	ldr	r6, [sp, #0]
 8007e42:	9a00      	ldr	r2, [sp, #0]
 8007e44:	441a      	add	r2, r3
 8007e46:	9200      	str	r2, [sp, #0]
 8007e48:	9a06      	ldr	r2, [sp, #24]
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	441a      	add	r2, r3
 8007e4e:	4648      	mov	r0, r9
 8007e50:	9206      	str	r2, [sp, #24]
 8007e52:	f000 fc77 	bl	8008744 <__i2b>
 8007e56:	4605      	mov	r5, r0
 8007e58:	b166      	cbz	r6, 8007e74 <_dtoa_r+0x74c>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd09      	ble.n	8007e74 <_dtoa_r+0x74c>
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	bfa8      	it	ge
 8007e66:	4633      	movge	r3, r6
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	9200      	str	r2, [sp, #0]
 8007e6c:	9a06      	ldr	r2, [sp, #24]
 8007e6e:	1af6      	subs	r6, r6, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	b30b      	cbz	r3, 8007ebc <_dtoa_r+0x794>
 8007e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80c6 	beq.w	800800c <_dtoa_r+0x8e4>
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	f000 80c0 	beq.w	8008006 <_dtoa_r+0x8de>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4648      	mov	r0, r9
 8007e8c:	f000 fd12 	bl	80088b4 <__pow5mult>
 8007e90:	9a02      	ldr	r2, [sp, #8]
 8007e92:	4601      	mov	r1, r0
 8007e94:	4605      	mov	r5, r0
 8007e96:	4648      	mov	r0, r9
 8007e98:	f000 fc6a 	bl	8008770 <__multiply>
 8007e9c:	9902      	ldr	r1, [sp, #8]
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4648      	mov	r0, r9
 8007ea2:	f000 fb51 	bl	8008548 <_Bfree>
 8007ea6:	9b08      	ldr	r3, [sp, #32]
 8007ea8:	1b1b      	subs	r3, r3, r4
 8007eaa:	9308      	str	r3, [sp, #32]
 8007eac:	f000 80b1 	beq.w	8008012 <_dtoa_r+0x8ea>
 8007eb0:	9a08      	ldr	r2, [sp, #32]
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	f000 fcfd 	bl	80088b4 <__pow5mult>
 8007eba:	9002      	str	r0, [sp, #8]
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	4648      	mov	r0, r9
 8007ec0:	f000 fc40 	bl	8008744 <__i2b>
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 81d8 	beq.w	800827e <_dtoa_r+0xb56>
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f000 fcee 	bl	80088b4 <__pow5mult>
 8007ed8:	9b07      	ldr	r3, [sp, #28]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	4604      	mov	r4, r0
 8007ede:	f300 809f 	bgt.w	8008020 <_dtoa_r+0x8f8>
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f040 8097 	bne.w	8008018 <_dtoa_r+0x8f0>
 8007eea:	9b05      	ldr	r3, [sp, #20]
 8007eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 8093 	bne.w	800801c <_dtoa_r+0x8f4>
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	0d1b      	lsrs	r3, r3, #20
 8007efe:	051b      	lsls	r3, r3, #20
 8007f00:	b133      	cbz	r3, 8007f10 <_dtoa_r+0x7e8>
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9306      	str	r3, [sp, #24]
 8007f0e:	2301      	movs	r3, #1
 8007f10:	9308      	str	r3, [sp, #32]
 8007f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 81b8 	beq.w	800828a <_dtoa_r+0xb62>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	f000 fbc3 	bl	80086ac <__hi0bits>
 8007f26:	f1c0 0020 	rsb	r0, r0, #32
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	4418      	add	r0, r3
 8007f2e:	f010 001f 	ands.w	r0, r0, #31
 8007f32:	f000 8082 	beq.w	800803a <_dtoa_r+0x912>
 8007f36:	f1c0 0320 	rsb	r3, r0, #32
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	dd73      	ble.n	8008026 <_dtoa_r+0x8fe>
 8007f3e:	9b00      	ldr	r3, [sp, #0]
 8007f40:	f1c0 001c 	rsb	r0, r0, #28
 8007f44:	4403      	add	r3, r0
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	9b06      	ldr	r3, [sp, #24]
 8007f4a:	4403      	add	r3, r0
 8007f4c:	4406      	add	r6, r0
 8007f4e:	9306      	str	r3, [sp, #24]
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dd05      	ble.n	8007f62 <_dtoa_r+0x83a>
 8007f56:	9902      	ldr	r1, [sp, #8]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4648      	mov	r0, r9
 8007f5c:	f000 fd04 	bl	8008968 <__lshift>
 8007f60:	9002      	str	r0, [sp, #8]
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dd05      	ble.n	8007f74 <_dtoa_r+0x84c>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4648      	mov	r0, r9
 8007f6e:	f000 fcfb 	bl	8008968 <__lshift>
 8007f72:	4604      	mov	r4, r0
 8007f74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d061      	beq.n	800803e <_dtoa_r+0x916>
 8007f7a:	9802      	ldr	r0, [sp, #8]
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	f000 fd5f 	bl	8008a40 <__mcmp>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	da5b      	bge.n	800803e <_dtoa_r+0x916>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9902      	ldr	r1, [sp, #8]
 8007f8a:	220a      	movs	r2, #10
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fafd 	bl	800858c <__multadd>
 8007f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f94:	9002      	str	r0, [sp, #8]
 8007f96:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8177 	beq.w	800828e <_dtoa_r+0xb66>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	4648      	mov	r0, r9
 8007fa8:	f000 faf0 	bl	800858c <__multadd>
 8007fac:	f1bb 0f00 	cmp.w	fp, #0
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	dc6f      	bgt.n	8008094 <_dtoa_r+0x96c>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dc49      	bgt.n	800804e <_dtoa_r+0x926>
 8007fba:	e06b      	b.n	8008094 <_dtoa_r+0x96c>
 8007fbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fc2:	e73c      	b.n	8007e3e <_dtoa_r+0x716>
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	40240000 	.word	0x40240000
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	1e5c      	subs	r4, r3, #1
 8007fd0:	9b08      	ldr	r3, [sp, #32]
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	db09      	blt.n	8007fea <_dtoa_r+0x8c2>
 8007fd6:	1b1c      	subs	r4, r3, r4
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f6bf af30 	bge.w	8007e40 <_dtoa_r+0x718>
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	9a03      	ldr	r2, [sp, #12]
 8007fe4:	1a9e      	subs	r6, r3, r2
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e72b      	b.n	8007e42 <_dtoa_r+0x71a>
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fee:	9408      	str	r4, [sp, #32]
 8007ff0:	1ae3      	subs	r3, r4, r3
 8007ff2:	441a      	add	r2, r3
 8007ff4:	9e00      	ldr	r6, [sp, #0]
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	e721      	b.n	8007e42 <_dtoa_r+0x71a>
 8007ffe:	9c08      	ldr	r4, [sp, #32]
 8008000:	9e00      	ldr	r6, [sp, #0]
 8008002:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008004:	e728      	b.n	8007e58 <_dtoa_r+0x730>
 8008006:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800800a:	e751      	b.n	8007eb0 <_dtoa_r+0x788>
 800800c:	9a08      	ldr	r2, [sp, #32]
 800800e:	9902      	ldr	r1, [sp, #8]
 8008010:	e750      	b.n	8007eb4 <_dtoa_r+0x78c>
 8008012:	f8cd 8008 	str.w	r8, [sp, #8]
 8008016:	e751      	b.n	8007ebc <_dtoa_r+0x794>
 8008018:	2300      	movs	r3, #0
 800801a:	e779      	b.n	8007f10 <_dtoa_r+0x7e8>
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	e777      	b.n	8007f10 <_dtoa_r+0x7e8>
 8008020:	2300      	movs	r3, #0
 8008022:	9308      	str	r3, [sp, #32]
 8008024:	e779      	b.n	8007f1a <_dtoa_r+0x7f2>
 8008026:	d093      	beq.n	8007f50 <_dtoa_r+0x828>
 8008028:	9a00      	ldr	r2, [sp, #0]
 800802a:	331c      	adds	r3, #28
 800802c:	441a      	add	r2, r3
 800802e:	9200      	str	r2, [sp, #0]
 8008030:	9a06      	ldr	r2, [sp, #24]
 8008032:	441a      	add	r2, r3
 8008034:	441e      	add	r6, r3
 8008036:	9206      	str	r2, [sp, #24]
 8008038:	e78a      	b.n	8007f50 <_dtoa_r+0x828>
 800803a:	4603      	mov	r3, r0
 800803c:	e7f4      	b.n	8008028 <_dtoa_r+0x900>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	46b8      	mov	r8, r7
 8008044:	dc20      	bgt.n	8008088 <_dtoa_r+0x960>
 8008046:	469b      	mov	fp, r3
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	2b02      	cmp	r3, #2
 800804c:	dd1e      	ble.n	800808c <_dtoa_r+0x964>
 800804e:	f1bb 0f00 	cmp.w	fp, #0
 8008052:	f47f adb1 	bne.w	8007bb8 <_dtoa_r+0x490>
 8008056:	4621      	mov	r1, r4
 8008058:	465b      	mov	r3, fp
 800805a:	2205      	movs	r2, #5
 800805c:	4648      	mov	r0, r9
 800805e:	f000 fa95 	bl	800858c <__multadd>
 8008062:	4601      	mov	r1, r0
 8008064:	4604      	mov	r4, r0
 8008066:	9802      	ldr	r0, [sp, #8]
 8008068:	f000 fcea 	bl	8008a40 <__mcmp>
 800806c:	2800      	cmp	r0, #0
 800806e:	f77f ada3 	ble.w	8007bb8 <_dtoa_r+0x490>
 8008072:	4656      	mov	r6, sl
 8008074:	2331      	movs	r3, #49	@ 0x31
 8008076:	f806 3b01 	strb.w	r3, [r6], #1
 800807a:	f108 0801 	add.w	r8, r8, #1
 800807e:	e59f      	b.n	8007bc0 <_dtoa_r+0x498>
 8008080:	9c03      	ldr	r4, [sp, #12]
 8008082:	46b8      	mov	r8, r7
 8008084:	4625      	mov	r5, r4
 8008086:	e7f4      	b.n	8008072 <_dtoa_r+0x94a>
 8008088:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8101 	beq.w	8008296 <_dtoa_r+0xb6e>
 8008094:	2e00      	cmp	r6, #0
 8008096:	dd05      	ble.n	80080a4 <_dtoa_r+0x97c>
 8008098:	4629      	mov	r1, r5
 800809a:	4632      	mov	r2, r6
 800809c:	4648      	mov	r0, r9
 800809e:	f000 fc63 	bl	8008968 <__lshift>
 80080a2:	4605      	mov	r5, r0
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d05c      	beq.n	8008164 <_dtoa_r+0xa3c>
 80080aa:	6869      	ldr	r1, [r5, #4]
 80080ac:	4648      	mov	r0, r9
 80080ae:	f000 fa0b 	bl	80084c8 <_Balloc>
 80080b2:	4606      	mov	r6, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <_dtoa_r+0x99a>
 80080b6:	4b82      	ldr	r3, [pc, #520]	@ (80082c0 <_dtoa_r+0xb98>)
 80080b8:	4602      	mov	r2, r0
 80080ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080be:	f7ff bb4a 	b.w	8007756 <_dtoa_r+0x2e>
 80080c2:	692a      	ldr	r2, [r5, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	f105 010c 	add.w	r1, r5, #12
 80080cc:	300c      	adds	r0, #12
 80080ce:	f001 ff7b 	bl	8009fc8 <memcpy>
 80080d2:	2201      	movs	r2, #1
 80080d4:	4631      	mov	r1, r6
 80080d6:	4648      	mov	r0, r9
 80080d8:	f000 fc46 	bl	8008968 <__lshift>
 80080dc:	f10a 0301 	add.w	r3, sl, #1
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	eb0a 030b 	add.w	r3, sl, fp
 80080e6:	9308      	str	r3, [sp, #32]
 80080e8:	9b04      	ldr	r3, [sp, #16]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	462f      	mov	r7, r5
 80080f0:	9306      	str	r3, [sp, #24]
 80080f2:	4605      	mov	r5, r0
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	9802      	ldr	r0, [sp, #8]
 80080f8:	4621      	mov	r1, r4
 80080fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80080fe:	f7ff fa8b 	bl	8007618 <quorem>
 8008102:	4603      	mov	r3, r0
 8008104:	3330      	adds	r3, #48	@ 0x30
 8008106:	9003      	str	r0, [sp, #12]
 8008108:	4639      	mov	r1, r7
 800810a:	9802      	ldr	r0, [sp, #8]
 800810c:	9309      	str	r3, [sp, #36]	@ 0x24
 800810e:	f000 fc97 	bl	8008a40 <__mcmp>
 8008112:	462a      	mov	r2, r5
 8008114:	9004      	str	r0, [sp, #16]
 8008116:	4621      	mov	r1, r4
 8008118:	4648      	mov	r0, r9
 800811a:	f000 fcad 	bl	8008a78 <__mdiff>
 800811e:	68c2      	ldr	r2, [r0, #12]
 8008120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008122:	4606      	mov	r6, r0
 8008124:	bb02      	cbnz	r2, 8008168 <_dtoa_r+0xa40>
 8008126:	4601      	mov	r1, r0
 8008128:	9802      	ldr	r0, [sp, #8]
 800812a:	f000 fc89 	bl	8008a40 <__mcmp>
 800812e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008130:	4602      	mov	r2, r0
 8008132:	4631      	mov	r1, r6
 8008134:	4648      	mov	r0, r9
 8008136:	920c      	str	r2, [sp, #48]	@ 0x30
 8008138:	9309      	str	r3, [sp, #36]	@ 0x24
 800813a:	f000 fa05 	bl	8008548 <_Bfree>
 800813e:	9b07      	ldr	r3, [sp, #28]
 8008140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008142:	9e00      	ldr	r6, [sp, #0]
 8008144:	ea42 0103 	orr.w	r1, r2, r3
 8008148:	9b06      	ldr	r3, [sp, #24]
 800814a:	4319      	orrs	r1, r3
 800814c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814e:	d10d      	bne.n	800816c <_dtoa_r+0xa44>
 8008150:	2b39      	cmp	r3, #57	@ 0x39
 8008152:	d027      	beq.n	80081a4 <_dtoa_r+0xa7c>
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	2a00      	cmp	r2, #0
 8008158:	dd01      	ble.n	800815e <_dtoa_r+0xa36>
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	3331      	adds	r3, #49	@ 0x31
 800815e:	f88b 3000 	strb.w	r3, [fp]
 8008162:	e52e      	b.n	8007bc2 <_dtoa_r+0x49a>
 8008164:	4628      	mov	r0, r5
 8008166:	e7b9      	b.n	80080dc <_dtoa_r+0x9b4>
 8008168:	2201      	movs	r2, #1
 800816a:	e7e2      	b.n	8008132 <_dtoa_r+0xa0a>
 800816c:	9904      	ldr	r1, [sp, #16]
 800816e:	2900      	cmp	r1, #0
 8008170:	db04      	blt.n	800817c <_dtoa_r+0xa54>
 8008172:	9807      	ldr	r0, [sp, #28]
 8008174:	4301      	orrs	r1, r0
 8008176:	9806      	ldr	r0, [sp, #24]
 8008178:	4301      	orrs	r1, r0
 800817a:	d120      	bne.n	80081be <_dtoa_r+0xa96>
 800817c:	2a00      	cmp	r2, #0
 800817e:	ddee      	ble.n	800815e <_dtoa_r+0xa36>
 8008180:	9902      	ldr	r1, [sp, #8]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2201      	movs	r2, #1
 8008186:	4648      	mov	r0, r9
 8008188:	f000 fbee 	bl	8008968 <__lshift>
 800818c:	4621      	mov	r1, r4
 800818e:	9002      	str	r0, [sp, #8]
 8008190:	f000 fc56 	bl	8008a40 <__mcmp>
 8008194:	2800      	cmp	r0, #0
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	dc02      	bgt.n	80081a0 <_dtoa_r+0xa78>
 800819a:	d1e0      	bne.n	800815e <_dtoa_r+0xa36>
 800819c:	07da      	lsls	r2, r3, #31
 800819e:	d5de      	bpl.n	800815e <_dtoa_r+0xa36>
 80081a0:	2b39      	cmp	r3, #57	@ 0x39
 80081a2:	d1da      	bne.n	800815a <_dtoa_r+0xa32>
 80081a4:	2339      	movs	r3, #57	@ 0x39
 80081a6:	f88b 3000 	strb.w	r3, [fp]
 80081aa:	4633      	mov	r3, r6
 80081ac:	461e      	mov	r6, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081b4:	2a39      	cmp	r2, #57	@ 0x39
 80081b6:	d04e      	beq.n	8008256 <_dtoa_r+0xb2e>
 80081b8:	3201      	adds	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e501      	b.n	8007bc2 <_dtoa_r+0x49a>
 80081be:	2a00      	cmp	r2, #0
 80081c0:	dd03      	ble.n	80081ca <_dtoa_r+0xaa2>
 80081c2:	2b39      	cmp	r3, #57	@ 0x39
 80081c4:	d0ee      	beq.n	80081a4 <_dtoa_r+0xa7c>
 80081c6:	3301      	adds	r3, #1
 80081c8:	e7c9      	b.n	800815e <_dtoa_r+0xa36>
 80081ca:	9a00      	ldr	r2, [sp, #0]
 80081cc:	9908      	ldr	r1, [sp, #32]
 80081ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081d2:	428a      	cmp	r2, r1
 80081d4:	d028      	beq.n	8008228 <_dtoa_r+0xb00>
 80081d6:	9902      	ldr	r1, [sp, #8]
 80081d8:	2300      	movs	r3, #0
 80081da:	220a      	movs	r2, #10
 80081dc:	4648      	mov	r0, r9
 80081de:	f000 f9d5 	bl	800858c <__multadd>
 80081e2:	42af      	cmp	r7, r5
 80081e4:	9002      	str	r0, [sp, #8]
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	f04f 020a 	mov.w	r2, #10
 80081ee:	4639      	mov	r1, r7
 80081f0:	4648      	mov	r0, r9
 80081f2:	d107      	bne.n	8008204 <_dtoa_r+0xadc>
 80081f4:	f000 f9ca 	bl	800858c <__multadd>
 80081f8:	4607      	mov	r7, r0
 80081fa:	4605      	mov	r5, r0
 80081fc:	9b00      	ldr	r3, [sp, #0]
 80081fe:	3301      	adds	r3, #1
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	e777      	b.n	80080f4 <_dtoa_r+0x9cc>
 8008204:	f000 f9c2 	bl	800858c <__multadd>
 8008208:	4629      	mov	r1, r5
 800820a:	4607      	mov	r7, r0
 800820c:	2300      	movs	r3, #0
 800820e:	220a      	movs	r2, #10
 8008210:	4648      	mov	r0, r9
 8008212:	f000 f9bb 	bl	800858c <__multadd>
 8008216:	4605      	mov	r5, r0
 8008218:	e7f0      	b.n	80081fc <_dtoa_r+0xad4>
 800821a:	f1bb 0f00 	cmp.w	fp, #0
 800821e:	bfcc      	ite	gt
 8008220:	465e      	movgt	r6, fp
 8008222:	2601      	movle	r6, #1
 8008224:	4456      	add	r6, sl
 8008226:	2700      	movs	r7, #0
 8008228:	9902      	ldr	r1, [sp, #8]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2201      	movs	r2, #1
 800822e:	4648      	mov	r0, r9
 8008230:	f000 fb9a 	bl	8008968 <__lshift>
 8008234:	4621      	mov	r1, r4
 8008236:	9002      	str	r0, [sp, #8]
 8008238:	f000 fc02 	bl	8008a40 <__mcmp>
 800823c:	2800      	cmp	r0, #0
 800823e:	dcb4      	bgt.n	80081aa <_dtoa_r+0xa82>
 8008240:	d102      	bne.n	8008248 <_dtoa_r+0xb20>
 8008242:	9b00      	ldr	r3, [sp, #0]
 8008244:	07db      	lsls	r3, r3, #31
 8008246:	d4b0      	bmi.n	80081aa <_dtoa_r+0xa82>
 8008248:	4633      	mov	r3, r6
 800824a:	461e      	mov	r6, r3
 800824c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008250:	2a30      	cmp	r2, #48	@ 0x30
 8008252:	d0fa      	beq.n	800824a <_dtoa_r+0xb22>
 8008254:	e4b5      	b.n	8007bc2 <_dtoa_r+0x49a>
 8008256:	459a      	cmp	sl, r3
 8008258:	d1a8      	bne.n	80081ac <_dtoa_r+0xa84>
 800825a:	2331      	movs	r3, #49	@ 0x31
 800825c:	f108 0801 	add.w	r8, r8, #1
 8008260:	f88a 3000 	strb.w	r3, [sl]
 8008264:	e4ad      	b.n	8007bc2 <_dtoa_r+0x49a>
 8008266:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008268:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80082c4 <_dtoa_r+0xb9c>
 800826c:	b11b      	cbz	r3, 8008276 <_dtoa_r+0xb4e>
 800826e:	f10a 0308 	add.w	r3, sl, #8
 8008272:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	4650      	mov	r0, sl
 8008278:	b017      	add	sp, #92	@ 0x5c
 800827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	9b07      	ldr	r3, [sp, #28]
 8008280:	2b01      	cmp	r3, #1
 8008282:	f77f ae2e 	ble.w	8007ee2 <_dtoa_r+0x7ba>
 8008286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008288:	9308      	str	r3, [sp, #32]
 800828a:	2001      	movs	r0, #1
 800828c:	e64d      	b.n	8007f2a <_dtoa_r+0x802>
 800828e:	f1bb 0f00 	cmp.w	fp, #0
 8008292:	f77f aed9 	ble.w	8008048 <_dtoa_r+0x920>
 8008296:	4656      	mov	r6, sl
 8008298:	9802      	ldr	r0, [sp, #8]
 800829a:	4621      	mov	r1, r4
 800829c:	f7ff f9bc 	bl	8007618 <quorem>
 80082a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80082a4:	f806 3b01 	strb.w	r3, [r6], #1
 80082a8:	eba6 020a 	sub.w	r2, r6, sl
 80082ac:	4593      	cmp	fp, r2
 80082ae:	ddb4      	ble.n	800821a <_dtoa_r+0xaf2>
 80082b0:	9902      	ldr	r1, [sp, #8]
 80082b2:	2300      	movs	r3, #0
 80082b4:	220a      	movs	r2, #10
 80082b6:	4648      	mov	r0, r9
 80082b8:	f000 f968 	bl	800858c <__multadd>
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	e7eb      	b.n	8008298 <_dtoa_r+0xb70>
 80082c0:	0800ae33 	.word	0x0800ae33
 80082c4:	0800adce 	.word	0x0800adce

080082c8 <_free_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4605      	mov	r5, r0
 80082cc:	2900      	cmp	r1, #0
 80082ce:	d041      	beq.n	8008354 <_free_r+0x8c>
 80082d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d4:	1f0c      	subs	r4, r1, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfb8      	it	lt
 80082da:	18e4      	addlt	r4, r4, r3
 80082dc:	f000 f8e8 	bl	80084b0 <__malloc_lock>
 80082e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008358 <_free_r+0x90>)
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	b933      	cbnz	r3, 80082f4 <_free_r+0x2c>
 80082e6:	6063      	str	r3, [r4, #4]
 80082e8:	6014      	str	r4, [r2, #0]
 80082ea:	4628      	mov	r0, r5
 80082ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f0:	f000 b8e4 	b.w	80084bc <__malloc_unlock>
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	d908      	bls.n	800830a <_free_r+0x42>
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	1821      	adds	r1, r4, r0
 80082fc:	428b      	cmp	r3, r1
 80082fe:	bf01      	itttt	eq
 8008300:	6819      	ldreq	r1, [r3, #0]
 8008302:	685b      	ldreq	r3, [r3, #4]
 8008304:	1809      	addeq	r1, r1, r0
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	e7ed      	b.n	80082e6 <_free_r+0x1e>
 800830a:	461a      	mov	r2, r3
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	b10b      	cbz	r3, 8008314 <_free_r+0x4c>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d9fa      	bls.n	800830a <_free_r+0x42>
 8008314:	6811      	ldr	r1, [r2, #0]
 8008316:	1850      	adds	r0, r2, r1
 8008318:	42a0      	cmp	r0, r4
 800831a:	d10b      	bne.n	8008334 <_free_r+0x6c>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	4401      	add	r1, r0
 8008320:	1850      	adds	r0, r2, r1
 8008322:	4283      	cmp	r3, r0
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	d1e0      	bne.n	80082ea <_free_r+0x22>
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	6053      	str	r3, [r2, #4]
 800832e:	4408      	add	r0, r1
 8008330:	6010      	str	r0, [r2, #0]
 8008332:	e7da      	b.n	80082ea <_free_r+0x22>
 8008334:	d902      	bls.n	800833c <_free_r+0x74>
 8008336:	230c      	movs	r3, #12
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	e7d6      	b.n	80082ea <_free_r+0x22>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	1821      	adds	r1, r4, r0
 8008340:	428b      	cmp	r3, r1
 8008342:	bf04      	itt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	bf04      	itt	eq
 800834c:	1809      	addeq	r1, r1, r0
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	6054      	str	r4, [r2, #4]
 8008352:	e7ca      	b.n	80082ea <_free_r+0x22>
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	20000444 	.word	0x20000444

0800835c <malloc>:
 800835c:	4b02      	ldr	r3, [pc, #8]	@ (8008368 <malloc+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f000 b825 	b.w	80083b0 <_malloc_r>
 8008366:	bf00      	nop
 8008368:	20000018 	.word	0x20000018

0800836c <sbrk_aligned>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0f      	ldr	r6, [pc, #60]	@ (80083ac <sbrk_aligned+0x40>)
 8008370:	460c      	mov	r4, r1
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	4605      	mov	r5, r0
 8008376:	b911      	cbnz	r1, 800837e <sbrk_aligned+0x12>
 8008378:	f001 fe16 	bl	8009fa8 <_sbrk_r>
 800837c:	6030      	str	r0, [r6, #0]
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f001 fe11 	bl	8009fa8 <_sbrk_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d103      	bne.n	8008392 <sbrk_aligned+0x26>
 800838a:	f04f 34ff 	mov.w	r4, #4294967295
 800838e:	4620      	mov	r0, r4
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d0f8      	beq.n	800838e <sbrk_aligned+0x22>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4628      	mov	r0, r5
 80083a0:	f001 fe02 	bl	8009fa8 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1f2      	bne.n	800838e <sbrk_aligned+0x22>
 80083a8:	e7ef      	b.n	800838a <sbrk_aligned+0x1e>
 80083aa:	bf00      	nop
 80083ac:	20000440 	.word	0x20000440

080083b0 <_malloc_r>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	1ccd      	adds	r5, r1, #3
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	db01      	blt.n	80083cc <_malloc_r+0x1c>
 80083c8:	42a9      	cmp	r1, r5
 80083ca:	d904      	bls.n	80083d6 <_malloc_r+0x26>
 80083cc:	230c      	movs	r3, #12
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084ac <_malloc_r+0xfc>
 80083da:	f000 f869 	bl	80084b0 <__malloc_lock>
 80083de:	f8d8 3000 	ldr.w	r3, [r8]
 80083e2:	461c      	mov	r4, r3
 80083e4:	bb44      	cbnz	r4, 8008438 <_malloc_r+0x88>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbf 	bl	800836c <sbrk_aligned>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	4604      	mov	r4, r0
 80083f2:	d158      	bne.n	80084a6 <_malloc_r+0xf6>
 80083f4:	f8d8 4000 	ldr.w	r4, [r8]
 80083f8:	4627      	mov	r7, r4
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d143      	bne.n	8008486 <_malloc_r+0xd6>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d04b      	beq.n	800849a <_malloc_r+0xea>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4639      	mov	r1, r7
 8008406:	4630      	mov	r0, r6
 8008408:	eb04 0903 	add.w	r9, r4, r3
 800840c:	f001 fdcc 	bl	8009fa8 <_sbrk_r>
 8008410:	4581      	cmp	r9, r0
 8008412:	d142      	bne.n	800849a <_malloc_r+0xea>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	1a6d      	subs	r5, r5, r1
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffa6 	bl	800836c <sbrk_aligned>
 8008420:	3001      	adds	r0, #1
 8008422:	d03a      	beq.n	800849a <_malloc_r+0xea>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	442b      	add	r3, r5
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	f8d8 3000 	ldr.w	r3, [r8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	bb62      	cbnz	r2, 800848c <_malloc_r+0xdc>
 8008432:	f8c8 7000 	str.w	r7, [r8]
 8008436:	e00f      	b.n	8008458 <_malloc_r+0xa8>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	1b52      	subs	r2, r2, r5
 800843c:	d420      	bmi.n	8008480 <_malloc_r+0xd0>
 800843e:	2a0b      	cmp	r2, #11
 8008440:	d917      	bls.n	8008472 <_malloc_r+0xc2>
 8008442:	1961      	adds	r1, r4, r5
 8008444:	42a3      	cmp	r3, r4
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	6059      	strne	r1, [r3, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	bf08      	it	eq
 8008450:	f8c8 1000 	streq.w	r1, [r8]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f82f 	bl	80084bc <__malloc_unlock>
 800845e:	f104 000b 	add.w	r0, r4, #11
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	f020 0007 	bic.w	r0, r0, #7
 8008468:	1ac2      	subs	r2, r0, r3
 800846a:	bf1c      	itt	ne
 800846c:	1a1b      	subne	r3, r3, r0
 800846e:	50a3      	strne	r3, [r4, r2]
 8008470:	e7af      	b.n	80083d2 <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	f8c8 2000 	streq.w	r2, [r8]
 800847c:	605a      	strne	r2, [r3, #4]
 800847e:	e7eb      	b.n	8008458 <_malloc_r+0xa8>
 8008480:	4623      	mov	r3, r4
 8008482:	6864      	ldr	r4, [r4, #4]
 8008484:	e7ae      	b.n	80083e4 <_malloc_r+0x34>
 8008486:	463c      	mov	r4, r7
 8008488:	687f      	ldr	r7, [r7, #4]
 800848a:	e7b6      	b.n	80083fa <_malloc_r+0x4a>
 800848c:	461a      	mov	r2, r3
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	d1fb      	bne.n	800848c <_malloc_r+0xdc>
 8008494:	2300      	movs	r3, #0
 8008496:	6053      	str	r3, [r2, #4]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa8>
 800849a:	230c      	movs	r3, #12
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f80c 	bl	80084bc <__malloc_unlock>
 80084a4:	e794      	b.n	80083d0 <_malloc_r+0x20>
 80084a6:	6005      	str	r5, [r0, #0]
 80084a8:	e7d6      	b.n	8008458 <_malloc_r+0xa8>
 80084aa:	bf00      	nop
 80084ac:	20000444 	.word	0x20000444

080084b0 <__malloc_lock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__malloc_lock+0x8>)
 80084b2:	f7ff b88a 	b.w	80075ca <__retarget_lock_acquire_recursive>
 80084b6:	bf00      	nop
 80084b8:	2000043c 	.word	0x2000043c

080084bc <__malloc_unlock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_unlock+0x8>)
 80084be:	f7ff b885 	b.w	80075cc <__retarget_lock_release_recursive>
 80084c2:	bf00      	nop
 80084c4:	2000043c 	.word	0x2000043c

080084c8 <_Balloc>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	69c6      	ldr	r6, [r0, #28]
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	b976      	cbnz	r6, 80084f0 <_Balloc+0x28>
 80084d2:	2010      	movs	r0, #16
 80084d4:	f7ff ff42 	bl	800835c <malloc>
 80084d8:	4602      	mov	r2, r0
 80084da:	61e0      	str	r0, [r4, #28]
 80084dc:	b920      	cbnz	r0, 80084e8 <_Balloc+0x20>
 80084de:	4b18      	ldr	r3, [pc, #96]	@ (8008540 <_Balloc+0x78>)
 80084e0:	4818      	ldr	r0, [pc, #96]	@ (8008544 <_Balloc+0x7c>)
 80084e2:	216b      	movs	r1, #107	@ 0x6b
 80084e4:	f7ff f87a 	bl	80075dc <__assert_func>
 80084e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084ec:	6006      	str	r6, [r0, #0]
 80084ee:	60c6      	str	r6, [r0, #12]
 80084f0:	69e6      	ldr	r6, [r4, #28]
 80084f2:	68f3      	ldr	r3, [r6, #12]
 80084f4:	b183      	cbz	r3, 8008518 <_Balloc+0x50>
 80084f6:	69e3      	ldr	r3, [r4, #28]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084fe:	b9b8      	cbnz	r0, 8008530 <_Balloc+0x68>
 8008500:	2101      	movs	r1, #1
 8008502:	fa01 f605 	lsl.w	r6, r1, r5
 8008506:	1d72      	adds	r2, r6, #5
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	4620      	mov	r0, r4
 800850c:	f001 fd7b 	bl	800a006 <_calloc_r>
 8008510:	b160      	cbz	r0, 800852c <_Balloc+0x64>
 8008512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008516:	e00e      	b.n	8008536 <_Balloc+0x6e>
 8008518:	2221      	movs	r2, #33	@ 0x21
 800851a:	2104      	movs	r1, #4
 800851c:	4620      	mov	r0, r4
 800851e:	f001 fd72 	bl	800a006 <_calloc_r>
 8008522:	69e3      	ldr	r3, [r4, #28]
 8008524:	60f0      	str	r0, [r6, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e4      	bne.n	80084f6 <_Balloc+0x2e>
 800852c:	2000      	movs	r0, #0
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	6802      	ldr	r2, [r0, #0]
 8008532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008536:	2300      	movs	r3, #0
 8008538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800853c:	e7f7      	b.n	800852e <_Balloc+0x66>
 800853e:	bf00      	nop
 8008540:	0800ad21 	.word	0x0800ad21
 8008544:	0800ae44 	.word	0x0800ae44

08008548 <_Bfree>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	69c6      	ldr	r6, [r0, #28]
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b976      	cbnz	r6, 8008570 <_Bfree+0x28>
 8008552:	2010      	movs	r0, #16
 8008554:	f7ff ff02 	bl	800835c <malloc>
 8008558:	4602      	mov	r2, r0
 800855a:	61e8      	str	r0, [r5, #28]
 800855c:	b920      	cbnz	r0, 8008568 <_Bfree+0x20>
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <_Bfree+0x3c>)
 8008560:	4809      	ldr	r0, [pc, #36]	@ (8008588 <_Bfree+0x40>)
 8008562:	218f      	movs	r1, #143	@ 0x8f
 8008564:	f7ff f83a 	bl	80075dc <__assert_func>
 8008568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800856c:	6006      	str	r6, [r0, #0]
 800856e:	60c6      	str	r6, [r0, #12]
 8008570:	b13c      	cbz	r4, 8008582 <_Bfree+0x3a>
 8008572:	69eb      	ldr	r3, [r5, #28]
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800857c:	6021      	str	r1, [r4, #0]
 800857e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	0800ad21 	.word	0x0800ad21
 8008588:	0800ae44 	.word	0x0800ae44

0800858c <__multadd>:
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	690d      	ldr	r5, [r1, #16]
 8008592:	4607      	mov	r7, r0
 8008594:	460c      	mov	r4, r1
 8008596:	461e      	mov	r6, r3
 8008598:	f101 0c14 	add.w	ip, r1, #20
 800859c:	2000      	movs	r0, #0
 800859e:	f8dc 3000 	ldr.w	r3, [ip]
 80085a2:	b299      	uxth	r1, r3
 80085a4:	fb02 6101 	mla	r1, r2, r1, r6
 80085a8:	0c1e      	lsrs	r6, r3, #16
 80085aa:	0c0b      	lsrs	r3, r1, #16
 80085ac:	fb02 3306 	mla	r3, r2, r6, r3
 80085b0:	b289      	uxth	r1, r1
 80085b2:	3001      	adds	r0, #1
 80085b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b8:	4285      	cmp	r5, r0
 80085ba:	f84c 1b04 	str.w	r1, [ip], #4
 80085be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085c2:	dcec      	bgt.n	800859e <__multadd+0x12>
 80085c4:	b30e      	cbz	r6, 800860a <__multadd+0x7e>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	dc19      	bgt.n	8008600 <__multadd+0x74>
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4638      	mov	r0, r7
 80085d0:	3101      	adds	r1, #1
 80085d2:	f7ff ff79 	bl	80084c8 <_Balloc>
 80085d6:	4680      	mov	r8, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <__multadd+0x5a>
 80085da:	4602      	mov	r2, r0
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <__multadd+0x84>)
 80085de:	480d      	ldr	r0, [pc, #52]	@ (8008614 <__multadd+0x88>)
 80085e0:	21ba      	movs	r1, #186	@ 0xba
 80085e2:	f7fe fffb 	bl	80075dc <__assert_func>
 80085e6:	6922      	ldr	r2, [r4, #16]
 80085e8:	3202      	adds	r2, #2
 80085ea:	f104 010c 	add.w	r1, r4, #12
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	300c      	adds	r0, #12
 80085f2:	f001 fce9 	bl	8009fc8 <memcpy>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ffa5 	bl	8008548 <_Bfree>
 80085fe:	4644      	mov	r4, r8
 8008600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008604:	3501      	adds	r5, #1
 8008606:	615e      	str	r6, [r3, #20]
 8008608:	6125      	str	r5, [r4, #16]
 800860a:	4620      	mov	r0, r4
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	0800ae33 	.word	0x0800ae33
 8008614:	0800ae44 	.word	0x0800ae44

08008618 <__s2b>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	460c      	mov	r4, r1
 800861e:	4615      	mov	r5, r2
 8008620:	461f      	mov	r7, r3
 8008622:	2209      	movs	r2, #9
 8008624:	3308      	adds	r3, #8
 8008626:	4606      	mov	r6, r0
 8008628:	fb93 f3f2 	sdiv	r3, r3, r2
 800862c:	2100      	movs	r1, #0
 800862e:	2201      	movs	r2, #1
 8008630:	429a      	cmp	r2, r3
 8008632:	db09      	blt.n	8008648 <__s2b+0x30>
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ff47 	bl	80084c8 <_Balloc>
 800863a:	b940      	cbnz	r0, 800864e <__s2b+0x36>
 800863c:	4602      	mov	r2, r0
 800863e:	4b19      	ldr	r3, [pc, #100]	@ (80086a4 <__s2b+0x8c>)
 8008640:	4819      	ldr	r0, [pc, #100]	@ (80086a8 <__s2b+0x90>)
 8008642:	21d3      	movs	r1, #211	@ 0xd3
 8008644:	f7fe ffca 	bl	80075dc <__assert_func>
 8008648:	0052      	lsls	r2, r2, #1
 800864a:	3101      	adds	r1, #1
 800864c:	e7f0      	b.n	8008630 <__s2b+0x18>
 800864e:	9b08      	ldr	r3, [sp, #32]
 8008650:	6143      	str	r3, [r0, #20]
 8008652:	2d09      	cmp	r5, #9
 8008654:	f04f 0301 	mov.w	r3, #1
 8008658:	6103      	str	r3, [r0, #16]
 800865a:	dd16      	ble.n	800868a <__s2b+0x72>
 800865c:	f104 0909 	add.w	r9, r4, #9
 8008660:	46c8      	mov	r8, r9
 8008662:	442c      	add	r4, r5
 8008664:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008668:	4601      	mov	r1, r0
 800866a:	3b30      	subs	r3, #48	@ 0x30
 800866c:	220a      	movs	r2, #10
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff ff8c 	bl	800858c <__multadd>
 8008674:	45a0      	cmp	r8, r4
 8008676:	d1f5      	bne.n	8008664 <__s2b+0x4c>
 8008678:	f1a5 0408 	sub.w	r4, r5, #8
 800867c:	444c      	add	r4, r9
 800867e:	1b2d      	subs	r5, r5, r4
 8008680:	1963      	adds	r3, r4, r5
 8008682:	42bb      	cmp	r3, r7
 8008684:	db04      	blt.n	8008690 <__s2b+0x78>
 8008686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868a:	340a      	adds	r4, #10
 800868c:	2509      	movs	r5, #9
 800868e:	e7f6      	b.n	800867e <__s2b+0x66>
 8008690:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008694:	4601      	mov	r1, r0
 8008696:	3b30      	subs	r3, #48	@ 0x30
 8008698:	220a      	movs	r2, #10
 800869a:	4630      	mov	r0, r6
 800869c:	f7ff ff76 	bl	800858c <__multadd>
 80086a0:	e7ee      	b.n	8008680 <__s2b+0x68>
 80086a2:	bf00      	nop
 80086a4:	0800ae33 	.word	0x0800ae33
 80086a8:	0800ae44 	.word	0x0800ae44

080086ac <__hi0bits>:
 80086ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086b0:	4603      	mov	r3, r0
 80086b2:	bf36      	itet	cc
 80086b4:	0403      	lslcc	r3, r0, #16
 80086b6:	2000      	movcs	r0, #0
 80086b8:	2010      	movcc	r0, #16
 80086ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086be:	bf3c      	itt	cc
 80086c0:	021b      	lslcc	r3, r3, #8
 80086c2:	3008      	addcc	r0, #8
 80086c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c8:	bf3c      	itt	cc
 80086ca:	011b      	lslcc	r3, r3, #4
 80086cc:	3004      	addcc	r0, #4
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	bf3c      	itt	cc
 80086d4:	009b      	lslcc	r3, r3, #2
 80086d6:	3002      	addcc	r0, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db05      	blt.n	80086e8 <__hi0bits+0x3c>
 80086dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086e0:	f100 0001 	add.w	r0, r0, #1
 80086e4:	bf08      	it	eq
 80086e6:	2020      	moveq	r0, #32
 80086e8:	4770      	bx	lr

080086ea <__lo0bits>:
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	4602      	mov	r2, r0
 80086ee:	f013 0007 	ands.w	r0, r3, #7
 80086f2:	d00b      	beq.n	800870c <__lo0bits+0x22>
 80086f4:	07d9      	lsls	r1, r3, #31
 80086f6:	d421      	bmi.n	800873c <__lo0bits+0x52>
 80086f8:	0798      	lsls	r0, r3, #30
 80086fa:	bf49      	itett	mi
 80086fc:	085b      	lsrmi	r3, r3, #1
 80086fe:	089b      	lsrpl	r3, r3, #2
 8008700:	2001      	movmi	r0, #1
 8008702:	6013      	strmi	r3, [r2, #0]
 8008704:	bf5c      	itt	pl
 8008706:	6013      	strpl	r3, [r2, #0]
 8008708:	2002      	movpl	r0, #2
 800870a:	4770      	bx	lr
 800870c:	b299      	uxth	r1, r3
 800870e:	b909      	cbnz	r1, 8008714 <__lo0bits+0x2a>
 8008710:	0c1b      	lsrs	r3, r3, #16
 8008712:	2010      	movs	r0, #16
 8008714:	b2d9      	uxtb	r1, r3
 8008716:	b909      	cbnz	r1, 800871c <__lo0bits+0x32>
 8008718:	3008      	adds	r0, #8
 800871a:	0a1b      	lsrs	r3, r3, #8
 800871c:	0719      	lsls	r1, r3, #28
 800871e:	bf04      	itt	eq
 8008720:	091b      	lsreq	r3, r3, #4
 8008722:	3004      	addeq	r0, #4
 8008724:	0799      	lsls	r1, r3, #30
 8008726:	bf04      	itt	eq
 8008728:	089b      	lsreq	r3, r3, #2
 800872a:	3002      	addeq	r0, #2
 800872c:	07d9      	lsls	r1, r3, #31
 800872e:	d403      	bmi.n	8008738 <__lo0bits+0x4e>
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	f100 0001 	add.w	r0, r0, #1
 8008736:	d003      	beq.n	8008740 <__lo0bits+0x56>
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	4770      	bx	lr
 800873c:	2000      	movs	r0, #0
 800873e:	4770      	bx	lr
 8008740:	2020      	movs	r0, #32
 8008742:	4770      	bx	lr

08008744 <__i2b>:
 8008744:	b510      	push	{r4, lr}
 8008746:	460c      	mov	r4, r1
 8008748:	2101      	movs	r1, #1
 800874a:	f7ff febd 	bl	80084c8 <_Balloc>
 800874e:	4602      	mov	r2, r0
 8008750:	b928      	cbnz	r0, 800875e <__i2b+0x1a>
 8008752:	4b05      	ldr	r3, [pc, #20]	@ (8008768 <__i2b+0x24>)
 8008754:	4805      	ldr	r0, [pc, #20]	@ (800876c <__i2b+0x28>)
 8008756:	f240 1145 	movw	r1, #325	@ 0x145
 800875a:	f7fe ff3f 	bl	80075dc <__assert_func>
 800875e:	2301      	movs	r3, #1
 8008760:	6144      	str	r4, [r0, #20]
 8008762:	6103      	str	r3, [r0, #16]
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	0800ae33 	.word	0x0800ae33
 800876c:	0800ae44 	.word	0x0800ae44

08008770 <__multiply>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	4617      	mov	r7, r2
 8008776:	690a      	ldr	r2, [r1, #16]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	bfa8      	it	ge
 800877e:	463b      	movge	r3, r7
 8008780:	4689      	mov	r9, r1
 8008782:	bfa4      	itt	ge
 8008784:	460f      	movge	r7, r1
 8008786:	4699      	movge	r9, r3
 8008788:	693d      	ldr	r5, [r7, #16]
 800878a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	eb05 060a 	add.w	r6, r5, sl
 8008796:	42b3      	cmp	r3, r6
 8008798:	b085      	sub	sp, #20
 800879a:	bfb8      	it	lt
 800879c:	3101      	addlt	r1, #1
 800879e:	f7ff fe93 	bl	80084c8 <_Balloc>
 80087a2:	b930      	cbnz	r0, 80087b2 <__multiply+0x42>
 80087a4:	4602      	mov	r2, r0
 80087a6:	4b41      	ldr	r3, [pc, #260]	@ (80088ac <__multiply+0x13c>)
 80087a8:	4841      	ldr	r0, [pc, #260]	@ (80088b0 <__multiply+0x140>)
 80087aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087ae:	f7fe ff15 	bl	80075dc <__assert_func>
 80087b2:	f100 0414 	add.w	r4, r0, #20
 80087b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087ba:	4623      	mov	r3, r4
 80087bc:	2200      	movs	r2, #0
 80087be:	4573      	cmp	r3, lr
 80087c0:	d320      	bcc.n	8008804 <__multiply+0x94>
 80087c2:	f107 0814 	add.w	r8, r7, #20
 80087c6:	f109 0114 	add.w	r1, r9, #20
 80087ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	1beb      	subs	r3, r5, r7
 80087d6:	3b15      	subs	r3, #21
 80087d8:	f023 0303 	bic.w	r3, r3, #3
 80087dc:	3304      	adds	r3, #4
 80087de:	3715      	adds	r7, #21
 80087e0:	42bd      	cmp	r5, r7
 80087e2:	bf38      	it	cc
 80087e4:	2304      	movcc	r3, #4
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	9103      	str	r1, [sp, #12]
 80087ec:	428b      	cmp	r3, r1
 80087ee:	d80c      	bhi.n	800880a <__multiply+0x9a>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	dd03      	ble.n	80087fc <__multiply+0x8c>
 80087f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d055      	beq.n	80088a8 <__multiply+0x138>
 80087fc:	6106      	str	r6, [r0, #16]
 80087fe:	b005      	add	sp, #20
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	f843 2b04 	str.w	r2, [r3], #4
 8008808:	e7d9      	b.n	80087be <__multiply+0x4e>
 800880a:	f8b1 a000 	ldrh.w	sl, [r1]
 800880e:	f1ba 0f00 	cmp.w	sl, #0
 8008812:	d01f      	beq.n	8008854 <__multiply+0xe4>
 8008814:	46c4      	mov	ip, r8
 8008816:	46a1      	mov	r9, r4
 8008818:	2700      	movs	r7, #0
 800881a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800881e:	f8d9 3000 	ldr.w	r3, [r9]
 8008822:	fa1f fb82 	uxth.w	fp, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	fb0a 330b 	mla	r3, sl, fp, r3
 800882c:	443b      	add	r3, r7
 800882e:	f8d9 7000 	ldr.w	r7, [r9]
 8008832:	0c12      	lsrs	r2, r2, #16
 8008834:	0c3f      	lsrs	r7, r7, #16
 8008836:	fb0a 7202 	mla	r2, sl, r2, r7
 800883a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800883e:	b29b      	uxth	r3, r3
 8008840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008844:	4565      	cmp	r5, ip
 8008846:	f849 3b04 	str.w	r3, [r9], #4
 800884a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800884e:	d8e4      	bhi.n	800881a <__multiply+0xaa>
 8008850:	9b01      	ldr	r3, [sp, #4]
 8008852:	50e7      	str	r7, [r4, r3]
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800885a:	3104      	adds	r1, #4
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	d020      	beq.n	80088a4 <__multiply+0x134>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	4647      	mov	r7, r8
 8008866:	46a4      	mov	ip, r4
 8008868:	f04f 0a00 	mov.w	sl, #0
 800886c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008870:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008874:	fb09 220b 	mla	r2, r9, fp, r2
 8008878:	4452      	add	r2, sl
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008880:	f84c 3b04 	str.w	r3, [ip], #4
 8008884:	f857 3b04 	ldr.w	r3, [r7], #4
 8008888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008890:	fb09 330a 	mla	r3, r9, sl, r3
 8008894:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008898:	42bd      	cmp	r5, r7
 800889a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800889e:	d8e5      	bhi.n	800886c <__multiply+0xfc>
 80088a0:	9a01      	ldr	r2, [sp, #4]
 80088a2:	50a3      	str	r3, [r4, r2]
 80088a4:	3404      	adds	r4, #4
 80088a6:	e79f      	b.n	80087e8 <__multiply+0x78>
 80088a8:	3e01      	subs	r6, #1
 80088aa:	e7a1      	b.n	80087f0 <__multiply+0x80>
 80088ac:	0800ae33 	.word	0x0800ae33
 80088b0:	0800ae44 	.word	0x0800ae44

080088b4 <__pow5mult>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4615      	mov	r5, r2
 80088ba:	f012 0203 	ands.w	r2, r2, #3
 80088be:	4607      	mov	r7, r0
 80088c0:	460e      	mov	r6, r1
 80088c2:	d007      	beq.n	80088d4 <__pow5mult+0x20>
 80088c4:	4c25      	ldr	r4, [pc, #148]	@ (800895c <__pow5mult+0xa8>)
 80088c6:	3a01      	subs	r2, #1
 80088c8:	2300      	movs	r3, #0
 80088ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ce:	f7ff fe5d 	bl	800858c <__multadd>
 80088d2:	4606      	mov	r6, r0
 80088d4:	10ad      	asrs	r5, r5, #2
 80088d6:	d03d      	beq.n	8008954 <__pow5mult+0xa0>
 80088d8:	69fc      	ldr	r4, [r7, #28]
 80088da:	b97c      	cbnz	r4, 80088fc <__pow5mult+0x48>
 80088dc:	2010      	movs	r0, #16
 80088de:	f7ff fd3d 	bl	800835c <malloc>
 80088e2:	4602      	mov	r2, r0
 80088e4:	61f8      	str	r0, [r7, #28]
 80088e6:	b928      	cbnz	r0, 80088f4 <__pow5mult+0x40>
 80088e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008960 <__pow5mult+0xac>)
 80088ea:	481e      	ldr	r0, [pc, #120]	@ (8008964 <__pow5mult+0xb0>)
 80088ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088f0:	f7fe fe74 	bl	80075dc <__assert_func>
 80088f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f8:	6004      	str	r4, [r0, #0]
 80088fa:	60c4      	str	r4, [r0, #12]
 80088fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008904:	b94c      	cbnz	r4, 800891a <__pow5mult+0x66>
 8008906:	f240 2171 	movw	r1, #625	@ 0x271
 800890a:	4638      	mov	r0, r7
 800890c:	f7ff ff1a 	bl	8008744 <__i2b>
 8008910:	2300      	movs	r3, #0
 8008912:	f8c8 0008 	str.w	r0, [r8, #8]
 8008916:	4604      	mov	r4, r0
 8008918:	6003      	str	r3, [r0, #0]
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	07eb      	lsls	r3, r5, #31
 8008920:	d50a      	bpl.n	8008938 <__pow5mult+0x84>
 8008922:	4631      	mov	r1, r6
 8008924:	4622      	mov	r2, r4
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ff22 	bl	8008770 <__multiply>
 800892c:	4631      	mov	r1, r6
 800892e:	4680      	mov	r8, r0
 8008930:	4638      	mov	r0, r7
 8008932:	f7ff fe09 	bl	8008548 <_Bfree>
 8008936:	4646      	mov	r6, r8
 8008938:	106d      	asrs	r5, r5, #1
 800893a:	d00b      	beq.n	8008954 <__pow5mult+0xa0>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	b938      	cbnz	r0, 8008950 <__pow5mult+0x9c>
 8008940:	4622      	mov	r2, r4
 8008942:	4621      	mov	r1, r4
 8008944:	4638      	mov	r0, r7
 8008946:	f7ff ff13 	bl	8008770 <__multiply>
 800894a:	6020      	str	r0, [r4, #0]
 800894c:	f8c0 9000 	str.w	r9, [r0]
 8008950:	4604      	mov	r4, r0
 8008952:	e7e4      	b.n	800891e <__pow5mult+0x6a>
 8008954:	4630      	mov	r0, r6
 8008956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895a:	bf00      	nop
 800895c:	0800af18 	.word	0x0800af18
 8008960:	0800ad21 	.word	0x0800ad21
 8008964:	0800ae44 	.word	0x0800ae44

08008968 <__lshift>:
 8008968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	460c      	mov	r4, r1
 800896e:	6849      	ldr	r1, [r1, #4]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	4607      	mov	r7, r0
 800897a:	4691      	mov	r9, r2
 800897c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008980:	f108 0601 	add.w	r6, r8, #1
 8008984:	42b3      	cmp	r3, r6
 8008986:	db0b      	blt.n	80089a0 <__lshift+0x38>
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff fd9d 	bl	80084c8 <_Balloc>
 800898e:	4605      	mov	r5, r0
 8008990:	b948      	cbnz	r0, 80089a6 <__lshift+0x3e>
 8008992:	4602      	mov	r2, r0
 8008994:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <__lshift+0xd0>)
 8008996:	4829      	ldr	r0, [pc, #164]	@ (8008a3c <__lshift+0xd4>)
 8008998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800899c:	f7fe fe1e 	bl	80075dc <__assert_func>
 80089a0:	3101      	adds	r1, #1
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	e7ee      	b.n	8008984 <__lshift+0x1c>
 80089a6:	2300      	movs	r3, #0
 80089a8:	f100 0114 	add.w	r1, r0, #20
 80089ac:	f100 0210 	add.w	r2, r0, #16
 80089b0:	4618      	mov	r0, r3
 80089b2:	4553      	cmp	r3, sl
 80089b4:	db33      	blt.n	8008a1e <__lshift+0xb6>
 80089b6:	6920      	ldr	r0, [r4, #16]
 80089b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089bc:	f104 0314 	add.w	r3, r4, #20
 80089c0:	f019 091f 	ands.w	r9, r9, #31
 80089c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089cc:	d02b      	beq.n	8008a26 <__lshift+0xbe>
 80089ce:	f1c9 0e20 	rsb	lr, r9, #32
 80089d2:	468a      	mov	sl, r1
 80089d4:	2200      	movs	r2, #0
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	fa00 f009 	lsl.w	r0, r0, r9
 80089dc:	4310      	orrs	r0, r2
 80089de:	f84a 0b04 	str.w	r0, [sl], #4
 80089e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e6:	459c      	cmp	ip, r3
 80089e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089ec:	d8f3      	bhi.n	80089d6 <__lshift+0x6e>
 80089ee:	ebac 0304 	sub.w	r3, ip, r4
 80089f2:	3b15      	subs	r3, #21
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	3304      	adds	r3, #4
 80089fa:	f104 0015 	add.w	r0, r4, #21
 80089fe:	4560      	cmp	r0, ip
 8008a00:	bf88      	it	hi
 8008a02:	2304      	movhi	r3, #4
 8008a04:	50ca      	str	r2, [r1, r3]
 8008a06:	b10a      	cbz	r2, 8008a0c <__lshift+0xa4>
 8008a08:	f108 0602 	add.w	r6, r8, #2
 8008a0c:	3e01      	subs	r6, #1
 8008a0e:	4638      	mov	r0, r7
 8008a10:	612e      	str	r6, [r5, #16]
 8008a12:	4621      	mov	r1, r4
 8008a14:	f7ff fd98 	bl	8008548 <_Bfree>
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a22:	3301      	adds	r3, #1
 8008a24:	e7c5      	b.n	80089b2 <__lshift+0x4a>
 8008a26:	3904      	subs	r1, #4
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a30:	459c      	cmp	ip, r3
 8008a32:	d8f9      	bhi.n	8008a28 <__lshift+0xc0>
 8008a34:	e7ea      	b.n	8008a0c <__lshift+0xa4>
 8008a36:	bf00      	nop
 8008a38:	0800ae33 	.word	0x0800ae33
 8008a3c:	0800ae44 	.word	0x0800ae44

08008a40 <__mcmp>:
 8008a40:	690a      	ldr	r2, [r1, #16]
 8008a42:	4603      	mov	r3, r0
 8008a44:	6900      	ldr	r0, [r0, #16]
 8008a46:	1a80      	subs	r0, r0, r2
 8008a48:	b530      	push	{r4, r5, lr}
 8008a4a:	d10e      	bne.n	8008a6a <__mcmp+0x2a>
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	3114      	adds	r1, #20
 8008a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a60:	4295      	cmp	r5, r2
 8008a62:	d003      	beq.n	8008a6c <__mcmp+0x2c>
 8008a64:	d205      	bcs.n	8008a72 <__mcmp+0x32>
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	bd30      	pop	{r4, r5, pc}
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d3f3      	bcc.n	8008a58 <__mcmp+0x18>
 8008a70:	e7fb      	b.n	8008a6a <__mcmp+0x2a>
 8008a72:	2001      	movs	r0, #1
 8008a74:	e7f9      	b.n	8008a6a <__mcmp+0x2a>
	...

08008a78 <__mdiff>:
 8008a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	4689      	mov	r9, r1
 8008a7e:	4606      	mov	r6, r0
 8008a80:	4611      	mov	r1, r2
 8008a82:	4648      	mov	r0, r9
 8008a84:	4614      	mov	r4, r2
 8008a86:	f7ff ffdb 	bl	8008a40 <__mcmp>
 8008a8a:	1e05      	subs	r5, r0, #0
 8008a8c:	d112      	bne.n	8008ab4 <__mdiff+0x3c>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff fd19 	bl	80084c8 <_Balloc>
 8008a96:	4602      	mov	r2, r0
 8008a98:	b928      	cbnz	r0, 8008aa6 <__mdiff+0x2e>
 8008a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b98 <__mdiff+0x120>)
 8008a9c:	f240 2137 	movw	r1, #567	@ 0x237
 8008aa0:	483e      	ldr	r0, [pc, #248]	@ (8008b9c <__mdiff+0x124>)
 8008aa2:	f7fe fd9b 	bl	80075dc <__assert_func>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aac:	4610      	mov	r0, r2
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	bfbc      	itt	lt
 8008ab6:	464b      	movlt	r3, r9
 8008ab8:	46a1      	movlt	r9, r4
 8008aba:	4630      	mov	r0, r6
 8008abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ac0:	bfba      	itte	lt
 8008ac2:	461c      	movlt	r4, r3
 8008ac4:	2501      	movlt	r5, #1
 8008ac6:	2500      	movge	r5, #0
 8008ac8:	f7ff fcfe 	bl	80084c8 <_Balloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	b918      	cbnz	r0, 8008ad8 <__mdiff+0x60>
 8008ad0:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <__mdiff+0x120>)
 8008ad2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ad6:	e7e3      	b.n	8008aa0 <__mdiff+0x28>
 8008ad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008adc:	6926      	ldr	r6, [r4, #16]
 8008ade:	60c5      	str	r5, [r0, #12]
 8008ae0:	f109 0310 	add.w	r3, r9, #16
 8008ae4:	f109 0514 	add.w	r5, r9, #20
 8008ae8:	f104 0e14 	add.w	lr, r4, #20
 8008aec:	f100 0b14 	add.w	fp, r0, #20
 8008af0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008af4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	46d9      	mov	r9, fp
 8008afc:	f04f 0c00 	mov.w	ip, #0
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	fa1f f38a 	uxth.w	r3, sl
 8008b10:	4619      	mov	r1, r3
 8008b12:	b283      	uxth	r3, r0
 8008b14:	1acb      	subs	r3, r1, r3
 8008b16:	0c00      	lsrs	r0, r0, #16
 8008b18:	4463      	add	r3, ip
 8008b1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b28:	4576      	cmp	r6, lr
 8008b2a:	f849 3b04 	str.w	r3, [r9], #4
 8008b2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b32:	d8e5      	bhi.n	8008b00 <__mdiff+0x88>
 8008b34:	1b33      	subs	r3, r6, r4
 8008b36:	3b15      	subs	r3, #21
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	3415      	adds	r4, #21
 8008b3e:	3304      	adds	r3, #4
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	bf38      	it	cc
 8008b44:	2304      	movcc	r3, #4
 8008b46:	441d      	add	r5, r3
 8008b48:	445b      	add	r3, fp
 8008b4a:	461e      	mov	r6, r3
 8008b4c:	462c      	mov	r4, r5
 8008b4e:	4544      	cmp	r4, r8
 8008b50:	d30e      	bcc.n	8008b70 <__mdiff+0xf8>
 8008b52:	f108 0103 	add.w	r1, r8, #3
 8008b56:	1b49      	subs	r1, r1, r5
 8008b58:	f021 0103 	bic.w	r1, r1, #3
 8008b5c:	3d03      	subs	r5, #3
 8008b5e:	45a8      	cmp	r8, r5
 8008b60:	bf38      	it	cc
 8008b62:	2100      	movcc	r1, #0
 8008b64:	440b      	add	r3, r1
 8008b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b6a:	b191      	cbz	r1, 8008b92 <__mdiff+0x11a>
 8008b6c:	6117      	str	r7, [r2, #16]
 8008b6e:	e79d      	b.n	8008aac <__mdiff+0x34>
 8008b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b74:	46e6      	mov	lr, ip
 8008b76:	0c08      	lsrs	r0, r1, #16
 8008b78:	fa1c fc81 	uxtah	ip, ip, r1
 8008b7c:	4471      	add	r1, lr
 8008b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b82:	b289      	uxth	r1, r1
 8008b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b88:	f846 1b04 	str.w	r1, [r6], #4
 8008b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b90:	e7dd      	b.n	8008b4e <__mdiff+0xd6>
 8008b92:	3f01      	subs	r7, #1
 8008b94:	e7e7      	b.n	8008b66 <__mdiff+0xee>
 8008b96:	bf00      	nop
 8008b98:	0800ae33 	.word	0x0800ae33
 8008b9c:	0800ae44 	.word	0x0800ae44

08008ba0 <__ulp>:
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	ed8d 0b00 	vstr	d0, [sp]
 8008ba6:	9a01      	ldr	r2, [sp, #4]
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <__ulp+0x48>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dc08      	bgt.n	8008bc6 <__ulp+0x26>
 8008bb4:	425b      	negs	r3, r3
 8008bb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bbe:	da04      	bge.n	8008bca <__ulp+0x2a>
 8008bc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bc4:	4113      	asrs	r3, r2
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	e008      	b.n	8008bdc <__ulp+0x3c>
 8008bca:	f1a2 0314 	sub.w	r3, r2, #20
 8008bce:	2b1e      	cmp	r3, #30
 8008bd0:	bfda      	itte	le
 8008bd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bd6:	40da      	lsrle	r2, r3
 8008bd8:	2201      	movgt	r2, #1
 8008bda:	2300      	movs	r3, #0
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	ec41 0b10 	vmov	d0, r0, r1
 8008be4:	b002      	add	sp, #8
 8008be6:	4770      	bx	lr
 8008be8:	7ff00000 	.word	0x7ff00000

08008bec <__b2d>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	6906      	ldr	r6, [r0, #16]
 8008bf2:	f100 0814 	add.w	r8, r0, #20
 8008bf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008bfa:	1f37      	subs	r7, r6, #4
 8008bfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7ff fd53 	bl	80086ac <__hi0bits>
 8008c06:	f1c0 0320 	rsb	r3, r0, #32
 8008c0a:	280a      	cmp	r0, #10
 8008c0c:	600b      	str	r3, [r1, #0]
 8008c0e:	491b      	ldr	r1, [pc, #108]	@ (8008c7c <__b2d+0x90>)
 8008c10:	dc15      	bgt.n	8008c3e <__b2d+0x52>
 8008c12:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c16:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c1a:	45b8      	cmp	r8, r7
 8008c1c:	ea43 0501 	orr.w	r5, r3, r1
 8008c20:	bf34      	ite	cc
 8008c22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c26:	2300      	movcs	r3, #0
 8008c28:	3015      	adds	r0, #21
 8008c2a:	fa02 f000 	lsl.w	r0, r2, r0
 8008c2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c32:	4303      	orrs	r3, r0
 8008c34:	461c      	mov	r4, r3
 8008c36:	ec45 4b10 	vmov	d0, r4, r5
 8008c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3e:	45b8      	cmp	r8, r7
 8008c40:	bf3a      	itte	cc
 8008c42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c46:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c4a:	2300      	movcs	r3, #0
 8008c4c:	380b      	subs	r0, #11
 8008c4e:	d012      	beq.n	8008c76 <__b2d+0x8a>
 8008c50:	f1c0 0120 	rsb	r1, r0, #32
 8008c54:	fa23 f401 	lsr.w	r4, r3, r1
 8008c58:	4082      	lsls	r2, r0
 8008c5a:	4322      	orrs	r2, r4
 8008c5c:	4547      	cmp	r7, r8
 8008c5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c62:	bf8c      	ite	hi
 8008c64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c68:	2200      	movls	r2, #0
 8008c6a:	4083      	lsls	r3, r0
 8008c6c:	40ca      	lsrs	r2, r1
 8008c6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c72:	4313      	orrs	r3, r2
 8008c74:	e7de      	b.n	8008c34 <__b2d+0x48>
 8008c76:	ea42 0501 	orr.w	r5, r2, r1
 8008c7a:	e7db      	b.n	8008c34 <__b2d+0x48>
 8008c7c:	3ff00000 	.word	0x3ff00000

08008c80 <__d2b>:
 8008c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	460f      	mov	r7, r1
 8008c86:	2101      	movs	r1, #1
 8008c88:	ec59 8b10 	vmov	r8, r9, d0
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	f7ff fc1b 	bl	80084c8 <_Balloc>
 8008c92:	4604      	mov	r4, r0
 8008c94:	b930      	cbnz	r0, 8008ca4 <__d2b+0x24>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b23      	ldr	r3, [pc, #140]	@ (8008d28 <__d2b+0xa8>)
 8008c9a:	4824      	ldr	r0, [pc, #144]	@ (8008d2c <__d2b+0xac>)
 8008c9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ca0:	f7fe fc9c 	bl	80075dc <__assert_func>
 8008ca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cac:	b10d      	cbz	r5, 8008cb2 <__d2b+0x32>
 8008cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8008cb8:	d023      	beq.n	8008d02 <__d2b+0x82>
 8008cba:	4668      	mov	r0, sp
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	f7ff fd14 	bl	80086ea <__lo0bits>
 8008cc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cc6:	b1d0      	cbz	r0, 8008cfe <__d2b+0x7e>
 8008cc8:	f1c0 0320 	rsb	r3, r0, #32
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	40c2      	lsrs	r2, r0
 8008cd4:	6163      	str	r3, [r4, #20]
 8008cd6:	9201      	str	r2, [sp, #4]
 8008cd8:	9b01      	ldr	r3, [sp, #4]
 8008cda:	61a3      	str	r3, [r4, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf0c      	ite	eq
 8008ce0:	2201      	moveq	r2, #1
 8008ce2:	2202      	movne	r2, #2
 8008ce4:	6122      	str	r2, [r4, #16]
 8008ce6:	b1a5      	cbz	r5, 8008d12 <__d2b+0x92>
 8008ce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cec:	4405      	add	r5, r0
 8008cee:	603d      	str	r5, [r7, #0]
 8008cf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cf4:	6030      	str	r0, [r6, #0]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	b003      	add	sp, #12
 8008cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	6161      	str	r1, [r4, #20]
 8008d00:	e7ea      	b.n	8008cd8 <__d2b+0x58>
 8008d02:	a801      	add	r0, sp, #4
 8008d04:	f7ff fcf1 	bl	80086ea <__lo0bits>
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	6163      	str	r3, [r4, #20]
 8008d0c:	3020      	adds	r0, #32
 8008d0e:	2201      	movs	r2, #1
 8008d10:	e7e8      	b.n	8008ce4 <__d2b+0x64>
 8008d12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d1a:	6038      	str	r0, [r7, #0]
 8008d1c:	6918      	ldr	r0, [r3, #16]
 8008d1e:	f7ff fcc5 	bl	80086ac <__hi0bits>
 8008d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d26:	e7e5      	b.n	8008cf4 <__d2b+0x74>
 8008d28:	0800ae33 	.word	0x0800ae33
 8008d2c:	0800ae44 	.word	0x0800ae44

08008d30 <__ratio>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	b085      	sub	sp, #20
 8008d36:	e9cd 1000 	strd	r1, r0, [sp]
 8008d3a:	a902      	add	r1, sp, #8
 8008d3c:	f7ff ff56 	bl	8008bec <__b2d>
 8008d40:	9800      	ldr	r0, [sp, #0]
 8008d42:	a903      	add	r1, sp, #12
 8008d44:	ec55 4b10 	vmov	r4, r5, d0
 8008d48:	f7ff ff50 	bl	8008bec <__b2d>
 8008d4c:	9b01      	ldr	r3, [sp, #4]
 8008d4e:	6919      	ldr	r1, [r3, #16]
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	1ac9      	subs	r1, r1, r3
 8008d56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	ec5b ab10 	vmov	sl, fp, d0
 8008d60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfce      	itee	gt
 8008d68:	462a      	movgt	r2, r5
 8008d6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d6e:	465a      	movle	r2, fp
 8008d70:	462f      	mov	r7, r5
 8008d72:	46d9      	mov	r9, fp
 8008d74:	bfcc      	ite	gt
 8008d76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d7e:	464b      	mov	r3, r9
 8008d80:	4652      	mov	r2, sl
 8008d82:	4620      	mov	r0, r4
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fd61 	bl	800084c <__aeabi_ddiv>
 8008d8a:	ec41 0b10 	vmov	d0, r0, r1
 8008d8e:	b005      	add	sp, #20
 8008d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d94 <__copybits>:
 8008d94:	3901      	subs	r1, #1
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	1149      	asrs	r1, r1, #5
 8008d9a:	6914      	ldr	r4, [r2, #16]
 8008d9c:	3101      	adds	r1, #1
 8008d9e:	f102 0314 	add.w	r3, r2, #20
 8008da2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008da6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008daa:	1f05      	subs	r5, r0, #4
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d30c      	bcc.n	8008dca <__copybits+0x36>
 8008db0:	1aa3      	subs	r3, r4, r2
 8008db2:	3b11      	subs	r3, #17
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	3211      	adds	r2, #17
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	bf88      	it	hi
 8008dbe:	2300      	movhi	r3, #0
 8008dc0:	4418      	add	r0, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4288      	cmp	r0, r1
 8008dc6:	d305      	bcc.n	8008dd4 <__copybits+0x40>
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dce:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dd2:	e7eb      	b.n	8008dac <__copybits+0x18>
 8008dd4:	f840 3b04 	str.w	r3, [r0], #4
 8008dd8:	e7f4      	b.n	8008dc4 <__copybits+0x30>

08008dda <__any_on>:
 8008dda:	f100 0214 	add.w	r2, r0, #20
 8008dde:	6900      	ldr	r0, [r0, #16]
 8008de0:	114b      	asrs	r3, r1, #5
 8008de2:	4298      	cmp	r0, r3
 8008de4:	b510      	push	{r4, lr}
 8008de6:	db11      	blt.n	8008e0c <__any_on+0x32>
 8008de8:	dd0a      	ble.n	8008e00 <__any_on+0x26>
 8008dea:	f011 011f 	ands.w	r1, r1, #31
 8008dee:	d007      	beq.n	8008e00 <__any_on+0x26>
 8008df0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008df4:	fa24 f001 	lsr.w	r0, r4, r1
 8008df8:	fa00 f101 	lsl.w	r1, r0, r1
 8008dfc:	428c      	cmp	r4, r1
 8008dfe:	d10b      	bne.n	8008e18 <__any_on+0x3e>
 8008e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d803      	bhi.n	8008e10 <__any_on+0x36>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	bd10      	pop	{r4, pc}
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	e7f7      	b.n	8008e00 <__any_on+0x26>
 8008e10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d0f5      	beq.n	8008e04 <__any_on+0x2a>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e7f6      	b.n	8008e0a <__any_on+0x30>

08008e1c <sulp>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	460d      	mov	r5, r1
 8008e22:	ec45 4b10 	vmov	d0, r4, r5
 8008e26:	4616      	mov	r6, r2
 8008e28:	f7ff feba 	bl	8008ba0 <__ulp>
 8008e2c:	ec51 0b10 	vmov	r0, r1, d0
 8008e30:	b17e      	cbz	r6, 8008e52 <sulp+0x36>
 8008e32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd09      	ble.n	8008e52 <sulp+0x36>
 8008e3e:	051b      	lsls	r3, r3, #20
 8008e40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e44:	2400      	movs	r4, #0
 8008e46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	f7f7 fbd3 	bl	80005f8 <__aeabi_dmul>
 8008e52:	ec41 0b10 	vmov	d0, r0, r1
 8008e56:	bd70      	pop	{r4, r5, r6, pc}

08008e58 <_strtod_l>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	b09f      	sub	sp, #124	@ 0x7c
 8008e5e:	460c      	mov	r4, r1
 8008e60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e62:	2200      	movs	r2, #0
 8008e64:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e66:	9005      	str	r0, [sp, #20]
 8008e68:	f04f 0a00 	mov.w	sl, #0
 8008e6c:	f04f 0b00 	mov.w	fp, #0
 8008e70:	460a      	mov	r2, r1
 8008e72:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e74:	7811      	ldrb	r1, [r2, #0]
 8008e76:	292b      	cmp	r1, #43	@ 0x2b
 8008e78:	d04a      	beq.n	8008f10 <_strtod_l+0xb8>
 8008e7a:	d838      	bhi.n	8008eee <_strtod_l+0x96>
 8008e7c:	290d      	cmp	r1, #13
 8008e7e:	d832      	bhi.n	8008ee6 <_strtod_l+0x8e>
 8008e80:	2908      	cmp	r1, #8
 8008e82:	d832      	bhi.n	8008eea <_strtod_l+0x92>
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d03b      	beq.n	8008f00 <_strtod_l+0xa8>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e8e:	782a      	ldrb	r2, [r5, #0]
 8008e90:	2a30      	cmp	r2, #48	@ 0x30
 8008e92:	f040 80b2 	bne.w	8008ffa <_strtod_l+0x1a2>
 8008e96:	786a      	ldrb	r2, [r5, #1]
 8008e98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e9c:	2a58      	cmp	r2, #88	@ 0x58
 8008e9e:	d16e      	bne.n	8008f7e <_strtod_l+0x126>
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4a8f      	ldr	r2, [pc, #572]	@ (80090e8 <_strtod_l+0x290>)
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008eb0:	a919      	add	r1, sp, #100	@ 0x64
 8008eb2:	f001 f923 	bl	800a0fc <__gethex>
 8008eb6:	f010 060f 	ands.w	r6, r0, #15
 8008eba:	4604      	mov	r4, r0
 8008ebc:	d005      	beq.n	8008eca <_strtod_l+0x72>
 8008ebe:	2e06      	cmp	r6, #6
 8008ec0:	d128      	bne.n	8008f14 <_strtod_l+0xbc>
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ec8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 858e 	bne.w	80099ee <_strtod_l+0xb96>
 8008ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed4:	b1cb      	cbz	r3, 8008f0a <_strtod_l+0xb2>
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008edc:	ec43 2b10 	vmov	d0, r2, r3
 8008ee0:	b01f      	add	sp, #124	@ 0x7c
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	2920      	cmp	r1, #32
 8008ee8:	d1ce      	bne.n	8008e88 <_strtod_l+0x30>
 8008eea:	3201      	adds	r2, #1
 8008eec:	e7c1      	b.n	8008e72 <_strtod_l+0x1a>
 8008eee:	292d      	cmp	r1, #45	@ 0x2d
 8008ef0:	d1ca      	bne.n	8008e88 <_strtod_l+0x30>
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ef6:	1c51      	adds	r1, r2, #1
 8008ef8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008efa:	7852      	ldrb	r2, [r2, #1]
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d1c5      	bne.n	8008e8c <_strtod_l+0x34>
 8008f00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f02:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 8570 	bne.w	80099ea <_strtod_l+0xb92>
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	e7e5      	b.n	8008edc <_strtod_l+0x84>
 8008f10:	2100      	movs	r1, #0
 8008f12:	e7ef      	b.n	8008ef4 <_strtod_l+0x9c>
 8008f14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f16:	b13a      	cbz	r2, 8008f28 <_strtod_l+0xd0>
 8008f18:	2135      	movs	r1, #53	@ 0x35
 8008f1a:	a81c      	add	r0, sp, #112	@ 0x70
 8008f1c:	f7ff ff3a 	bl	8008d94 <__copybits>
 8008f20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f22:	9805      	ldr	r0, [sp, #20]
 8008f24:	f7ff fb10 	bl	8008548 <_Bfree>
 8008f28:	3e01      	subs	r6, #1
 8008f2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f2c:	2e04      	cmp	r6, #4
 8008f2e:	d806      	bhi.n	8008f3e <_strtod_l+0xe6>
 8008f30:	e8df f006 	tbb	[pc, r6]
 8008f34:	201d0314 	.word	0x201d0314
 8008f38:	14          	.byte	0x14
 8008f39:	00          	.byte	0x00
 8008f3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f3e:	05e1      	lsls	r1, r4, #23
 8008f40:	bf48      	it	mi
 8008f42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f4a:	0d1b      	lsrs	r3, r3, #20
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1bb      	bne.n	8008eca <_strtod_l+0x72>
 8008f52:	f7fe fb0f 	bl	8007574 <__errno>
 8008f56:	2322      	movs	r3, #34	@ 0x22
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	e7b6      	b.n	8008eca <_strtod_l+0x72>
 8008f5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f6c:	e7e7      	b.n	8008f3e <_strtod_l+0xe6>
 8008f6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80090f0 <_strtod_l+0x298>
 8008f72:	e7e4      	b.n	8008f3e <_strtod_l+0xe6>
 8008f74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f78:	f04f 3aff 	mov.w	sl, #4294967295
 8008f7c:	e7df      	b.n	8008f3e <_strtod_l+0xe6>
 8008f7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	2b30      	cmp	r3, #48	@ 0x30
 8008f88:	d0f9      	beq.n	8008f7e <_strtod_l+0x126>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d09d      	beq.n	8008eca <_strtod_l+0x72>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	2700      	movs	r7, #0
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f96:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f98:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008f9a:	46b9      	mov	r9, r7
 8008f9c:	220a      	movs	r2, #10
 8008f9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008fa0:	7805      	ldrb	r5, [r0, #0]
 8008fa2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fa6:	b2d9      	uxtb	r1, r3
 8008fa8:	2909      	cmp	r1, #9
 8008faa:	d928      	bls.n	8008ffe <_strtod_l+0x1a6>
 8008fac:	494f      	ldr	r1, [pc, #316]	@ (80090ec <_strtod_l+0x294>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f000 ffe8 	bl	8009f84 <strncmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d032      	beq.n	800901e <_strtod_l+0x1c6>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	462a      	mov	r2, r5
 8008fbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fbe:	464d      	mov	r5, r9
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2a65      	cmp	r2, #101	@ 0x65
 8008fc4:	d001      	beq.n	8008fca <_strtod_l+0x172>
 8008fc6:	2a45      	cmp	r2, #69	@ 0x45
 8008fc8:	d114      	bne.n	8008ff4 <_strtod_l+0x19c>
 8008fca:	b91d      	cbnz	r5, 8008fd4 <_strtod_l+0x17c>
 8008fcc:	9a08      	ldr	r2, [sp, #32]
 8008fce:	4302      	orrs	r2, r0
 8008fd0:	d096      	beq.n	8008f00 <_strtod_l+0xa8>
 8008fd2:	2500      	movs	r5, #0
 8008fd4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fd6:	1c62      	adds	r2, r4, #1
 8008fd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fda:	7862      	ldrb	r2, [r4, #1]
 8008fdc:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fde:	d07a      	beq.n	80090d6 <_strtod_l+0x27e>
 8008fe0:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fe2:	d07e      	beq.n	80090e2 <_strtod_l+0x28a>
 8008fe4:	f04f 0c00 	mov.w	ip, #0
 8008fe8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fec:	2909      	cmp	r1, #9
 8008fee:	f240 8085 	bls.w	80090fc <_strtod_l+0x2a4>
 8008ff2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ff4:	f04f 0800 	mov.w	r8, #0
 8008ff8:	e0a5      	b.n	8009146 <_strtod_l+0x2ee>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e7c8      	b.n	8008f90 <_strtod_l+0x138>
 8008ffe:	f1b9 0f08 	cmp.w	r9, #8
 8009002:	bfd8      	it	le
 8009004:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009006:	f100 0001 	add.w	r0, r0, #1
 800900a:	bfda      	itte	le
 800900c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009010:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009012:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009016:	f109 0901 	add.w	r9, r9, #1
 800901a:	9019      	str	r0, [sp, #100]	@ 0x64
 800901c:	e7bf      	b.n	8008f9e <_strtod_l+0x146>
 800901e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	9219      	str	r2, [sp, #100]	@ 0x64
 8009024:	785a      	ldrb	r2, [r3, #1]
 8009026:	f1b9 0f00 	cmp.w	r9, #0
 800902a:	d03b      	beq.n	80090a4 <_strtod_l+0x24c>
 800902c:	900a      	str	r0, [sp, #40]	@ 0x28
 800902e:	464d      	mov	r5, r9
 8009030:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009034:	2b09      	cmp	r3, #9
 8009036:	d912      	bls.n	800905e <_strtod_l+0x206>
 8009038:	2301      	movs	r3, #1
 800903a:	e7c2      	b.n	8008fc2 <_strtod_l+0x16a>
 800903c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	9219      	str	r2, [sp, #100]	@ 0x64
 8009042:	785a      	ldrb	r2, [r3, #1]
 8009044:	3001      	adds	r0, #1
 8009046:	2a30      	cmp	r2, #48	@ 0x30
 8009048:	d0f8      	beq.n	800903c <_strtod_l+0x1e4>
 800904a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800904e:	2b08      	cmp	r3, #8
 8009050:	f200 84d2 	bhi.w	80099f8 <_strtod_l+0xba0>
 8009054:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009056:	900a      	str	r0, [sp, #40]	@ 0x28
 8009058:	2000      	movs	r0, #0
 800905a:	930c      	str	r3, [sp, #48]	@ 0x30
 800905c:	4605      	mov	r5, r0
 800905e:	3a30      	subs	r2, #48	@ 0x30
 8009060:	f100 0301 	add.w	r3, r0, #1
 8009064:	d018      	beq.n	8009098 <_strtod_l+0x240>
 8009066:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009068:	4419      	add	r1, r3
 800906a:	910a      	str	r1, [sp, #40]	@ 0x28
 800906c:	462e      	mov	r6, r5
 800906e:	f04f 0e0a 	mov.w	lr, #10
 8009072:	1c71      	adds	r1, r6, #1
 8009074:	eba1 0c05 	sub.w	ip, r1, r5
 8009078:	4563      	cmp	r3, ip
 800907a:	dc15      	bgt.n	80090a8 <_strtod_l+0x250>
 800907c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009080:	182b      	adds	r3, r5, r0
 8009082:	2b08      	cmp	r3, #8
 8009084:	f105 0501 	add.w	r5, r5, #1
 8009088:	4405      	add	r5, r0
 800908a:	dc1a      	bgt.n	80090c2 <_strtod_l+0x26a>
 800908c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800908e:	230a      	movs	r3, #10
 8009090:	fb03 2301 	mla	r3, r3, r1, r2
 8009094:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009096:	2300      	movs	r3, #0
 8009098:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800909a:	1c51      	adds	r1, r2, #1
 800909c:	9119      	str	r1, [sp, #100]	@ 0x64
 800909e:	7852      	ldrb	r2, [r2, #1]
 80090a0:	4618      	mov	r0, r3
 80090a2:	e7c5      	b.n	8009030 <_strtod_l+0x1d8>
 80090a4:	4648      	mov	r0, r9
 80090a6:	e7ce      	b.n	8009046 <_strtod_l+0x1ee>
 80090a8:	2e08      	cmp	r6, #8
 80090aa:	dc05      	bgt.n	80090b8 <_strtod_l+0x260>
 80090ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090ae:	fb0e f606 	mul.w	r6, lr, r6
 80090b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80090b4:	460e      	mov	r6, r1
 80090b6:	e7dc      	b.n	8009072 <_strtod_l+0x21a>
 80090b8:	2910      	cmp	r1, #16
 80090ba:	bfd8      	it	le
 80090bc:	fb0e f707 	mulle.w	r7, lr, r7
 80090c0:	e7f8      	b.n	80090b4 <_strtod_l+0x25c>
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	bfdc      	itt	le
 80090c6:	230a      	movle	r3, #10
 80090c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80090cc:	e7e3      	b.n	8009096 <_strtod_l+0x23e>
 80090ce:	2300      	movs	r3, #0
 80090d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d2:	2301      	movs	r3, #1
 80090d4:	e77a      	b.n	8008fcc <_strtod_l+0x174>
 80090d6:	f04f 0c00 	mov.w	ip, #0
 80090da:	1ca2      	adds	r2, r4, #2
 80090dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80090de:	78a2      	ldrb	r2, [r4, #2]
 80090e0:	e782      	b.n	8008fe8 <_strtod_l+0x190>
 80090e2:	f04f 0c01 	mov.w	ip, #1
 80090e6:	e7f8      	b.n	80090da <_strtod_l+0x282>
 80090e8:	0800b02c 	.word	0x0800b02c
 80090ec:	0800ae9d 	.word	0x0800ae9d
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090f6:	1c51      	adds	r1, r2, #1
 80090f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80090fa:	7852      	ldrb	r2, [r2, #1]
 80090fc:	2a30      	cmp	r2, #48	@ 0x30
 80090fe:	d0f9      	beq.n	80090f4 <_strtod_l+0x29c>
 8009100:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009104:	2908      	cmp	r1, #8
 8009106:	f63f af75 	bhi.w	8008ff4 <_strtod_l+0x19c>
 800910a:	3a30      	subs	r2, #48	@ 0x30
 800910c:	9209      	str	r2, [sp, #36]	@ 0x24
 800910e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009110:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009112:	f04f 080a 	mov.w	r8, #10
 8009116:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009118:	1c56      	adds	r6, r2, #1
 800911a:	9619      	str	r6, [sp, #100]	@ 0x64
 800911c:	7852      	ldrb	r2, [r2, #1]
 800911e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009122:	f1be 0f09 	cmp.w	lr, #9
 8009126:	d939      	bls.n	800919c <_strtod_l+0x344>
 8009128:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800912a:	1a76      	subs	r6, r6, r1
 800912c:	2e08      	cmp	r6, #8
 800912e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009132:	dc03      	bgt.n	800913c <_strtod_l+0x2e4>
 8009134:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009136:	4588      	cmp	r8, r1
 8009138:	bfa8      	it	ge
 800913a:	4688      	movge	r8, r1
 800913c:	f1bc 0f00 	cmp.w	ip, #0
 8009140:	d001      	beq.n	8009146 <_strtod_l+0x2ee>
 8009142:	f1c8 0800 	rsb	r8, r8, #0
 8009146:	2d00      	cmp	r5, #0
 8009148:	d14e      	bne.n	80091e8 <_strtod_l+0x390>
 800914a:	9908      	ldr	r1, [sp, #32]
 800914c:	4308      	orrs	r0, r1
 800914e:	f47f aebc 	bne.w	8008eca <_strtod_l+0x72>
 8009152:	2b00      	cmp	r3, #0
 8009154:	f47f aed4 	bne.w	8008f00 <_strtod_l+0xa8>
 8009158:	2a69      	cmp	r2, #105	@ 0x69
 800915a:	d028      	beq.n	80091ae <_strtod_l+0x356>
 800915c:	dc25      	bgt.n	80091aa <_strtod_l+0x352>
 800915e:	2a49      	cmp	r2, #73	@ 0x49
 8009160:	d025      	beq.n	80091ae <_strtod_l+0x356>
 8009162:	2a4e      	cmp	r2, #78	@ 0x4e
 8009164:	f47f aecc 	bne.w	8008f00 <_strtod_l+0xa8>
 8009168:	499a      	ldr	r1, [pc, #616]	@ (80093d4 <_strtod_l+0x57c>)
 800916a:	a819      	add	r0, sp, #100	@ 0x64
 800916c:	f001 f9e8 	bl	800a540 <__match>
 8009170:	2800      	cmp	r0, #0
 8009172:	f43f aec5 	beq.w	8008f00 <_strtod_l+0xa8>
 8009176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b28      	cmp	r3, #40	@ 0x28
 800917c:	d12e      	bne.n	80091dc <_strtod_l+0x384>
 800917e:	4996      	ldr	r1, [pc, #600]	@ (80093d8 <_strtod_l+0x580>)
 8009180:	aa1c      	add	r2, sp, #112	@ 0x70
 8009182:	a819      	add	r0, sp, #100	@ 0x64
 8009184:	f001 f9f0 	bl	800a568 <__hexnan>
 8009188:	2805      	cmp	r0, #5
 800918a:	d127      	bne.n	80091dc <_strtod_l+0x384>
 800918c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800918e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009192:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009196:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800919a:	e696      	b.n	8008eca <_strtod_l+0x72>
 800919c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800919e:	fb08 2101 	mla	r1, r8, r1, r2
 80091a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a8:	e7b5      	b.n	8009116 <_strtod_l+0x2be>
 80091aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80091ac:	e7da      	b.n	8009164 <_strtod_l+0x30c>
 80091ae:	498b      	ldr	r1, [pc, #556]	@ (80093dc <_strtod_l+0x584>)
 80091b0:	a819      	add	r0, sp, #100	@ 0x64
 80091b2:	f001 f9c5 	bl	800a540 <__match>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f43f aea2 	beq.w	8008f00 <_strtod_l+0xa8>
 80091bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091be:	4988      	ldr	r1, [pc, #544]	@ (80093e0 <_strtod_l+0x588>)
 80091c0:	3b01      	subs	r3, #1
 80091c2:	a819      	add	r0, sp, #100	@ 0x64
 80091c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091c6:	f001 f9bb 	bl	800a540 <__match>
 80091ca:	b910      	cbnz	r0, 80091d2 <_strtod_l+0x37a>
 80091cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ce:	3301      	adds	r3, #1
 80091d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80091d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80093f0 <_strtod_l+0x598>
 80091d6:	f04f 0a00 	mov.w	sl, #0
 80091da:	e676      	b.n	8008eca <_strtod_l+0x72>
 80091dc:	4881      	ldr	r0, [pc, #516]	@ (80093e4 <_strtod_l+0x58c>)
 80091de:	f000 ff03 	bl	8009fe8 <nan>
 80091e2:	ec5b ab10 	vmov	sl, fp, d0
 80091e6:	e670      	b.n	8008eca <_strtod_l+0x72>
 80091e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80091ec:	eba8 0303 	sub.w	r3, r8, r3
 80091f0:	f1b9 0f00 	cmp.w	r9, #0
 80091f4:	bf08      	it	eq
 80091f6:	46a9      	moveq	r9, r5
 80091f8:	2d10      	cmp	r5, #16
 80091fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fc:	462c      	mov	r4, r5
 80091fe:	bfa8      	it	ge
 8009200:	2410      	movge	r4, #16
 8009202:	f7f7 f97f 	bl	8000504 <__aeabi_ui2d>
 8009206:	2d09      	cmp	r5, #9
 8009208:	4682      	mov	sl, r0
 800920a:	468b      	mov	fp, r1
 800920c:	dc13      	bgt.n	8009236 <_strtod_l+0x3de>
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	f43f ae5a 	beq.w	8008eca <_strtod_l+0x72>
 8009216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009218:	dd78      	ble.n	800930c <_strtod_l+0x4b4>
 800921a:	2b16      	cmp	r3, #22
 800921c:	dc5f      	bgt.n	80092de <_strtod_l+0x486>
 800921e:	4972      	ldr	r1, [pc, #456]	@ (80093e8 <_strtod_l+0x590>)
 8009220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	f7f7 f9e4 	bl	80005f8 <__aeabi_dmul>
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	e649      	b.n	8008eca <_strtod_l+0x72>
 8009236:	4b6c      	ldr	r3, [pc, #432]	@ (80093e8 <_strtod_l+0x590>)
 8009238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800923c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009240:	f7f7 f9da 	bl	80005f8 <__aeabi_dmul>
 8009244:	4682      	mov	sl, r0
 8009246:	4638      	mov	r0, r7
 8009248:	468b      	mov	fp, r1
 800924a:	f7f7 f95b 	bl	8000504 <__aeabi_ui2d>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4650      	mov	r0, sl
 8009254:	4659      	mov	r1, fp
 8009256:	f7f7 f819 	bl	800028c <__adddf3>
 800925a:	2d0f      	cmp	r5, #15
 800925c:	4682      	mov	sl, r0
 800925e:	468b      	mov	fp, r1
 8009260:	ddd5      	ble.n	800920e <_strtod_l+0x3b6>
 8009262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009264:	1b2c      	subs	r4, r5, r4
 8009266:	441c      	add	r4, r3
 8009268:	2c00      	cmp	r4, #0
 800926a:	f340 8093 	ble.w	8009394 <_strtod_l+0x53c>
 800926e:	f014 030f 	ands.w	r3, r4, #15
 8009272:	d00a      	beq.n	800928a <_strtod_l+0x432>
 8009274:	495c      	ldr	r1, [pc, #368]	@ (80093e8 <_strtod_l+0x590>)
 8009276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800927a:	4652      	mov	r2, sl
 800927c:	465b      	mov	r3, fp
 800927e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009282:	f7f7 f9b9 	bl	80005f8 <__aeabi_dmul>
 8009286:	4682      	mov	sl, r0
 8009288:	468b      	mov	fp, r1
 800928a:	f034 040f 	bics.w	r4, r4, #15
 800928e:	d073      	beq.n	8009378 <_strtod_l+0x520>
 8009290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009294:	dd49      	ble.n	800932a <_strtod_l+0x4d2>
 8009296:	2400      	movs	r4, #0
 8009298:	46a0      	mov	r8, r4
 800929a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800929c:	46a1      	mov	r9, r4
 800929e:	9a05      	ldr	r2, [sp, #20]
 80092a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80093f0 <_strtod_l+0x598>
 80092a4:	2322      	movs	r3, #34	@ 0x22
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	f04f 0a00 	mov.w	sl, #0
 80092ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f ae0b 	beq.w	8008eca <_strtod_l+0x72>
 80092b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	f7ff f946 	bl	8008548 <_Bfree>
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	4649      	mov	r1, r9
 80092c0:	f7ff f942 	bl	8008548 <_Bfree>
 80092c4:	9805      	ldr	r0, [sp, #20]
 80092c6:	4641      	mov	r1, r8
 80092c8:	f7ff f93e 	bl	8008548 <_Bfree>
 80092cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	f7ff f93a 	bl	8008548 <_Bfree>
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	4621      	mov	r1, r4
 80092d8:	f7ff f936 	bl	8008548 <_Bfree>
 80092dc:	e5f5      	b.n	8008eca <_strtod_l+0x72>
 80092de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092e4:	4293      	cmp	r3, r2
 80092e6:	dbbc      	blt.n	8009262 <_strtod_l+0x40a>
 80092e8:	4c3f      	ldr	r4, [pc, #252]	@ (80093e8 <_strtod_l+0x590>)
 80092ea:	f1c5 050f 	rsb	r5, r5, #15
 80092ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009300:	1b5d      	subs	r5, r3, r5
 8009302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800930a:	e78f      	b.n	800922c <_strtod_l+0x3d4>
 800930c:	3316      	adds	r3, #22
 800930e:	dba8      	blt.n	8009262 <_strtod_l+0x40a>
 8009310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009312:	eba3 0808 	sub.w	r8, r3, r8
 8009316:	4b34      	ldr	r3, [pc, #208]	@ (80093e8 <_strtod_l+0x590>)
 8009318:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800931c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009320:	4650      	mov	r0, sl
 8009322:	4659      	mov	r1, fp
 8009324:	f7f7 fa92 	bl	800084c <__aeabi_ddiv>
 8009328:	e782      	b.n	8009230 <_strtod_l+0x3d8>
 800932a:	2300      	movs	r3, #0
 800932c:	4f2f      	ldr	r7, [pc, #188]	@ (80093ec <_strtod_l+0x594>)
 800932e:	1124      	asrs	r4, r4, #4
 8009330:	4650      	mov	r0, sl
 8009332:	4659      	mov	r1, fp
 8009334:	461e      	mov	r6, r3
 8009336:	2c01      	cmp	r4, #1
 8009338:	dc21      	bgt.n	800937e <_strtod_l+0x526>
 800933a:	b10b      	cbz	r3, 8009340 <_strtod_l+0x4e8>
 800933c:	4682      	mov	sl, r0
 800933e:	468b      	mov	fp, r1
 8009340:	492a      	ldr	r1, [pc, #168]	@ (80093ec <_strtod_l+0x594>)
 8009342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009352:	f7f7 f951 	bl	80005f8 <__aeabi_dmul>
 8009356:	4b26      	ldr	r3, [pc, #152]	@ (80093f0 <_strtod_l+0x598>)
 8009358:	460a      	mov	r2, r1
 800935a:	400b      	ands	r3, r1
 800935c:	4925      	ldr	r1, [pc, #148]	@ (80093f4 <_strtod_l+0x59c>)
 800935e:	428b      	cmp	r3, r1
 8009360:	4682      	mov	sl, r0
 8009362:	d898      	bhi.n	8009296 <_strtod_l+0x43e>
 8009364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009368:	428b      	cmp	r3, r1
 800936a:	bf86      	itte	hi
 800936c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80093f8 <_strtod_l+0x5a0>
 8009370:	f04f 3aff 	movhi.w	sl, #4294967295
 8009374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009378:	2300      	movs	r3, #0
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	e076      	b.n	800946c <_strtod_l+0x614>
 800937e:	07e2      	lsls	r2, r4, #31
 8009380:	d504      	bpl.n	800938c <_strtod_l+0x534>
 8009382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009386:	f7f7 f937 	bl	80005f8 <__aeabi_dmul>
 800938a:	2301      	movs	r3, #1
 800938c:	3601      	adds	r6, #1
 800938e:	1064      	asrs	r4, r4, #1
 8009390:	3708      	adds	r7, #8
 8009392:	e7d0      	b.n	8009336 <_strtod_l+0x4de>
 8009394:	d0f0      	beq.n	8009378 <_strtod_l+0x520>
 8009396:	4264      	negs	r4, r4
 8009398:	f014 020f 	ands.w	r2, r4, #15
 800939c:	d00a      	beq.n	80093b4 <_strtod_l+0x55c>
 800939e:	4b12      	ldr	r3, [pc, #72]	@ (80093e8 <_strtod_l+0x590>)
 80093a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093a4:	4650      	mov	r0, sl
 80093a6:	4659      	mov	r1, fp
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f7 fa4e 	bl	800084c <__aeabi_ddiv>
 80093b0:	4682      	mov	sl, r0
 80093b2:	468b      	mov	fp, r1
 80093b4:	1124      	asrs	r4, r4, #4
 80093b6:	d0df      	beq.n	8009378 <_strtod_l+0x520>
 80093b8:	2c1f      	cmp	r4, #31
 80093ba:	dd1f      	ble.n	80093fc <_strtod_l+0x5a4>
 80093bc:	2400      	movs	r4, #0
 80093be:	46a0      	mov	r8, r4
 80093c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093c2:	46a1      	mov	r9, r4
 80093c4:	9a05      	ldr	r2, [sp, #20]
 80093c6:	2322      	movs	r3, #34	@ 0x22
 80093c8:	f04f 0a00 	mov.w	sl, #0
 80093cc:	f04f 0b00 	mov.w	fp, #0
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e76b      	b.n	80092ac <_strtod_l+0x454>
 80093d4:	0800acf5 	.word	0x0800acf5
 80093d8:	0800b018 	.word	0x0800b018
 80093dc:	0800aced 	.word	0x0800aced
 80093e0:	0800add1 	.word	0x0800add1
 80093e4:	0800adcd 	.word	0x0800adcd
 80093e8:	0800af50 	.word	0x0800af50
 80093ec:	0800af28 	.word	0x0800af28
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	7ca00000 	.word	0x7ca00000
 80093f8:	7fefffff 	.word	0x7fefffff
 80093fc:	f014 0310 	ands.w	r3, r4, #16
 8009400:	bf18      	it	ne
 8009402:	236a      	movne	r3, #106	@ 0x6a
 8009404:	4ea9      	ldr	r6, [pc, #676]	@ (80096ac <_strtod_l+0x854>)
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	4650      	mov	r0, sl
 800940a:	4659      	mov	r1, fp
 800940c:	2300      	movs	r3, #0
 800940e:	07e7      	lsls	r7, r4, #31
 8009410:	d504      	bpl.n	800941c <_strtod_l+0x5c4>
 8009412:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	2301      	movs	r3, #1
 800941c:	1064      	asrs	r4, r4, #1
 800941e:	f106 0608 	add.w	r6, r6, #8
 8009422:	d1f4      	bne.n	800940e <_strtod_l+0x5b6>
 8009424:	b10b      	cbz	r3, 800942a <_strtod_l+0x5d2>
 8009426:	4682      	mov	sl, r0
 8009428:	468b      	mov	fp, r1
 800942a:	9b08      	ldr	r3, [sp, #32]
 800942c:	b1b3      	cbz	r3, 800945c <_strtod_l+0x604>
 800942e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009432:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009436:	2b00      	cmp	r3, #0
 8009438:	4659      	mov	r1, fp
 800943a:	dd0f      	ble.n	800945c <_strtod_l+0x604>
 800943c:	2b1f      	cmp	r3, #31
 800943e:	dd56      	ble.n	80094ee <_strtod_l+0x696>
 8009440:	2b34      	cmp	r3, #52	@ 0x34
 8009442:	bfde      	ittt	le
 8009444:	f04f 33ff 	movle.w	r3, #4294967295
 8009448:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800944c:	4093      	lslle	r3, r2
 800944e:	f04f 0a00 	mov.w	sl, #0
 8009452:	bfcc      	ite	gt
 8009454:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009458:	ea03 0b01 	andle.w	fp, r3, r1
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	4650      	mov	r0, sl
 8009462:	4659      	mov	r1, fp
 8009464:	f7f7 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009468:	2800      	cmp	r0, #0
 800946a:	d1a7      	bne.n	80093bc <_strtod_l+0x564>
 800946c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	462b      	mov	r3, r5
 8009476:	464a      	mov	r2, r9
 8009478:	f7ff f8ce 	bl	8008618 <__s2b>
 800947c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f af09 	beq.w	8009296 <_strtod_l+0x43e>
 8009484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009488:	2a00      	cmp	r2, #0
 800948a:	eba3 0308 	sub.w	r3, r3, r8
 800948e:	bfa8      	it	ge
 8009490:	2300      	movge	r3, #0
 8009492:	9312      	str	r3, [sp, #72]	@ 0x48
 8009494:	2400      	movs	r4, #0
 8009496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800949a:	9316      	str	r3, [sp, #88]	@ 0x58
 800949c:	46a0      	mov	r8, r4
 800949e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094a0:	9805      	ldr	r0, [sp, #20]
 80094a2:	6859      	ldr	r1, [r3, #4]
 80094a4:	f7ff f810 	bl	80084c8 <_Balloc>
 80094a8:	4681      	mov	r9, r0
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f43f aef7 	beq.w	800929e <_strtod_l+0x446>
 80094b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	3202      	adds	r2, #2
 80094b6:	f103 010c 	add.w	r1, r3, #12
 80094ba:	0092      	lsls	r2, r2, #2
 80094bc:	300c      	adds	r0, #12
 80094be:	f000 fd83 	bl	8009fc8 <memcpy>
 80094c2:	ec4b ab10 	vmov	d0, sl, fp
 80094c6:	9805      	ldr	r0, [sp, #20]
 80094c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80094ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80094cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094d0:	f7ff fbd6 	bl	8008c80 <__d2b>
 80094d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f aee1 	beq.w	800929e <_strtod_l+0x446>
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	2101      	movs	r1, #1
 80094e0:	f7ff f930 	bl	8008744 <__i2b>
 80094e4:	4680      	mov	r8, r0
 80094e6:	b948      	cbnz	r0, 80094fc <_strtod_l+0x6a4>
 80094e8:	f04f 0800 	mov.w	r8, #0
 80094ec:	e6d7      	b.n	800929e <_strtod_l+0x446>
 80094ee:	f04f 32ff 	mov.w	r2, #4294967295
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	ea03 0a0a 	and.w	sl, r3, sl
 80094fa:	e7af      	b.n	800945c <_strtod_l+0x604>
 80094fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009500:	2d00      	cmp	r5, #0
 8009502:	bfab      	itete	ge
 8009504:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009506:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009508:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800950a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800950c:	bfac      	ite	ge
 800950e:	18ef      	addge	r7, r5, r3
 8009510:	1b5e      	sublt	r6, r3, r5
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	1aed      	subs	r5, r5, r3
 8009516:	4415      	add	r5, r2
 8009518:	4b65      	ldr	r3, [pc, #404]	@ (80096b0 <_strtod_l+0x858>)
 800951a:	3d01      	subs	r5, #1
 800951c:	429d      	cmp	r5, r3
 800951e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009522:	da50      	bge.n	80095c6 <_strtod_l+0x76e>
 8009524:	1b5b      	subs	r3, r3, r5
 8009526:	2b1f      	cmp	r3, #31
 8009528:	eba2 0203 	sub.w	r2, r2, r3
 800952c:	f04f 0101 	mov.w	r1, #1
 8009530:	dc3d      	bgt.n	80095ae <_strtod_l+0x756>
 8009532:	fa01 f303 	lsl.w	r3, r1, r3
 8009536:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009538:	2300      	movs	r3, #0
 800953a:	9310      	str	r3, [sp, #64]	@ 0x40
 800953c:	18bd      	adds	r5, r7, r2
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	42af      	cmp	r7, r5
 8009542:	4416      	add	r6, r2
 8009544:	441e      	add	r6, r3
 8009546:	463b      	mov	r3, r7
 8009548:	bfa8      	it	ge
 800954a:	462b      	movge	r3, r5
 800954c:	42b3      	cmp	r3, r6
 800954e:	bfa8      	it	ge
 8009550:	4633      	movge	r3, r6
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfc2      	ittt	gt
 8009556:	1aed      	subgt	r5, r5, r3
 8009558:	1af6      	subgt	r6, r6, r3
 800955a:	1aff      	subgt	r7, r7, r3
 800955c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800955e:	2b00      	cmp	r3, #0
 8009560:	dd16      	ble.n	8009590 <_strtod_l+0x738>
 8009562:	4641      	mov	r1, r8
 8009564:	9805      	ldr	r0, [sp, #20]
 8009566:	461a      	mov	r2, r3
 8009568:	f7ff f9a4 	bl	80088b4 <__pow5mult>
 800956c:	4680      	mov	r8, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	d0ba      	beq.n	80094e8 <_strtod_l+0x690>
 8009572:	4601      	mov	r1, r0
 8009574:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f7ff f8fa 	bl	8008770 <__multiply>
 800957c:	900a      	str	r0, [sp, #40]	@ 0x28
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f ae8d 	beq.w	800929e <_strtod_l+0x446>
 8009584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7fe ffde 	bl	8008548 <_Bfree>
 800958c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800958e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009590:	2d00      	cmp	r5, #0
 8009592:	dc1d      	bgt.n	80095d0 <_strtod_l+0x778>
 8009594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd23      	ble.n	80095e2 <_strtod_l+0x78a>
 800959a:	4649      	mov	r1, r9
 800959c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f988 	bl	80088b4 <__pow5mult>
 80095a4:	4681      	mov	r9, r0
 80095a6:	b9e0      	cbnz	r0, 80095e2 <_strtod_l+0x78a>
 80095a8:	f04f 0900 	mov.w	r9, #0
 80095ac:	e677      	b.n	800929e <_strtod_l+0x446>
 80095ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095ba:	35e2      	adds	r5, #226	@ 0xe2
 80095bc:	fa01 f305 	lsl.w	r3, r1, r5
 80095c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095c4:	e7ba      	b.n	800953c <_strtod_l+0x6e4>
 80095c6:	2300      	movs	r3, #0
 80095c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095ca:	2301      	movs	r3, #1
 80095cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095ce:	e7b5      	b.n	800953c <_strtod_l+0x6e4>
 80095d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d2:	9805      	ldr	r0, [sp, #20]
 80095d4:	462a      	mov	r2, r5
 80095d6:	f7ff f9c7 	bl	8008968 <__lshift>
 80095da:	901a      	str	r0, [sp, #104]	@ 0x68
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1d9      	bne.n	8009594 <_strtod_l+0x73c>
 80095e0:	e65d      	b.n	800929e <_strtod_l+0x446>
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	dd07      	ble.n	80095f6 <_strtod_l+0x79e>
 80095e6:	4649      	mov	r1, r9
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	4632      	mov	r2, r6
 80095ec:	f7ff f9bc 	bl	8008968 <__lshift>
 80095f0:	4681      	mov	r9, r0
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d0d8      	beq.n	80095a8 <_strtod_l+0x750>
 80095f6:	2f00      	cmp	r7, #0
 80095f8:	dd08      	ble.n	800960c <_strtod_l+0x7b4>
 80095fa:	4641      	mov	r1, r8
 80095fc:	9805      	ldr	r0, [sp, #20]
 80095fe:	463a      	mov	r2, r7
 8009600:	f7ff f9b2 	bl	8008968 <__lshift>
 8009604:	4680      	mov	r8, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f ae49 	beq.w	800929e <_strtod_l+0x446>
 800960c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800960e:	9805      	ldr	r0, [sp, #20]
 8009610:	464a      	mov	r2, r9
 8009612:	f7ff fa31 	bl	8008a78 <__mdiff>
 8009616:	4604      	mov	r4, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	f43f ae40 	beq.w	800929e <_strtod_l+0x446>
 800961e:	68c3      	ldr	r3, [r0, #12]
 8009620:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009622:	2300      	movs	r3, #0
 8009624:	60c3      	str	r3, [r0, #12]
 8009626:	4641      	mov	r1, r8
 8009628:	f7ff fa0a 	bl	8008a40 <__mcmp>
 800962c:	2800      	cmp	r0, #0
 800962e:	da45      	bge.n	80096bc <_strtod_l+0x864>
 8009630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009632:	ea53 030a 	orrs.w	r3, r3, sl
 8009636:	d16b      	bne.n	8009710 <_strtod_l+0x8b8>
 8009638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800963c:	2b00      	cmp	r3, #0
 800963e:	d167      	bne.n	8009710 <_strtod_l+0x8b8>
 8009640:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009644:	0d1b      	lsrs	r3, r3, #20
 8009646:	051b      	lsls	r3, r3, #20
 8009648:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800964c:	d960      	bls.n	8009710 <_strtod_l+0x8b8>
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	b913      	cbnz	r3, 8009658 <_strtod_l+0x800>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	2b01      	cmp	r3, #1
 8009656:	dd5b      	ble.n	8009710 <_strtod_l+0x8b8>
 8009658:	4621      	mov	r1, r4
 800965a:	2201      	movs	r2, #1
 800965c:	9805      	ldr	r0, [sp, #20]
 800965e:	f7ff f983 	bl	8008968 <__lshift>
 8009662:	4641      	mov	r1, r8
 8009664:	4604      	mov	r4, r0
 8009666:	f7ff f9eb 	bl	8008a40 <__mcmp>
 800966a:	2800      	cmp	r0, #0
 800966c:	dd50      	ble.n	8009710 <_strtod_l+0x8b8>
 800966e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009672:	9a08      	ldr	r2, [sp, #32]
 8009674:	0d1b      	lsrs	r3, r3, #20
 8009676:	051b      	lsls	r3, r3, #20
 8009678:	2a00      	cmp	r2, #0
 800967a:	d06a      	beq.n	8009752 <_strtod_l+0x8fa>
 800967c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009680:	d867      	bhi.n	8009752 <_strtod_l+0x8fa>
 8009682:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009686:	f67f ae9d 	bls.w	80093c4 <_strtod_l+0x56c>
 800968a:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <_strtod_l+0x85c>)
 800968c:	4650      	mov	r0, sl
 800968e:	4659      	mov	r1, fp
 8009690:	2200      	movs	r2, #0
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <_strtod_l+0x860>)
 8009698:	400b      	ands	r3, r1
 800969a:	4682      	mov	sl, r0
 800969c:	468b      	mov	fp, r1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f47f ae08 	bne.w	80092b4 <_strtod_l+0x45c>
 80096a4:	9a05      	ldr	r2, [sp, #20]
 80096a6:	2322      	movs	r3, #34	@ 0x22
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	e603      	b.n	80092b4 <_strtod_l+0x45c>
 80096ac:	0800b040 	.word	0x0800b040
 80096b0:	fffffc02 	.word	0xfffffc02
 80096b4:	39500000 	.word	0x39500000
 80096b8:	7ff00000 	.word	0x7ff00000
 80096bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80096c0:	d165      	bne.n	800978e <_strtod_l+0x936>
 80096c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096c8:	b35a      	cbz	r2, 8009722 <_strtod_l+0x8ca>
 80096ca:	4a9f      	ldr	r2, [pc, #636]	@ (8009948 <_strtod_l+0xaf0>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d12b      	bne.n	8009728 <_strtod_l+0x8d0>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	4651      	mov	r1, sl
 80096d4:	b303      	cbz	r3, 8009718 <_strtod_l+0x8c0>
 80096d6:	4b9d      	ldr	r3, [pc, #628]	@ (800994c <_strtod_l+0xaf4>)
 80096d8:	465a      	mov	r2, fp
 80096da:	4013      	ands	r3, r2
 80096dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295
 80096e4:	d81b      	bhi.n	800971e <_strtod_l+0x8c6>
 80096e6:	0d1b      	lsrs	r3, r3, #20
 80096e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096ec:	fa02 f303 	lsl.w	r3, r2, r3
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d119      	bne.n	8009728 <_strtod_l+0x8d0>
 80096f4:	4b96      	ldr	r3, [pc, #600]	@ (8009950 <_strtod_l+0xaf8>)
 80096f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d102      	bne.n	8009702 <_strtod_l+0x8aa>
 80096fc:	3101      	adds	r1, #1
 80096fe:	f43f adce 	beq.w	800929e <_strtod_l+0x446>
 8009702:	4b92      	ldr	r3, [pc, #584]	@ (800994c <_strtod_l+0xaf4>)
 8009704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009706:	401a      	ands	r2, r3
 8009708:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800970c:	f04f 0a00 	mov.w	sl, #0
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1b9      	bne.n	800968a <_strtod_l+0x832>
 8009716:	e5cd      	b.n	80092b4 <_strtod_l+0x45c>
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	e7e8      	b.n	80096f0 <_strtod_l+0x898>
 800971e:	4613      	mov	r3, r2
 8009720:	e7e6      	b.n	80096f0 <_strtod_l+0x898>
 8009722:	ea53 030a 	orrs.w	r3, r3, sl
 8009726:	d0a2      	beq.n	800966e <_strtod_l+0x816>
 8009728:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800972a:	b1db      	cbz	r3, 8009764 <_strtod_l+0x90c>
 800972c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800972e:	4213      	tst	r3, r2
 8009730:	d0ee      	beq.n	8009710 <_strtod_l+0x8b8>
 8009732:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009734:	9a08      	ldr	r2, [sp, #32]
 8009736:	4650      	mov	r0, sl
 8009738:	4659      	mov	r1, fp
 800973a:	b1bb      	cbz	r3, 800976c <_strtod_l+0x914>
 800973c:	f7ff fb6e 	bl	8008e1c <sulp>
 8009740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009744:	ec53 2b10 	vmov	r2, r3, d0
 8009748:	f7f6 fda0 	bl	800028c <__adddf3>
 800974c:	4682      	mov	sl, r0
 800974e:	468b      	mov	fp, r1
 8009750:	e7de      	b.n	8009710 <_strtod_l+0x8b8>
 8009752:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009756:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800975a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800975e:	f04f 3aff 	mov.w	sl, #4294967295
 8009762:	e7d5      	b.n	8009710 <_strtod_l+0x8b8>
 8009764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009766:	ea13 0f0a 	tst.w	r3, sl
 800976a:	e7e1      	b.n	8009730 <_strtod_l+0x8d8>
 800976c:	f7ff fb56 	bl	8008e1c <sulp>
 8009770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009774:	ec53 2b10 	vmov	r2, r3, d0
 8009778:	f7f6 fd86 	bl	8000288 <__aeabi_dsub>
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4682      	mov	sl, r0
 8009782:	468b      	mov	fp, r1
 8009784:	f7f7 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009788:	2800      	cmp	r0, #0
 800978a:	d0c1      	beq.n	8009710 <_strtod_l+0x8b8>
 800978c:	e61a      	b.n	80093c4 <_strtod_l+0x56c>
 800978e:	4641      	mov	r1, r8
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff facd 	bl	8008d30 <__ratio>
 8009796:	ec57 6b10 	vmov	r6, r7, d0
 800979a:	2200      	movs	r2, #0
 800979c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f9a4 	bl	8000af0 <__aeabi_dcmple>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d06f      	beq.n	800988c <_strtod_l+0xa34>
 80097ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d17a      	bne.n	80098a8 <_strtod_l+0xa50>
 80097b2:	f1ba 0f00 	cmp.w	sl, #0
 80097b6:	d158      	bne.n	800986a <_strtod_l+0xa12>
 80097b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d15a      	bne.n	8009878 <_strtod_l+0xa20>
 80097c2:	4b64      	ldr	r3, [pc, #400]	@ (8009954 <_strtod_l+0xafc>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	f7f7 f987 	bl	8000adc <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d159      	bne.n	8009886 <_strtod_l+0xa2e>
 80097d2:	4630      	mov	r0, r6
 80097d4:	4639      	mov	r1, r7
 80097d6:	4b60      	ldr	r3, [pc, #384]	@ (8009958 <_strtod_l+0xb00>)
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff0d 	bl	80005f8 <__aeabi_dmul>
 80097de:	4606      	mov	r6, r0
 80097e0:	460f      	mov	r7, r1
 80097e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097e6:	9606      	str	r6, [sp, #24]
 80097e8:	9307      	str	r3, [sp, #28]
 80097ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097ee:	4d57      	ldr	r5, [pc, #348]	@ (800994c <_strtod_l+0xaf4>)
 80097f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f6:	401d      	ands	r5, r3
 80097f8:	4b58      	ldr	r3, [pc, #352]	@ (800995c <_strtod_l+0xb04>)
 80097fa:	429d      	cmp	r5, r3
 80097fc:	f040 80b2 	bne.w	8009964 <_strtod_l+0xb0c>
 8009800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009802:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009806:	ec4b ab10 	vmov	d0, sl, fp
 800980a:	f7ff f9c9 	bl	8008ba0 <__ulp>
 800980e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009812:	ec51 0b10 	vmov	r0, r1, d0
 8009816:	f7f6 feef 	bl	80005f8 <__aeabi_dmul>
 800981a:	4652      	mov	r2, sl
 800981c:	465b      	mov	r3, fp
 800981e:	f7f6 fd35 	bl	800028c <__adddf3>
 8009822:	460b      	mov	r3, r1
 8009824:	4949      	ldr	r1, [pc, #292]	@ (800994c <_strtod_l+0xaf4>)
 8009826:	4a4e      	ldr	r2, [pc, #312]	@ (8009960 <_strtod_l+0xb08>)
 8009828:	4019      	ands	r1, r3
 800982a:	4291      	cmp	r1, r2
 800982c:	4682      	mov	sl, r0
 800982e:	d942      	bls.n	80098b6 <_strtod_l+0xa5e>
 8009830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009832:	4b47      	ldr	r3, [pc, #284]	@ (8009950 <_strtod_l+0xaf8>)
 8009834:	429a      	cmp	r2, r3
 8009836:	d103      	bne.n	8009840 <_strtod_l+0x9e8>
 8009838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800983a:	3301      	adds	r3, #1
 800983c:	f43f ad2f 	beq.w	800929e <_strtod_l+0x446>
 8009840:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009950 <_strtod_l+0xaf8>
 8009844:	f04f 3aff 	mov.w	sl, #4294967295
 8009848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800984a:	9805      	ldr	r0, [sp, #20]
 800984c:	f7fe fe7c 	bl	8008548 <_Bfree>
 8009850:	9805      	ldr	r0, [sp, #20]
 8009852:	4649      	mov	r1, r9
 8009854:	f7fe fe78 	bl	8008548 <_Bfree>
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	4641      	mov	r1, r8
 800985c:	f7fe fe74 	bl	8008548 <_Bfree>
 8009860:	9805      	ldr	r0, [sp, #20]
 8009862:	4621      	mov	r1, r4
 8009864:	f7fe fe70 	bl	8008548 <_Bfree>
 8009868:	e619      	b.n	800949e <_strtod_l+0x646>
 800986a:	f1ba 0f01 	cmp.w	sl, #1
 800986e:	d103      	bne.n	8009878 <_strtod_l+0xa20>
 8009870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	f43f ada6 	beq.w	80093c4 <_strtod_l+0x56c>
 8009878:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009928 <_strtod_l+0xad0>
 800987c:	4f35      	ldr	r7, [pc, #212]	@ (8009954 <_strtod_l+0xafc>)
 800987e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009882:	2600      	movs	r6, #0
 8009884:	e7b1      	b.n	80097ea <_strtod_l+0x992>
 8009886:	4f34      	ldr	r7, [pc, #208]	@ (8009958 <_strtod_l+0xb00>)
 8009888:	2600      	movs	r6, #0
 800988a:	e7aa      	b.n	80097e2 <_strtod_l+0x98a>
 800988c:	4b32      	ldr	r3, [pc, #200]	@ (8009958 <_strtod_l+0xb00>)
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	2200      	movs	r2, #0
 8009894:	f7f6 feb0 	bl	80005f8 <__aeabi_dmul>
 8009898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989a:	4606      	mov	r6, r0
 800989c:	460f      	mov	r7, r1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d09f      	beq.n	80097e2 <_strtod_l+0x98a>
 80098a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098a6:	e7a0      	b.n	80097ea <_strtod_l+0x992>
 80098a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009930 <_strtod_l+0xad8>
 80098ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098b0:	ec57 6b17 	vmov	r6, r7, d7
 80098b4:	e799      	b.n	80097ea <_strtod_l+0x992>
 80098b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1c1      	bne.n	8009848 <_strtod_l+0x9f0>
 80098c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098c8:	0d1b      	lsrs	r3, r3, #20
 80098ca:	051b      	lsls	r3, r3, #20
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d1bb      	bne.n	8009848 <_strtod_l+0x9f0>
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f7 f9f0 	bl	8000cb8 <__aeabi_d2lz>
 80098d8:	f7f6 fe60 	bl	800059c <__aeabi_l2d>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f6 fcd0 	bl	8000288 <__aeabi_dsub>
 80098e8:	460b      	mov	r3, r1
 80098ea:	4602      	mov	r2, r0
 80098ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098f6:	ea46 060a 	orr.w	r6, r6, sl
 80098fa:	431e      	orrs	r6, r3
 80098fc:	d06f      	beq.n	80099de <_strtod_l+0xb86>
 80098fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009938 <_strtod_l+0xae0>)
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f7f7 f8ea 	bl	8000adc <__aeabi_dcmplt>
 8009908:	2800      	cmp	r0, #0
 800990a:	f47f acd3 	bne.w	80092b4 <_strtod_l+0x45c>
 800990e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009940 <_strtod_l+0xae8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009918:	f7f7 f8fe 	bl	8000b18 <__aeabi_dcmpgt>
 800991c:	2800      	cmp	r0, #0
 800991e:	d093      	beq.n	8009848 <_strtod_l+0x9f0>
 8009920:	e4c8      	b.n	80092b4 <_strtod_l+0x45c>
 8009922:	bf00      	nop
 8009924:	f3af 8000 	nop.w
 8009928:	00000000 	.word	0x00000000
 800992c:	bff00000 	.word	0xbff00000
 8009930:	00000000 	.word	0x00000000
 8009934:	3ff00000 	.word	0x3ff00000
 8009938:	94a03595 	.word	0x94a03595
 800993c:	3fdfffff 	.word	0x3fdfffff
 8009940:	35afe535 	.word	0x35afe535
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	000fffff 	.word	0x000fffff
 800994c:	7ff00000 	.word	0x7ff00000
 8009950:	7fefffff 	.word	0x7fefffff
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	3fe00000 	.word	0x3fe00000
 800995c:	7fe00000 	.word	0x7fe00000
 8009960:	7c9fffff 	.word	0x7c9fffff
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	b323      	cbz	r3, 80099b2 <_strtod_l+0xb5a>
 8009968:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800996c:	d821      	bhi.n	80099b2 <_strtod_l+0xb5a>
 800996e:	a328      	add	r3, pc, #160	@ (adr r3, 8009a10 <_strtod_l+0xbb8>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f7 f8ba 	bl	8000af0 <__aeabi_dcmple>
 800997c:	b1a0      	cbz	r0, 80099a8 <_strtod_l+0xb50>
 800997e:	4639      	mov	r1, r7
 8009980:	4630      	mov	r0, r6
 8009982:	f7f7 f911 	bl	8000ba8 <__aeabi_d2uiz>
 8009986:	2801      	cmp	r0, #1
 8009988:	bf38      	it	cc
 800998a:	2001      	movcc	r0, #1
 800998c:	f7f6 fdba 	bl	8000504 <__aeabi_ui2d>
 8009990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	b9fb      	cbnz	r3, 80099d8 <_strtod_l+0xb80>
 8009998:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800999c:	9014      	str	r0, [sp, #80]	@ 0x50
 800999e:	9315      	str	r3, [sp, #84]	@ 0x54
 80099a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099ae:	1b5b      	subs	r3, r3, r5
 80099b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80099b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099ba:	f7ff f8f1 	bl	8008ba0 <__ulp>
 80099be:	4650      	mov	r0, sl
 80099c0:	ec53 2b10 	vmov	r2, r3, d0
 80099c4:	4659      	mov	r1, fp
 80099c6:	f7f6 fe17 	bl	80005f8 <__aeabi_dmul>
 80099ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099ce:	f7f6 fc5d 	bl	800028c <__adddf3>
 80099d2:	4682      	mov	sl, r0
 80099d4:	468b      	mov	fp, r1
 80099d6:	e770      	b.n	80098ba <_strtod_l+0xa62>
 80099d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099dc:	e7e0      	b.n	80099a0 <_strtod_l+0xb48>
 80099de:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a18 <_strtod_l+0xbc0>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f7f7 f87a 	bl	8000adc <__aeabi_dcmplt>
 80099e8:	e798      	b.n	800991c <_strtod_l+0xac4>
 80099ea:	2300      	movs	r3, #0
 80099ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80099ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	f7ff ba6d 	b.w	8008ed2 <_strtod_l+0x7a>
 80099f8:	2a65      	cmp	r2, #101	@ 0x65
 80099fa:	f43f ab68 	beq.w	80090ce <_strtod_l+0x276>
 80099fe:	2a45      	cmp	r2, #69	@ 0x45
 8009a00:	f43f ab65 	beq.w	80090ce <_strtod_l+0x276>
 8009a04:	2301      	movs	r3, #1
 8009a06:	f7ff bba0 	b.w	800914a <_strtod_l+0x2f2>
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w
 8009a10:	ffc00000 	.word	0xffc00000
 8009a14:	41dfffff 	.word	0x41dfffff
 8009a18:	94a03595 	.word	0x94a03595
 8009a1c:	3fcfffff 	.word	0x3fcfffff

08009a20 <_strtod_r>:
 8009a20:	4b01      	ldr	r3, [pc, #4]	@ (8009a28 <_strtod_r+0x8>)
 8009a22:	f7ff ba19 	b.w	8008e58 <_strtod_l>
 8009a26:	bf00      	nop
 8009a28:	20000068 	.word	0x20000068

08009a2c <_strtol_l.isra.0>:
 8009a2c:	2b24      	cmp	r3, #36	@ 0x24
 8009a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a32:	4686      	mov	lr, r0
 8009a34:	4690      	mov	r8, r2
 8009a36:	d801      	bhi.n	8009a3c <_strtol_l.isra.0+0x10>
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d106      	bne.n	8009a4a <_strtol_l.isra.0+0x1e>
 8009a3c:	f7fd fd9a 	bl	8007574 <__errno>
 8009a40:	2316      	movs	r3, #22
 8009a42:	6003      	str	r3, [r0, #0]
 8009a44:	2000      	movs	r0, #0
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	4834      	ldr	r0, [pc, #208]	@ (8009b1c <_strtol_l.isra.0+0xf0>)
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	462a      	mov	r2, r5
 8009a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a54:	5d06      	ldrb	r6, [r0, r4]
 8009a56:	f016 0608 	ands.w	r6, r6, #8
 8009a5a:	d1f8      	bne.n	8009a4e <_strtol_l.isra.0+0x22>
 8009a5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a5e:	d110      	bne.n	8009a82 <_strtol_l.isra.0+0x56>
 8009a60:	782c      	ldrb	r4, [r5, #0]
 8009a62:	2601      	movs	r6, #1
 8009a64:	1c95      	adds	r5, r2, #2
 8009a66:	f033 0210 	bics.w	r2, r3, #16
 8009a6a:	d115      	bne.n	8009a98 <_strtol_l.isra.0+0x6c>
 8009a6c:	2c30      	cmp	r4, #48	@ 0x30
 8009a6e:	d10d      	bne.n	8009a8c <_strtol_l.isra.0+0x60>
 8009a70:	782a      	ldrb	r2, [r5, #0]
 8009a72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a76:	2a58      	cmp	r2, #88	@ 0x58
 8009a78:	d108      	bne.n	8009a8c <_strtol_l.isra.0+0x60>
 8009a7a:	786c      	ldrb	r4, [r5, #1]
 8009a7c:	3502      	adds	r5, #2
 8009a7e:	2310      	movs	r3, #16
 8009a80:	e00a      	b.n	8009a98 <_strtol_l.isra.0+0x6c>
 8009a82:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a84:	bf04      	itt	eq
 8009a86:	782c      	ldrbeq	r4, [r5, #0]
 8009a88:	1c95      	addeq	r5, r2, #2
 8009a8a:	e7ec      	b.n	8009a66 <_strtol_l.isra.0+0x3a>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1f6      	bne.n	8009a7e <_strtol_l.isra.0+0x52>
 8009a90:	2c30      	cmp	r4, #48	@ 0x30
 8009a92:	bf14      	ite	ne
 8009a94:	230a      	movne	r3, #10
 8009a96:	2308      	moveq	r3, #8
 8009a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ab0:	2f09      	cmp	r7, #9
 8009ab2:	d80f      	bhi.n	8009ad4 <_strtol_l.isra.0+0xa8>
 8009ab4:	463c      	mov	r4, r7
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	dd1b      	ble.n	8009af2 <_strtol_l.isra.0+0xc6>
 8009aba:	1c57      	adds	r7, r2, #1
 8009abc:	d007      	beq.n	8009ace <_strtol_l.isra.0+0xa2>
 8009abe:	4581      	cmp	r9, r0
 8009ac0:	d314      	bcc.n	8009aec <_strtol_l.isra.0+0xc0>
 8009ac2:	d101      	bne.n	8009ac8 <_strtol_l.isra.0+0x9c>
 8009ac4:	45a2      	cmp	sl, r4
 8009ac6:	db11      	blt.n	8009aec <_strtol_l.isra.0+0xc0>
 8009ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8009acc:	2201      	movs	r2, #1
 8009ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad2:	e7eb      	b.n	8009aac <_strtol_l.isra.0+0x80>
 8009ad4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ad8:	2f19      	cmp	r7, #25
 8009ada:	d801      	bhi.n	8009ae0 <_strtol_l.isra.0+0xb4>
 8009adc:	3c37      	subs	r4, #55	@ 0x37
 8009ade:	e7ea      	b.n	8009ab6 <_strtol_l.isra.0+0x8a>
 8009ae0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ae4:	2f19      	cmp	r7, #25
 8009ae6:	d804      	bhi.n	8009af2 <_strtol_l.isra.0+0xc6>
 8009ae8:	3c57      	subs	r4, #87	@ 0x57
 8009aea:	e7e4      	b.n	8009ab6 <_strtol_l.isra.0+0x8a>
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	e7ed      	b.n	8009ace <_strtol_l.isra.0+0xa2>
 8009af2:	1c53      	adds	r3, r2, #1
 8009af4:	d108      	bne.n	8009b08 <_strtol_l.isra.0+0xdc>
 8009af6:	2322      	movs	r3, #34	@ 0x22
 8009af8:	f8ce 3000 	str.w	r3, [lr]
 8009afc:	4660      	mov	r0, ip
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	d0a0      	beq.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b04:	1e69      	subs	r1, r5, #1
 8009b06:	e006      	b.n	8009b16 <_strtol_l.isra.0+0xea>
 8009b08:	b106      	cbz	r6, 8009b0c <_strtol_l.isra.0+0xe0>
 8009b0a:	4240      	negs	r0, r0
 8009b0c:	f1b8 0f00 	cmp.w	r8, #0
 8009b10:	d099      	beq.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1f6      	bne.n	8009b04 <_strtol_l.isra.0+0xd8>
 8009b16:	f8c8 1000 	str.w	r1, [r8]
 8009b1a:	e794      	b.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b1c:	0800b069 	.word	0x0800b069

08009b20 <_strtol_r>:
 8009b20:	f7ff bf84 	b.w	8009a2c <_strtol_l.isra.0>

08009b24 <__ssputs_r>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	688e      	ldr	r6, [r1, #8]
 8009b2a:	461f      	mov	r7, r3
 8009b2c:	42be      	cmp	r6, r7
 8009b2e:	680b      	ldr	r3, [r1, #0]
 8009b30:	4682      	mov	sl, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	4690      	mov	r8, r2
 8009b36:	d82d      	bhi.n	8009b94 <__ssputs_r+0x70>
 8009b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b40:	d026      	beq.n	8009b90 <__ssputs_r+0x6c>
 8009b42:	6965      	ldr	r5, [r4, #20]
 8009b44:	6909      	ldr	r1, [r1, #16]
 8009b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b4a:	eba3 0901 	sub.w	r9, r3, r1
 8009b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b52:	1c7b      	adds	r3, r7, #1
 8009b54:	444b      	add	r3, r9
 8009b56:	106d      	asrs	r5, r5, #1
 8009b58:	429d      	cmp	r5, r3
 8009b5a:	bf38      	it	cc
 8009b5c:	461d      	movcc	r5, r3
 8009b5e:	0553      	lsls	r3, r2, #21
 8009b60:	d527      	bpl.n	8009bb2 <__ssputs_r+0x8e>
 8009b62:	4629      	mov	r1, r5
 8009b64:	f7fe fc24 	bl	80083b0 <_malloc_r>
 8009b68:	4606      	mov	r6, r0
 8009b6a:	b360      	cbz	r0, 8009bc6 <__ssputs_r+0xa2>
 8009b6c:	6921      	ldr	r1, [r4, #16]
 8009b6e:	464a      	mov	r2, r9
 8009b70:	f000 fa2a 	bl	8009fc8 <memcpy>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	6126      	str	r6, [r4, #16]
 8009b82:	6165      	str	r5, [r4, #20]
 8009b84:	444e      	add	r6, r9
 8009b86:	eba5 0509 	sub.w	r5, r5, r9
 8009b8a:	6026      	str	r6, [r4, #0]
 8009b8c:	60a5      	str	r5, [r4, #8]
 8009b8e:	463e      	mov	r6, r7
 8009b90:	42be      	cmp	r6, r7
 8009b92:	d900      	bls.n	8009b96 <__ssputs_r+0x72>
 8009b94:	463e      	mov	r6, r7
 8009b96:	6820      	ldr	r0, [r4, #0]
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	f000 f9d8 	bl	8009f50 <memmove>
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	1b9b      	subs	r3, r3, r6
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	4433      	add	r3, r6
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	2000      	movs	r0, #0
 8009bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	f000 fd85 	bl	800a6c2 <_realloc_r>
 8009bb8:	4606      	mov	r6, r0
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d1e0      	bne.n	8009b80 <__ssputs_r+0x5c>
 8009bbe:	6921      	ldr	r1, [r4, #16]
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	f7fe fb81 	bl	80082c8 <_free_r>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	f8ca 3000 	str.w	r3, [sl]
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd8:	e7e9      	b.n	8009bae <__ssputs_r+0x8a>
	...

08009bdc <_svfiprintf_r>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	4698      	mov	r8, r3
 8009be2:	898b      	ldrh	r3, [r1, #12]
 8009be4:	061b      	lsls	r3, r3, #24
 8009be6:	b09d      	sub	sp, #116	@ 0x74
 8009be8:	4607      	mov	r7, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	4614      	mov	r4, r2
 8009bee:	d510      	bpl.n	8009c12 <_svfiprintf_r+0x36>
 8009bf0:	690b      	ldr	r3, [r1, #16]
 8009bf2:	b973      	cbnz	r3, 8009c12 <_svfiprintf_r+0x36>
 8009bf4:	2140      	movs	r1, #64	@ 0x40
 8009bf6:	f7fe fbdb 	bl	80083b0 <_malloc_r>
 8009bfa:	6028      	str	r0, [r5, #0]
 8009bfc:	6128      	str	r0, [r5, #16]
 8009bfe:	b930      	cbnz	r0, 8009c0e <_svfiprintf_r+0x32>
 8009c00:	230c      	movs	r3, #12
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	b01d      	add	sp, #116	@ 0x74
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	2340      	movs	r3, #64	@ 0x40
 8009c10:	616b      	str	r3, [r5, #20]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c16:	2320      	movs	r3, #32
 8009c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c20:	2330      	movs	r3, #48	@ 0x30
 8009c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dc0 <_svfiprintf_r+0x1e4>
 8009c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c2a:	f04f 0901 	mov.w	r9, #1
 8009c2e:	4623      	mov	r3, r4
 8009c30:	469a      	mov	sl, r3
 8009c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c36:	b10a      	cbz	r2, 8009c3c <_svfiprintf_r+0x60>
 8009c38:	2a25      	cmp	r2, #37	@ 0x25
 8009c3a:	d1f9      	bne.n	8009c30 <_svfiprintf_r+0x54>
 8009c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c40:	d00b      	beq.n	8009c5a <_svfiprintf_r+0x7e>
 8009c42:	465b      	mov	r3, fp
 8009c44:	4622      	mov	r2, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff6b 	bl	8009b24 <__ssputs_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f000 80a7 	beq.w	8009da2 <_svfiprintf_r+0x1c6>
 8009c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c56:	445a      	add	r2, fp
 8009c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 809f 	beq.w	8009da2 <_svfiprintf_r+0x1c6>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6e:	f10a 0a01 	add.w	sl, sl, #1
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	9307      	str	r3, [sp, #28]
 8009c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c7c:	4654      	mov	r4, sl
 8009c7e:	2205      	movs	r2, #5
 8009c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c84:	484e      	ldr	r0, [pc, #312]	@ (8009dc0 <_svfiprintf_r+0x1e4>)
 8009c86:	f7f6 faa3 	bl	80001d0 <memchr>
 8009c8a:	9a04      	ldr	r2, [sp, #16]
 8009c8c:	b9d8      	cbnz	r0, 8009cc6 <_svfiprintf_r+0xea>
 8009c8e:	06d0      	lsls	r0, r2, #27
 8009c90:	bf44      	itt	mi
 8009c92:	2320      	movmi	r3, #32
 8009c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c98:	0711      	lsls	r1, r2, #28
 8009c9a:	bf44      	itt	mi
 8009c9c:	232b      	movmi	r3, #43	@ 0x2b
 8009c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca8:	d015      	beq.n	8009cd6 <_svfiprintf_r+0xfa>
 8009caa:	9a07      	ldr	r2, [sp, #28]
 8009cac:	4654      	mov	r4, sl
 8009cae:	2000      	movs	r0, #0
 8009cb0:	f04f 0c0a 	mov.w	ip, #10
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cba:	3b30      	subs	r3, #48	@ 0x30
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d94b      	bls.n	8009d58 <_svfiprintf_r+0x17c>
 8009cc0:	b1b0      	cbz	r0, 8009cf0 <_svfiprintf_r+0x114>
 8009cc2:	9207      	str	r2, [sp, #28]
 8009cc4:	e014      	b.n	8009cf0 <_svfiprintf_r+0x114>
 8009cc6:	eba0 0308 	sub.w	r3, r0, r8
 8009cca:	fa09 f303 	lsl.w	r3, r9, r3
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	46a2      	mov	sl, r4
 8009cd4:	e7d2      	b.n	8009c7c <_svfiprintf_r+0xa0>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	9103      	str	r1, [sp, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bfbb      	ittet	lt
 8009ce2:	425b      	neglt	r3, r3
 8009ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce8:	9307      	strge	r3, [sp, #28]
 8009cea:	9307      	strlt	r3, [sp, #28]
 8009cec:	bfb8      	it	lt
 8009cee:	9204      	strlt	r2, [sp, #16]
 8009cf0:	7823      	ldrb	r3, [r4, #0]
 8009cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf4:	d10a      	bne.n	8009d0c <_svfiprintf_r+0x130>
 8009cf6:	7863      	ldrb	r3, [r4, #1]
 8009cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfa:	d132      	bne.n	8009d62 <_svfiprintf_r+0x186>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	9203      	str	r2, [sp, #12]
 8009d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d08:	3402      	adds	r4, #2
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009dd0 <_svfiprintf_r+0x1f4>
 8009d10:	7821      	ldrb	r1, [r4, #0]
 8009d12:	2203      	movs	r2, #3
 8009d14:	4650      	mov	r0, sl
 8009d16:	f7f6 fa5b 	bl	80001d0 <memchr>
 8009d1a:	b138      	cbz	r0, 8009d2c <_svfiprintf_r+0x150>
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	eba0 000a 	sub.w	r0, r0, sl
 8009d22:	2240      	movs	r2, #64	@ 0x40
 8009d24:	4082      	lsls	r2, r0
 8009d26:	4313      	orrs	r3, r2
 8009d28:	3401      	adds	r4, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d30:	4824      	ldr	r0, [pc, #144]	@ (8009dc4 <_svfiprintf_r+0x1e8>)
 8009d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d36:	2206      	movs	r2, #6
 8009d38:	f7f6 fa4a 	bl	80001d0 <memchr>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d036      	beq.n	8009dae <_svfiprintf_r+0x1d2>
 8009d40:	4b21      	ldr	r3, [pc, #132]	@ (8009dc8 <_svfiprintf_r+0x1ec>)
 8009d42:	bb1b      	cbnz	r3, 8009d8c <_svfiprintf_r+0x1b0>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	3307      	adds	r3, #7
 8009d48:	f023 0307 	bic.w	r3, r3, #7
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	9303      	str	r3, [sp, #12]
 8009d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d52:	4433      	add	r3, r6
 8009d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d56:	e76a      	b.n	8009c2e <_svfiprintf_r+0x52>
 8009d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7a8      	b.n	8009cb4 <_svfiprintf_r+0xd8>
 8009d62:	2300      	movs	r3, #0
 8009d64:	3401      	adds	r4, #1
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f04f 0c0a 	mov.w	ip, #10
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d74:	3a30      	subs	r2, #48	@ 0x30
 8009d76:	2a09      	cmp	r2, #9
 8009d78:	d903      	bls.n	8009d82 <_svfiprintf_r+0x1a6>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0c6      	beq.n	8009d0c <_svfiprintf_r+0x130>
 8009d7e:	9105      	str	r1, [sp, #20]
 8009d80:	e7c4      	b.n	8009d0c <_svfiprintf_r+0x130>
 8009d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d86:	4604      	mov	r4, r0
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e7f0      	b.n	8009d6e <_svfiprintf_r+0x192>
 8009d8c:	ab03      	add	r3, sp, #12
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	462a      	mov	r2, r5
 8009d92:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <_svfiprintf_r+0x1f0>)
 8009d94:	a904      	add	r1, sp, #16
 8009d96:	4638      	mov	r0, r7
 8009d98:	f7fc fc1c 	bl	80065d4 <_printf_float>
 8009d9c:	1c42      	adds	r2, r0, #1
 8009d9e:	4606      	mov	r6, r0
 8009da0:	d1d6      	bne.n	8009d50 <_svfiprintf_r+0x174>
 8009da2:	89ab      	ldrh	r3, [r5, #12]
 8009da4:	065b      	lsls	r3, r3, #25
 8009da6:	f53f af2d 	bmi.w	8009c04 <_svfiprintf_r+0x28>
 8009daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dac:	e72c      	b.n	8009c08 <_svfiprintf_r+0x2c>
 8009dae:	ab03      	add	r3, sp, #12
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	462a      	mov	r2, r5
 8009db4:	4b05      	ldr	r3, [pc, #20]	@ (8009dcc <_svfiprintf_r+0x1f0>)
 8009db6:	a904      	add	r1, sp, #16
 8009db8:	4638      	mov	r0, r7
 8009dba:	f7fc fea3 	bl	8006b04 <_printf_i>
 8009dbe:	e7ed      	b.n	8009d9c <_svfiprintf_r+0x1c0>
 8009dc0:	0800ae9f 	.word	0x0800ae9f
 8009dc4:	0800aea9 	.word	0x0800aea9
 8009dc8:	080065d5 	.word	0x080065d5
 8009dcc:	08009b25 	.word	0x08009b25
 8009dd0:	0800aea5 	.word	0x0800aea5

08009dd4 <__sflush_r>:
 8009dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ddc:	0716      	lsls	r6, r2, #28
 8009dde:	4605      	mov	r5, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	d454      	bmi.n	8009e8e <__sflush_r+0xba>
 8009de4:	684b      	ldr	r3, [r1, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	dc02      	bgt.n	8009df0 <__sflush_r+0x1c>
 8009dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dd48      	ble.n	8009e82 <__sflush_r+0xae>
 8009df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	d045      	beq.n	8009e82 <__sflush_r+0xae>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009dfc:	682f      	ldr	r7, [r5, #0]
 8009dfe:	6a21      	ldr	r1, [r4, #32]
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	d030      	beq.n	8009e66 <__sflush_r+0x92>
 8009e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	0759      	lsls	r1, r3, #29
 8009e0a:	d505      	bpl.n	8009e18 <__sflush_r+0x44>
 8009e0c:	6863      	ldr	r3, [r4, #4]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e12:	b10b      	cbz	r3, 8009e18 <__sflush_r+0x44>
 8009e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	2300      	movs	r3, #0
 8009e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e1c:	6a21      	ldr	r1, [r4, #32]
 8009e1e:	4628      	mov	r0, r5
 8009e20:	47b0      	blx	r6
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	d106      	bne.n	8009e36 <__sflush_r+0x62>
 8009e28:	6829      	ldr	r1, [r5, #0]
 8009e2a:	291d      	cmp	r1, #29
 8009e2c:	d82b      	bhi.n	8009e86 <__sflush_r+0xb2>
 8009e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ed8 <__sflush_r+0x104>)
 8009e30:	40ca      	lsrs	r2, r1
 8009e32:	07d6      	lsls	r6, r2, #31
 8009e34:	d527      	bpl.n	8009e86 <__sflush_r+0xb2>
 8009e36:	2200      	movs	r2, #0
 8009e38:	6062      	str	r2, [r4, #4]
 8009e3a:	04d9      	lsls	r1, r3, #19
 8009e3c:	6922      	ldr	r2, [r4, #16]
 8009e3e:	6022      	str	r2, [r4, #0]
 8009e40:	d504      	bpl.n	8009e4c <__sflush_r+0x78>
 8009e42:	1c42      	adds	r2, r0, #1
 8009e44:	d101      	bne.n	8009e4a <__sflush_r+0x76>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	b903      	cbnz	r3, 8009e4c <__sflush_r+0x78>
 8009e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e4e:	602f      	str	r7, [r5, #0]
 8009e50:	b1b9      	cbz	r1, 8009e82 <__sflush_r+0xae>
 8009e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e56:	4299      	cmp	r1, r3
 8009e58:	d002      	beq.n	8009e60 <__sflush_r+0x8c>
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f7fe fa34 	bl	80082c8 <_free_r>
 8009e60:	2300      	movs	r3, #0
 8009e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e64:	e00d      	b.n	8009e82 <__sflush_r+0xae>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b0      	blx	r6
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	1c50      	adds	r0, r2, #1
 8009e70:	d1c9      	bne.n	8009e06 <__sflush_r+0x32>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0c6      	beq.n	8009e06 <__sflush_r+0x32>
 8009e78:	2b1d      	cmp	r3, #29
 8009e7a:	d001      	beq.n	8009e80 <__sflush_r+0xac>
 8009e7c:	2b16      	cmp	r3, #22
 8009e7e:	d11e      	bne.n	8009ebe <__sflush_r+0xea>
 8009e80:	602f      	str	r7, [r5, #0]
 8009e82:	2000      	movs	r0, #0
 8009e84:	e022      	b.n	8009ecc <__sflush_r+0xf8>
 8009e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e8a:	b21b      	sxth	r3, r3
 8009e8c:	e01b      	b.n	8009ec6 <__sflush_r+0xf2>
 8009e8e:	690f      	ldr	r7, [r1, #16]
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	d0f6      	beq.n	8009e82 <__sflush_r+0xae>
 8009e94:	0793      	lsls	r3, r2, #30
 8009e96:	680e      	ldr	r6, [r1, #0]
 8009e98:	bf08      	it	eq
 8009e9a:	694b      	ldreq	r3, [r1, #20]
 8009e9c:	600f      	str	r7, [r1, #0]
 8009e9e:	bf18      	it	ne
 8009ea0:	2300      	movne	r3, #0
 8009ea2:	eba6 0807 	sub.w	r8, r6, r7
 8009ea6:	608b      	str	r3, [r1, #8]
 8009ea8:	f1b8 0f00 	cmp.w	r8, #0
 8009eac:	dde9      	ble.n	8009e82 <__sflush_r+0xae>
 8009eae:	6a21      	ldr	r1, [r4, #32]
 8009eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eb2:	4643      	mov	r3, r8
 8009eb4:	463a      	mov	r2, r7
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b0      	blx	r6
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	dc08      	bgt.n	8009ed0 <__sflush_r+0xfc>
 8009ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	4407      	add	r7, r0
 8009ed2:	eba8 0800 	sub.w	r8, r8, r0
 8009ed6:	e7e7      	b.n	8009ea8 <__sflush_r+0xd4>
 8009ed8:	20400001 	.word	0x20400001

08009edc <_fflush_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	690b      	ldr	r3, [r1, #16]
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	b913      	cbnz	r3, 8009eec <_fflush_r+0x10>
 8009ee6:	2500      	movs	r5, #0
 8009ee8:	4628      	mov	r0, r5
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	b118      	cbz	r0, 8009ef6 <_fflush_r+0x1a>
 8009eee:	6a03      	ldr	r3, [r0, #32]
 8009ef0:	b90b      	cbnz	r3, 8009ef6 <_fflush_r+0x1a>
 8009ef2:	f7fd f9bf 	bl	8007274 <__sinit>
 8009ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0f3      	beq.n	8009ee6 <_fflush_r+0xa>
 8009efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f00:	07d0      	lsls	r0, r2, #31
 8009f02:	d404      	bmi.n	8009f0e <_fflush_r+0x32>
 8009f04:	0599      	lsls	r1, r3, #22
 8009f06:	d402      	bmi.n	8009f0e <_fflush_r+0x32>
 8009f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f0a:	f7fd fb5e 	bl	80075ca <__retarget_lock_acquire_recursive>
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4621      	mov	r1, r4
 8009f12:	f7ff ff5f 	bl	8009dd4 <__sflush_r>
 8009f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f18:	07da      	lsls	r2, r3, #31
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	d4e4      	bmi.n	8009ee8 <_fflush_r+0xc>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	059b      	lsls	r3, r3, #22
 8009f22:	d4e1      	bmi.n	8009ee8 <_fflush_r+0xc>
 8009f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f26:	f7fd fb51 	bl	80075cc <__retarget_lock_release_recursive>
 8009f2a:	e7dd      	b.n	8009ee8 <_fflush_r+0xc>

08009f2c <fiprintf>:
 8009f2c:	b40e      	push	{r1, r2, r3}
 8009f2e:	b503      	push	{r0, r1, lr}
 8009f30:	4601      	mov	r1, r0
 8009f32:	ab03      	add	r3, sp, #12
 8009f34:	4805      	ldr	r0, [pc, #20]	@ (8009f4c <fiprintf+0x20>)
 8009f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	f000 fc25 	bl	800a78c <_vfiprintf_r>
 8009f42:	b002      	add	sp, #8
 8009f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f48:	b003      	add	sp, #12
 8009f4a:	4770      	bx	lr
 8009f4c:	20000018 	.word	0x20000018

08009f50 <memmove>:
 8009f50:	4288      	cmp	r0, r1
 8009f52:	b510      	push	{r4, lr}
 8009f54:	eb01 0402 	add.w	r4, r1, r2
 8009f58:	d902      	bls.n	8009f60 <memmove+0x10>
 8009f5a:	4284      	cmp	r4, r0
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	d807      	bhi.n	8009f70 <memmove+0x20>
 8009f60:	1e43      	subs	r3, r0, #1
 8009f62:	42a1      	cmp	r1, r4
 8009f64:	d008      	beq.n	8009f78 <memmove+0x28>
 8009f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f6e:	e7f8      	b.n	8009f62 <memmove+0x12>
 8009f70:	4402      	add	r2, r0
 8009f72:	4601      	mov	r1, r0
 8009f74:	428a      	cmp	r2, r1
 8009f76:	d100      	bne.n	8009f7a <memmove+0x2a>
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f82:	e7f7      	b.n	8009f74 <memmove+0x24>

08009f84 <strncmp>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	b16a      	cbz	r2, 8009fa4 <strncmp+0x20>
 8009f88:	3901      	subs	r1, #1
 8009f8a:	1884      	adds	r4, r0, r2
 8009f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d103      	bne.n	8009fa0 <strncmp+0x1c>
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d001      	beq.n	8009fa0 <strncmp+0x1c>
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d1f5      	bne.n	8009f8c <strncmp+0x8>
 8009fa0:	1ad0      	subs	r0, r2, r3
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	e7fc      	b.n	8009fa2 <strncmp+0x1e>

08009fa8 <_sbrk_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d06      	ldr	r5, [pc, #24]	@ (8009fc4 <_sbrk_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	f7f7 fe82 	bl	8001cbc <_sbrk>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_sbrk_r+0x1a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_sbrk_r+0x1a>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20000438 	.word	0x20000438

08009fc8 <memcpy>:
 8009fc8:	440a      	add	r2, r1
 8009fca:	4291      	cmp	r1, r2
 8009fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fd0:	d100      	bne.n	8009fd4 <memcpy+0xc>
 8009fd2:	4770      	bx	lr
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fde:	4291      	cmp	r1, r2
 8009fe0:	d1f9      	bne.n	8009fd6 <memcpy+0xe>
 8009fe2:	bd10      	pop	{r4, pc}
 8009fe4:	0000      	movs	r0, r0
	...

08009fe8 <nan>:
 8009fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ff0 <nan+0x8>
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	7ff80000 	.word	0x7ff80000

08009ff8 <abort>:
 8009ff8:	b508      	push	{r3, lr}
 8009ffa:	2006      	movs	r0, #6
 8009ffc:	f000 fd9a 	bl	800ab34 <raise>
 800a000:	2001      	movs	r0, #1
 800a002:	f7f7 fde3 	bl	8001bcc <_exit>

0800a006 <_calloc_r>:
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	fba1 5402 	umull	r5, r4, r1, r2
 800a00c:	b934      	cbnz	r4, 800a01c <_calloc_r+0x16>
 800a00e:	4629      	mov	r1, r5
 800a010:	f7fe f9ce 	bl	80083b0 <_malloc_r>
 800a014:	4606      	mov	r6, r0
 800a016:	b928      	cbnz	r0, 800a024 <_calloc_r+0x1e>
 800a018:	4630      	mov	r0, r6
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	220c      	movs	r2, #12
 800a01e:	6002      	str	r2, [r0, #0]
 800a020:	2600      	movs	r6, #0
 800a022:	e7f9      	b.n	800a018 <_calloc_r+0x12>
 800a024:	462a      	mov	r2, r5
 800a026:	4621      	mov	r1, r4
 800a028:	f7fd f9f5 	bl	8007416 <memset>
 800a02c:	e7f4      	b.n	800a018 <_calloc_r+0x12>

0800a02e <rshift>:
 800a02e:	6903      	ldr	r3, [r0, #16]
 800a030:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a038:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a03c:	f100 0414 	add.w	r4, r0, #20
 800a040:	dd45      	ble.n	800a0ce <rshift+0xa0>
 800a042:	f011 011f 	ands.w	r1, r1, #31
 800a046:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a04a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a04e:	d10c      	bne.n	800a06a <rshift+0x3c>
 800a050:	f100 0710 	add.w	r7, r0, #16
 800a054:	4629      	mov	r1, r5
 800a056:	42b1      	cmp	r1, r6
 800a058:	d334      	bcc.n	800a0c4 <rshift+0x96>
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	1eea      	subs	r2, r5, #3
 800a060:	4296      	cmp	r6, r2
 800a062:	bf38      	it	cc
 800a064:	2300      	movcc	r3, #0
 800a066:	4423      	add	r3, r4
 800a068:	e015      	b.n	800a096 <rshift+0x68>
 800a06a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a06e:	f1c1 0820 	rsb	r8, r1, #32
 800a072:	40cf      	lsrs	r7, r1
 800a074:	f105 0e04 	add.w	lr, r5, #4
 800a078:	46a1      	mov	r9, r4
 800a07a:	4576      	cmp	r6, lr
 800a07c:	46f4      	mov	ip, lr
 800a07e:	d815      	bhi.n	800a0ac <rshift+0x7e>
 800a080:	1a9a      	subs	r2, r3, r2
 800a082:	0092      	lsls	r2, r2, #2
 800a084:	3a04      	subs	r2, #4
 800a086:	3501      	adds	r5, #1
 800a088:	42ae      	cmp	r6, r5
 800a08a:	bf38      	it	cc
 800a08c:	2200      	movcc	r2, #0
 800a08e:	18a3      	adds	r3, r4, r2
 800a090:	50a7      	str	r7, [r4, r2]
 800a092:	b107      	cbz	r7, 800a096 <rshift+0x68>
 800a094:	3304      	adds	r3, #4
 800a096:	1b1a      	subs	r2, r3, r4
 800a098:	42a3      	cmp	r3, r4
 800a09a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a09e:	bf08      	it	eq
 800a0a0:	2300      	moveq	r3, #0
 800a0a2:	6102      	str	r2, [r0, #16]
 800a0a4:	bf08      	it	eq
 800a0a6:	6143      	streq	r3, [r0, #20]
 800a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	f8dc c000 	ldr.w	ip, [ip]
 800a0b0:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0b4:	ea4c 0707 	orr.w	r7, ip, r7
 800a0b8:	f849 7b04 	str.w	r7, [r9], #4
 800a0bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0c0:	40cf      	lsrs	r7, r1
 800a0c2:	e7da      	b.n	800a07a <rshift+0x4c>
 800a0c4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0c8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0cc:	e7c3      	b.n	800a056 <rshift+0x28>
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	e7e1      	b.n	800a096 <rshift+0x68>

0800a0d2 <__hexdig_fun>:
 800a0d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d802      	bhi.n	800a0e0 <__hexdig_fun+0xe>
 800a0da:	3820      	subs	r0, #32
 800a0dc:	b2c0      	uxtb	r0, r0
 800a0de:	4770      	bx	lr
 800a0e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d801      	bhi.n	800a0ec <__hexdig_fun+0x1a>
 800a0e8:	3847      	subs	r0, #71	@ 0x47
 800a0ea:	e7f7      	b.n	800a0dc <__hexdig_fun+0xa>
 800a0ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a0f0:	2b05      	cmp	r3, #5
 800a0f2:	d801      	bhi.n	800a0f8 <__hexdig_fun+0x26>
 800a0f4:	3827      	subs	r0, #39	@ 0x27
 800a0f6:	e7f1      	b.n	800a0dc <__hexdig_fun+0xa>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4770      	bx	lr

0800a0fc <__gethex>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	b085      	sub	sp, #20
 800a102:	468a      	mov	sl, r1
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	680b      	ldr	r3, [r1, #0]
 800a108:	9001      	str	r0, [sp, #4]
 800a10a:	4690      	mov	r8, r2
 800a10c:	1c9c      	adds	r4, r3, #2
 800a10e:	46a1      	mov	r9, r4
 800a110:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a114:	2830      	cmp	r0, #48	@ 0x30
 800a116:	d0fa      	beq.n	800a10e <__gethex+0x12>
 800a118:	eba9 0303 	sub.w	r3, r9, r3
 800a11c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a120:	f7ff ffd7 	bl	800a0d2 <__hexdig_fun>
 800a124:	4605      	mov	r5, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	d168      	bne.n	800a1fc <__gethex+0x100>
 800a12a:	49a0      	ldr	r1, [pc, #640]	@ (800a3ac <__gethex+0x2b0>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	4648      	mov	r0, r9
 800a130:	f7ff ff28 	bl	8009f84 <strncmp>
 800a134:	4607      	mov	r7, r0
 800a136:	2800      	cmp	r0, #0
 800a138:	d167      	bne.n	800a20a <__gethex+0x10e>
 800a13a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a13e:	4626      	mov	r6, r4
 800a140:	f7ff ffc7 	bl	800a0d2 <__hexdig_fun>
 800a144:	2800      	cmp	r0, #0
 800a146:	d062      	beq.n	800a20e <__gethex+0x112>
 800a148:	4623      	mov	r3, r4
 800a14a:	7818      	ldrb	r0, [r3, #0]
 800a14c:	2830      	cmp	r0, #48	@ 0x30
 800a14e:	4699      	mov	r9, r3
 800a150:	f103 0301 	add.w	r3, r3, #1
 800a154:	d0f9      	beq.n	800a14a <__gethex+0x4e>
 800a156:	f7ff ffbc 	bl	800a0d2 <__hexdig_fun>
 800a15a:	fab0 f580 	clz	r5, r0
 800a15e:	096d      	lsrs	r5, r5, #5
 800a160:	f04f 0b01 	mov.w	fp, #1
 800a164:	464a      	mov	r2, r9
 800a166:	4616      	mov	r6, r2
 800a168:	3201      	adds	r2, #1
 800a16a:	7830      	ldrb	r0, [r6, #0]
 800a16c:	f7ff ffb1 	bl	800a0d2 <__hexdig_fun>
 800a170:	2800      	cmp	r0, #0
 800a172:	d1f8      	bne.n	800a166 <__gethex+0x6a>
 800a174:	498d      	ldr	r1, [pc, #564]	@ (800a3ac <__gethex+0x2b0>)
 800a176:	2201      	movs	r2, #1
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff ff03 	bl	8009f84 <strncmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d13f      	bne.n	800a202 <__gethex+0x106>
 800a182:	b944      	cbnz	r4, 800a196 <__gethex+0x9a>
 800a184:	1c74      	adds	r4, r6, #1
 800a186:	4622      	mov	r2, r4
 800a188:	4616      	mov	r6, r2
 800a18a:	3201      	adds	r2, #1
 800a18c:	7830      	ldrb	r0, [r6, #0]
 800a18e:	f7ff ffa0 	bl	800a0d2 <__hexdig_fun>
 800a192:	2800      	cmp	r0, #0
 800a194:	d1f8      	bne.n	800a188 <__gethex+0x8c>
 800a196:	1ba4      	subs	r4, r4, r6
 800a198:	00a7      	lsls	r7, r4, #2
 800a19a:	7833      	ldrb	r3, [r6, #0]
 800a19c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1a0:	2b50      	cmp	r3, #80	@ 0x50
 800a1a2:	d13e      	bne.n	800a222 <__gethex+0x126>
 800a1a4:	7873      	ldrb	r3, [r6, #1]
 800a1a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1a8:	d033      	beq.n	800a212 <__gethex+0x116>
 800a1aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1ac:	d034      	beq.n	800a218 <__gethex+0x11c>
 800a1ae:	1c71      	adds	r1, r6, #1
 800a1b0:	2400      	movs	r4, #0
 800a1b2:	7808      	ldrb	r0, [r1, #0]
 800a1b4:	f7ff ff8d 	bl	800a0d2 <__hexdig_fun>
 800a1b8:	1e43      	subs	r3, r0, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b18      	cmp	r3, #24
 800a1be:	d830      	bhi.n	800a222 <__gethex+0x126>
 800a1c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a1c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1c8:	f7ff ff83 	bl	800a0d2 <__hexdig_fun>
 800a1cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1d0:	fa5f fc8c 	uxtb.w	ip, ip
 800a1d4:	f1bc 0f18 	cmp.w	ip, #24
 800a1d8:	f04f 030a 	mov.w	r3, #10
 800a1dc:	d91e      	bls.n	800a21c <__gethex+0x120>
 800a1de:	b104      	cbz	r4, 800a1e2 <__gethex+0xe6>
 800a1e0:	4252      	negs	r2, r2
 800a1e2:	4417      	add	r7, r2
 800a1e4:	f8ca 1000 	str.w	r1, [sl]
 800a1e8:	b1ed      	cbz	r5, 800a226 <__gethex+0x12a>
 800a1ea:	f1bb 0f00 	cmp.w	fp, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2506      	moveq	r5, #6
 800a1f2:	2500      	movne	r5, #0
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	b005      	add	sp, #20
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	462c      	mov	r4, r5
 800a200:	e7b0      	b.n	800a164 <__gethex+0x68>
 800a202:	2c00      	cmp	r4, #0
 800a204:	d1c7      	bne.n	800a196 <__gethex+0x9a>
 800a206:	4627      	mov	r7, r4
 800a208:	e7c7      	b.n	800a19a <__gethex+0x9e>
 800a20a:	464e      	mov	r6, r9
 800a20c:	462f      	mov	r7, r5
 800a20e:	2501      	movs	r5, #1
 800a210:	e7c3      	b.n	800a19a <__gethex+0x9e>
 800a212:	2400      	movs	r4, #0
 800a214:	1cb1      	adds	r1, r6, #2
 800a216:	e7cc      	b.n	800a1b2 <__gethex+0xb6>
 800a218:	2401      	movs	r4, #1
 800a21a:	e7fb      	b.n	800a214 <__gethex+0x118>
 800a21c:	fb03 0002 	mla	r0, r3, r2, r0
 800a220:	e7ce      	b.n	800a1c0 <__gethex+0xc4>
 800a222:	4631      	mov	r1, r6
 800a224:	e7de      	b.n	800a1e4 <__gethex+0xe8>
 800a226:	eba6 0309 	sub.w	r3, r6, r9
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4629      	mov	r1, r5
 800a22e:	2b07      	cmp	r3, #7
 800a230:	dc0a      	bgt.n	800a248 <__gethex+0x14c>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	f7fe f948 	bl	80084c8 <_Balloc>
 800a238:	4604      	mov	r4, r0
 800a23a:	b940      	cbnz	r0, 800a24e <__gethex+0x152>
 800a23c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3b0 <__gethex+0x2b4>)
 800a23e:	4602      	mov	r2, r0
 800a240:	21e4      	movs	r1, #228	@ 0xe4
 800a242:	485c      	ldr	r0, [pc, #368]	@ (800a3b4 <__gethex+0x2b8>)
 800a244:	f7fd f9ca 	bl	80075dc <__assert_func>
 800a248:	3101      	adds	r1, #1
 800a24a:	105b      	asrs	r3, r3, #1
 800a24c:	e7ef      	b.n	800a22e <__gethex+0x132>
 800a24e:	f100 0a14 	add.w	sl, r0, #20
 800a252:	2300      	movs	r3, #0
 800a254:	4655      	mov	r5, sl
 800a256:	469b      	mov	fp, r3
 800a258:	45b1      	cmp	r9, r6
 800a25a:	d337      	bcc.n	800a2cc <__gethex+0x1d0>
 800a25c:	f845 bb04 	str.w	fp, [r5], #4
 800a260:	eba5 050a 	sub.w	r5, r5, sl
 800a264:	10ad      	asrs	r5, r5, #2
 800a266:	6125      	str	r5, [r4, #16]
 800a268:	4658      	mov	r0, fp
 800a26a:	f7fe fa1f 	bl	80086ac <__hi0bits>
 800a26e:	016d      	lsls	r5, r5, #5
 800a270:	f8d8 6000 	ldr.w	r6, [r8]
 800a274:	1a2d      	subs	r5, r5, r0
 800a276:	42b5      	cmp	r5, r6
 800a278:	dd54      	ble.n	800a324 <__gethex+0x228>
 800a27a:	1bad      	subs	r5, r5, r6
 800a27c:	4629      	mov	r1, r5
 800a27e:	4620      	mov	r0, r4
 800a280:	f7fe fdab 	bl	8008dda <__any_on>
 800a284:	4681      	mov	r9, r0
 800a286:	b178      	cbz	r0, 800a2a8 <__gethex+0x1ac>
 800a288:	1e6b      	subs	r3, r5, #1
 800a28a:	1159      	asrs	r1, r3, #5
 800a28c:	f003 021f 	and.w	r2, r3, #31
 800a290:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a294:	f04f 0901 	mov.w	r9, #1
 800a298:	fa09 f202 	lsl.w	r2, r9, r2
 800a29c:	420a      	tst	r2, r1
 800a29e:	d003      	beq.n	800a2a8 <__gethex+0x1ac>
 800a2a0:	454b      	cmp	r3, r9
 800a2a2:	dc36      	bgt.n	800a312 <__gethex+0x216>
 800a2a4:	f04f 0902 	mov.w	r9, #2
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff febf 	bl	800a02e <rshift>
 800a2b0:	442f      	add	r7, r5
 800a2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2b6:	42bb      	cmp	r3, r7
 800a2b8:	da42      	bge.n	800a340 <__gethex+0x244>
 800a2ba:	9801      	ldr	r0, [sp, #4]
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f7fe f943 	bl	8008548 <_Bfree>
 800a2c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	25a3      	movs	r5, #163	@ 0xa3
 800a2ca:	e793      	b.n	800a1f4 <__gethex+0xf8>
 800a2cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a2d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a2d2:	d012      	beq.n	800a2fa <__gethex+0x1fe>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d104      	bne.n	800a2e2 <__gethex+0x1e6>
 800a2d8:	f845 bb04 	str.w	fp, [r5], #4
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	465b      	mov	r3, fp
 800a2e2:	7830      	ldrb	r0, [r6, #0]
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	f7ff fef4 	bl	800a0d2 <__hexdig_fun>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	f000 000f 	and.w	r0, r0, #15
 800a2f0:	4098      	lsls	r0, r3
 800a2f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	e7ae      	b.n	800a258 <__gethex+0x15c>
 800a2fa:	45b1      	cmp	r9, r6
 800a2fc:	d8ea      	bhi.n	800a2d4 <__gethex+0x1d8>
 800a2fe:	492b      	ldr	r1, [pc, #172]	@ (800a3ac <__gethex+0x2b0>)
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	4630      	mov	r0, r6
 800a306:	f7ff fe3d 	bl	8009f84 <strncmp>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1e1      	bne.n	800a2d4 <__gethex+0x1d8>
 800a310:	e7a2      	b.n	800a258 <__gethex+0x15c>
 800a312:	1ea9      	subs	r1, r5, #2
 800a314:	4620      	mov	r0, r4
 800a316:	f7fe fd60 	bl	8008dda <__any_on>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0c2      	beq.n	800a2a4 <__gethex+0x1a8>
 800a31e:	f04f 0903 	mov.w	r9, #3
 800a322:	e7c1      	b.n	800a2a8 <__gethex+0x1ac>
 800a324:	da09      	bge.n	800a33a <__gethex+0x23e>
 800a326:	1b75      	subs	r5, r6, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	9801      	ldr	r0, [sp, #4]
 800a32c:	462a      	mov	r2, r5
 800a32e:	f7fe fb1b 	bl	8008968 <__lshift>
 800a332:	1b7f      	subs	r7, r7, r5
 800a334:	4604      	mov	r4, r0
 800a336:	f100 0a14 	add.w	sl, r0, #20
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	e7b8      	b.n	800a2b2 <__gethex+0x1b6>
 800a340:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a344:	42bd      	cmp	r5, r7
 800a346:	dd6f      	ble.n	800a428 <__gethex+0x32c>
 800a348:	1bed      	subs	r5, r5, r7
 800a34a:	42ae      	cmp	r6, r5
 800a34c:	dc34      	bgt.n	800a3b8 <__gethex+0x2bc>
 800a34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d022      	beq.n	800a39c <__gethex+0x2a0>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d024      	beq.n	800a3a4 <__gethex+0x2a8>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d115      	bne.n	800a38a <__gethex+0x28e>
 800a35e:	42ae      	cmp	r6, r5
 800a360:	d113      	bne.n	800a38a <__gethex+0x28e>
 800a362:	2e01      	cmp	r6, #1
 800a364:	d10b      	bne.n	800a37e <__gethex+0x282>
 800a366:	9a02      	ldr	r2, [sp, #8]
 800a368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	2301      	movs	r3, #1
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	f8ca 3000 	str.w	r3, [sl]
 800a376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a378:	2562      	movs	r5, #98	@ 0x62
 800a37a:	601c      	str	r4, [r3, #0]
 800a37c:	e73a      	b.n	800a1f4 <__gethex+0xf8>
 800a37e:	1e71      	subs	r1, r6, #1
 800a380:	4620      	mov	r0, r4
 800a382:	f7fe fd2a 	bl	8008dda <__any_on>
 800a386:	2800      	cmp	r0, #0
 800a388:	d1ed      	bne.n	800a366 <__gethex+0x26a>
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7fe f8db 	bl	8008548 <_Bfree>
 800a392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a394:	2300      	movs	r3, #0
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	2550      	movs	r5, #80	@ 0x50
 800a39a:	e72b      	b.n	800a1f4 <__gethex+0xf8>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f3      	bne.n	800a38a <__gethex+0x28e>
 800a3a2:	e7e0      	b.n	800a366 <__gethex+0x26a>
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1dd      	bne.n	800a366 <__gethex+0x26a>
 800a3aa:	e7ee      	b.n	800a38a <__gethex+0x28e>
 800a3ac:	0800ae9d 	.word	0x0800ae9d
 800a3b0:	0800ae33 	.word	0x0800ae33
 800a3b4:	0800aeb8 	.word	0x0800aeb8
 800a3b8:	1e6f      	subs	r7, r5, #1
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	d130      	bne.n	800a422 <__gethex+0x326>
 800a3c0:	b127      	cbz	r7, 800a3cc <__gethex+0x2d0>
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7fe fd08 	bl	8008dda <__any_on>
 800a3ca:	4681      	mov	r9, r0
 800a3cc:	117a      	asrs	r2, r7, #5
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3d4:	f007 071f 	and.w	r7, r7, #31
 800a3d8:	40bb      	lsls	r3, r7
 800a3da:	4213      	tst	r3, r2
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4620      	mov	r0, r4
 800a3e0:	bf18      	it	ne
 800a3e2:	f049 0902 	orrne.w	r9, r9, #2
 800a3e6:	f7ff fe22 	bl	800a02e <rshift>
 800a3ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a3ee:	1b76      	subs	r6, r6, r5
 800a3f0:	2502      	movs	r5, #2
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	d047      	beq.n	800a488 <__gethex+0x38c>
 800a3f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d015      	beq.n	800a42c <__gethex+0x330>
 800a400:	2b03      	cmp	r3, #3
 800a402:	d017      	beq.n	800a434 <__gethex+0x338>
 800a404:	2b01      	cmp	r3, #1
 800a406:	d109      	bne.n	800a41c <__gethex+0x320>
 800a408:	f019 0f02 	tst.w	r9, #2
 800a40c:	d006      	beq.n	800a41c <__gethex+0x320>
 800a40e:	f8da 3000 	ldr.w	r3, [sl]
 800a412:	ea49 0903 	orr.w	r9, r9, r3
 800a416:	f019 0f01 	tst.w	r9, #1
 800a41a:	d10e      	bne.n	800a43a <__gethex+0x33e>
 800a41c:	f045 0510 	orr.w	r5, r5, #16
 800a420:	e032      	b.n	800a488 <__gethex+0x38c>
 800a422:	f04f 0901 	mov.w	r9, #1
 800a426:	e7d1      	b.n	800a3cc <__gethex+0x2d0>
 800a428:	2501      	movs	r5, #1
 800a42a:	e7e2      	b.n	800a3f2 <__gethex+0x2f6>
 800a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42e:	f1c3 0301 	rsb	r3, r3, #1
 800a432:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0f0      	beq.n	800a41c <__gethex+0x320>
 800a43a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a43e:	f104 0314 	add.w	r3, r4, #20
 800a442:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a446:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a44a:	f04f 0c00 	mov.w	ip, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a458:	d01b      	beq.n	800a492 <__gethex+0x396>
 800a45a:	3201      	adds	r2, #1
 800a45c:	6002      	str	r2, [r0, #0]
 800a45e:	2d02      	cmp	r5, #2
 800a460:	f104 0314 	add.w	r3, r4, #20
 800a464:	d13c      	bne.n	800a4e0 <__gethex+0x3e4>
 800a466:	f8d8 2000 	ldr.w	r2, [r8]
 800a46a:	3a01      	subs	r2, #1
 800a46c:	42b2      	cmp	r2, r6
 800a46e:	d109      	bne.n	800a484 <__gethex+0x388>
 800a470:	1171      	asrs	r1, r6, #5
 800a472:	2201      	movs	r2, #1
 800a474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a478:	f006 061f 	and.w	r6, r6, #31
 800a47c:	fa02 f606 	lsl.w	r6, r2, r6
 800a480:	421e      	tst	r6, r3
 800a482:	d13a      	bne.n	800a4fa <__gethex+0x3fe>
 800a484:	f045 0520 	orr.w	r5, r5, #32
 800a488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a48a:	601c      	str	r4, [r3, #0]
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	601f      	str	r7, [r3, #0]
 800a490:	e6b0      	b.n	800a1f4 <__gethex+0xf8>
 800a492:	4299      	cmp	r1, r3
 800a494:	f843 cc04 	str.w	ip, [r3, #-4]
 800a498:	d8d9      	bhi.n	800a44e <__gethex+0x352>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	459b      	cmp	fp, r3
 800a49e:	db17      	blt.n	800a4d0 <__gethex+0x3d4>
 800a4a0:	6861      	ldr	r1, [r4, #4]
 800a4a2:	9801      	ldr	r0, [sp, #4]
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	f7fe f80f 	bl	80084c8 <_Balloc>
 800a4aa:	4681      	mov	r9, r0
 800a4ac:	b918      	cbnz	r0, 800a4b6 <__gethex+0x3ba>
 800a4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a518 <__gethex+0x41c>)
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	2184      	movs	r1, #132	@ 0x84
 800a4b4:	e6c5      	b.n	800a242 <__gethex+0x146>
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	f104 010c 	add.w	r1, r4, #12
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f7ff fd81 	bl	8009fc8 <memcpy>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	9801      	ldr	r0, [sp, #4]
 800a4ca:	f7fe f83d 	bl	8008548 <_Bfree>
 800a4ce:	464c      	mov	r4, r9
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4d8:	6122      	str	r2, [r4, #16]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	615a      	str	r2, [r3, #20]
 800a4de:	e7be      	b.n	800a45e <__gethex+0x362>
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	455a      	cmp	r2, fp
 800a4e4:	dd0b      	ble.n	800a4fe <__gethex+0x402>
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff fda0 	bl	800a02e <rshift>
 800a4ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4f2:	3701      	adds	r7, #1
 800a4f4:	42bb      	cmp	r3, r7
 800a4f6:	f6ff aee0 	blt.w	800a2ba <__gethex+0x1be>
 800a4fa:	2501      	movs	r5, #1
 800a4fc:	e7c2      	b.n	800a484 <__gethex+0x388>
 800a4fe:	f016 061f 	ands.w	r6, r6, #31
 800a502:	d0fa      	beq.n	800a4fa <__gethex+0x3fe>
 800a504:	4453      	add	r3, sl
 800a506:	f1c6 0620 	rsb	r6, r6, #32
 800a50a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a50e:	f7fe f8cd 	bl	80086ac <__hi0bits>
 800a512:	42b0      	cmp	r0, r6
 800a514:	dbe7      	blt.n	800a4e6 <__gethex+0x3ea>
 800a516:	e7f0      	b.n	800a4fa <__gethex+0x3fe>
 800a518:	0800ae33 	.word	0x0800ae33

0800a51c <L_shift>:
 800a51c:	f1c2 0208 	rsb	r2, r2, #8
 800a520:	0092      	lsls	r2, r2, #2
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	f1c2 0620 	rsb	r6, r2, #32
 800a528:	6843      	ldr	r3, [r0, #4]
 800a52a:	6804      	ldr	r4, [r0, #0]
 800a52c:	fa03 f506 	lsl.w	r5, r3, r6
 800a530:	432c      	orrs	r4, r5
 800a532:	40d3      	lsrs	r3, r2
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	f840 3f04 	str.w	r3, [r0, #4]!
 800a53a:	4288      	cmp	r0, r1
 800a53c:	d3f4      	bcc.n	800a528 <L_shift+0xc>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}

0800a540 <__match>:
 800a540:	b530      	push	{r4, r5, lr}
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a54a:	b914      	cbnz	r4, 800a552 <__match+0x12>
 800a54c:	6003      	str	r3, [r0, #0]
 800a54e:	2001      	movs	r0, #1
 800a550:	bd30      	pop	{r4, r5, pc}
 800a552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a556:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a55a:	2d19      	cmp	r5, #25
 800a55c:	bf98      	it	ls
 800a55e:	3220      	addls	r2, #32
 800a560:	42a2      	cmp	r2, r4
 800a562:	d0f0      	beq.n	800a546 <__match+0x6>
 800a564:	2000      	movs	r0, #0
 800a566:	e7f3      	b.n	800a550 <__match+0x10>

0800a568 <__hexnan>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	680b      	ldr	r3, [r1, #0]
 800a56e:	6801      	ldr	r1, [r0, #0]
 800a570:	115e      	asrs	r6, r3, #5
 800a572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a576:	f013 031f 	ands.w	r3, r3, #31
 800a57a:	b087      	sub	sp, #28
 800a57c:	bf18      	it	ne
 800a57e:	3604      	addne	r6, #4
 800a580:	2500      	movs	r5, #0
 800a582:	1f37      	subs	r7, r6, #4
 800a584:	4682      	mov	sl, r0
 800a586:	4690      	mov	r8, r2
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a58e:	46b9      	mov	r9, r7
 800a590:	463c      	mov	r4, r7
 800a592:	9502      	str	r5, [sp, #8]
 800a594:	46ab      	mov	fp, r5
 800a596:	784a      	ldrb	r2, [r1, #1]
 800a598:	1c4b      	adds	r3, r1, #1
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	b342      	cbz	r2, 800a5f0 <__hexnan+0x88>
 800a59e:	4610      	mov	r0, r2
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	f7ff fd95 	bl	800a0d2 <__hexdig_fun>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d151      	bne.n	800a650 <__hexnan+0xe8>
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	9905      	ldr	r1, [sp, #20]
 800a5b0:	2a20      	cmp	r2, #32
 800a5b2:	d818      	bhi.n	800a5e6 <__hexnan+0x7e>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	459b      	cmp	fp, r3
 800a5b8:	dd13      	ble.n	800a5e2 <__hexnan+0x7a>
 800a5ba:	454c      	cmp	r4, r9
 800a5bc:	d206      	bcs.n	800a5cc <__hexnan+0x64>
 800a5be:	2d07      	cmp	r5, #7
 800a5c0:	dc04      	bgt.n	800a5cc <__hexnan+0x64>
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7ff ffa8 	bl	800a51c <L_shift>
 800a5cc:	4544      	cmp	r4, r8
 800a5ce:	d952      	bls.n	800a676 <__hexnan+0x10e>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5da:	f8cd b008 	str.w	fp, [sp, #8]
 800a5de:	464c      	mov	r4, r9
 800a5e0:	461d      	mov	r5, r3
 800a5e2:	9903      	ldr	r1, [sp, #12]
 800a5e4:	e7d7      	b.n	800a596 <__hexnan+0x2e>
 800a5e6:	2a29      	cmp	r2, #41	@ 0x29
 800a5e8:	d157      	bne.n	800a69a <__hexnan+0x132>
 800a5ea:	3102      	adds	r1, #2
 800a5ec:	f8ca 1000 	str.w	r1, [sl]
 800a5f0:	f1bb 0f00 	cmp.w	fp, #0
 800a5f4:	d051      	beq.n	800a69a <__hexnan+0x132>
 800a5f6:	454c      	cmp	r4, r9
 800a5f8:	d206      	bcs.n	800a608 <__hexnan+0xa0>
 800a5fa:	2d07      	cmp	r5, #7
 800a5fc:	dc04      	bgt.n	800a608 <__hexnan+0xa0>
 800a5fe:	462a      	mov	r2, r5
 800a600:	4649      	mov	r1, r9
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff ff8a 	bl	800a51c <L_shift>
 800a608:	4544      	cmp	r4, r8
 800a60a:	d936      	bls.n	800a67a <__hexnan+0x112>
 800a60c:	f1a8 0204 	sub.w	r2, r8, #4
 800a610:	4623      	mov	r3, r4
 800a612:	f853 1b04 	ldr.w	r1, [r3], #4
 800a616:	f842 1f04 	str.w	r1, [r2, #4]!
 800a61a:	429f      	cmp	r7, r3
 800a61c:	d2f9      	bcs.n	800a612 <__hexnan+0xaa>
 800a61e:	1b3b      	subs	r3, r7, r4
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	3401      	adds	r4, #1
 800a628:	3e03      	subs	r6, #3
 800a62a:	42b4      	cmp	r4, r6
 800a62c:	bf88      	it	hi
 800a62e:	2304      	movhi	r3, #4
 800a630:	4443      	add	r3, r8
 800a632:	2200      	movs	r2, #0
 800a634:	f843 2b04 	str.w	r2, [r3], #4
 800a638:	429f      	cmp	r7, r3
 800a63a:	d2fb      	bcs.n	800a634 <__hexnan+0xcc>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	b91b      	cbnz	r3, 800a648 <__hexnan+0xe0>
 800a640:	4547      	cmp	r7, r8
 800a642:	d128      	bne.n	800a696 <__hexnan+0x12e>
 800a644:	2301      	movs	r3, #1
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	2005      	movs	r0, #5
 800a64a:	b007      	add	sp, #28
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	2d08      	cmp	r5, #8
 800a654:	f10b 0b01 	add.w	fp, fp, #1
 800a658:	dd06      	ble.n	800a668 <__hexnan+0x100>
 800a65a:	4544      	cmp	r4, r8
 800a65c:	d9c1      	bls.n	800a5e2 <__hexnan+0x7a>
 800a65e:	2300      	movs	r3, #0
 800a660:	f844 3c04 	str.w	r3, [r4, #-4]
 800a664:	2501      	movs	r5, #1
 800a666:	3c04      	subs	r4, #4
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	f000 000f 	and.w	r0, r0, #15
 800a66e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a672:	6020      	str	r0, [r4, #0]
 800a674:	e7b5      	b.n	800a5e2 <__hexnan+0x7a>
 800a676:	2508      	movs	r5, #8
 800a678:	e7b3      	b.n	800a5e2 <__hexnan+0x7a>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0dd      	beq.n	800a63c <__hexnan+0xd4>
 800a680:	f1c3 0320 	rsb	r3, r3, #32
 800a684:	f04f 32ff 	mov.w	r2, #4294967295
 800a688:	40da      	lsrs	r2, r3
 800a68a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a68e:	4013      	ands	r3, r2
 800a690:	f846 3c04 	str.w	r3, [r6, #-4]
 800a694:	e7d2      	b.n	800a63c <__hexnan+0xd4>
 800a696:	3f04      	subs	r7, #4
 800a698:	e7d0      	b.n	800a63c <__hexnan+0xd4>
 800a69a:	2004      	movs	r0, #4
 800a69c:	e7d5      	b.n	800a64a <__hexnan+0xe2>

0800a69e <__ascii_mbtowc>:
 800a69e:	b082      	sub	sp, #8
 800a6a0:	b901      	cbnz	r1, 800a6a4 <__ascii_mbtowc+0x6>
 800a6a2:	a901      	add	r1, sp, #4
 800a6a4:	b142      	cbz	r2, 800a6b8 <__ascii_mbtowc+0x1a>
 800a6a6:	b14b      	cbz	r3, 800a6bc <__ascii_mbtowc+0x1e>
 800a6a8:	7813      	ldrb	r3, [r2, #0]
 800a6aa:	600b      	str	r3, [r1, #0]
 800a6ac:	7812      	ldrb	r2, [r2, #0]
 800a6ae:	1e10      	subs	r0, r2, #0
 800a6b0:	bf18      	it	ne
 800a6b2:	2001      	movne	r0, #1
 800a6b4:	b002      	add	sp, #8
 800a6b6:	4770      	bx	lr
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	e7fb      	b.n	800a6b4 <__ascii_mbtowc+0x16>
 800a6bc:	f06f 0001 	mvn.w	r0, #1
 800a6c0:	e7f8      	b.n	800a6b4 <__ascii_mbtowc+0x16>

0800a6c2 <_realloc_r>:
 800a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	b921      	cbnz	r1, 800a6d8 <_realloc_r+0x16>
 800a6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	f7fd be6c 	b.w	80083b0 <_malloc_r>
 800a6d8:	b92a      	cbnz	r2, 800a6e6 <_realloc_r+0x24>
 800a6da:	f7fd fdf5 	bl	80082c8 <_free_r>
 800a6de:	4625      	mov	r5, r4
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e6:	f000 fa41 	bl	800ab6c <_malloc_usable_size_r>
 800a6ea:	4284      	cmp	r4, r0
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	d802      	bhi.n	800a6f6 <_realloc_r+0x34>
 800a6f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6f4:	d8f4      	bhi.n	800a6e0 <_realloc_r+0x1e>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7fd fe59 	bl	80083b0 <_malloc_r>
 800a6fe:	4680      	mov	r8, r0
 800a700:	b908      	cbnz	r0, 800a706 <_realloc_r+0x44>
 800a702:	4645      	mov	r5, r8
 800a704:	e7ec      	b.n	800a6e0 <_realloc_r+0x1e>
 800a706:	42b4      	cmp	r4, r6
 800a708:	4622      	mov	r2, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	bf28      	it	cs
 800a70e:	4632      	movcs	r2, r6
 800a710:	f7ff fc5a 	bl	8009fc8 <memcpy>
 800a714:	4629      	mov	r1, r5
 800a716:	4638      	mov	r0, r7
 800a718:	f7fd fdd6 	bl	80082c8 <_free_r>
 800a71c:	e7f1      	b.n	800a702 <_realloc_r+0x40>

0800a71e <__ascii_wctomb>:
 800a71e:	4603      	mov	r3, r0
 800a720:	4608      	mov	r0, r1
 800a722:	b141      	cbz	r1, 800a736 <__ascii_wctomb+0x18>
 800a724:	2aff      	cmp	r2, #255	@ 0xff
 800a726:	d904      	bls.n	800a732 <__ascii_wctomb+0x14>
 800a728:	228a      	movs	r2, #138	@ 0x8a
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	4770      	bx	lr
 800a732:	700a      	strb	r2, [r1, #0]
 800a734:	2001      	movs	r0, #1
 800a736:	4770      	bx	lr

0800a738 <__sfputc_r>:
 800a738:	6893      	ldr	r3, [r2, #8]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	b410      	push	{r4}
 800a740:	6093      	str	r3, [r2, #8]
 800a742:	da08      	bge.n	800a756 <__sfputc_r+0x1e>
 800a744:	6994      	ldr	r4, [r2, #24]
 800a746:	42a3      	cmp	r3, r4
 800a748:	db01      	blt.n	800a74e <__sfputc_r+0x16>
 800a74a:	290a      	cmp	r1, #10
 800a74c:	d103      	bne.n	800a756 <__sfputc_r+0x1e>
 800a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a752:	f000 b933 	b.w	800a9bc <__swbuf_r>
 800a756:	6813      	ldr	r3, [r2, #0]
 800a758:	1c58      	adds	r0, r3, #1
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	7019      	strb	r1, [r3, #0]
 800a75e:	4608      	mov	r0, r1
 800a760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <__sfputs_r>:
 800a766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a768:	4606      	mov	r6, r0
 800a76a:	460f      	mov	r7, r1
 800a76c:	4614      	mov	r4, r2
 800a76e:	18d5      	adds	r5, r2, r3
 800a770:	42ac      	cmp	r4, r5
 800a772:	d101      	bne.n	800a778 <__sfputs_r+0x12>
 800a774:	2000      	movs	r0, #0
 800a776:	e007      	b.n	800a788 <__sfputs_r+0x22>
 800a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77c:	463a      	mov	r2, r7
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ffda 	bl	800a738 <__sfputc_r>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d1f3      	bne.n	800a770 <__sfputs_r+0xa>
 800a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a78c <_vfiprintf_r>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	460d      	mov	r5, r1
 800a792:	b09d      	sub	sp, #116	@ 0x74
 800a794:	4614      	mov	r4, r2
 800a796:	4698      	mov	r8, r3
 800a798:	4606      	mov	r6, r0
 800a79a:	b118      	cbz	r0, 800a7a4 <_vfiprintf_r+0x18>
 800a79c:	6a03      	ldr	r3, [r0, #32]
 800a79e:	b90b      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x18>
 800a7a0:	f7fc fd68 	bl	8007274 <__sinit>
 800a7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7a6:	07d9      	lsls	r1, r3, #31
 800a7a8:	d405      	bmi.n	800a7b6 <_vfiprintf_r+0x2a>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	059a      	lsls	r2, r3, #22
 800a7ae:	d402      	bmi.n	800a7b6 <_vfiprintf_r+0x2a>
 800a7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7b2:	f7fc ff0a 	bl	80075ca <__retarget_lock_acquire_recursive>
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	071b      	lsls	r3, r3, #28
 800a7ba:	d501      	bpl.n	800a7c0 <_vfiprintf_r+0x34>
 800a7bc:	692b      	ldr	r3, [r5, #16]
 800a7be:	b99b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x5c>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f938 	bl	800aa38 <__swsetup_r>
 800a7c8:	b170      	cbz	r0, 800a7e8 <_vfiprintf_r+0x5c>
 800a7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7cc:	07dc      	lsls	r4, r3, #31
 800a7ce:	d504      	bpl.n	800a7da <_vfiprintf_r+0x4e>
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	b01d      	add	sp, #116	@ 0x74
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	0598      	lsls	r0, r3, #22
 800a7de:	d4f7      	bmi.n	800a7d0 <_vfiprintf_r+0x44>
 800a7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7e2:	f7fc fef3 	bl	80075cc <__retarget_lock_release_recursive>
 800a7e6:	e7f3      	b.n	800a7d0 <_vfiprintf_r+0x44>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f6:	2330      	movs	r3, #48	@ 0x30
 800a7f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9a8 <_vfiprintf_r+0x21c>
 800a7fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a800:	f04f 0901 	mov.w	r9, #1
 800a804:	4623      	mov	r3, r4
 800a806:	469a      	mov	sl, r3
 800a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80c:	b10a      	cbz	r2, 800a812 <_vfiprintf_r+0x86>
 800a80e:	2a25      	cmp	r2, #37	@ 0x25
 800a810:	d1f9      	bne.n	800a806 <_vfiprintf_r+0x7a>
 800a812:	ebba 0b04 	subs.w	fp, sl, r4
 800a816:	d00b      	beq.n	800a830 <_vfiprintf_r+0xa4>
 800a818:	465b      	mov	r3, fp
 800a81a:	4622      	mov	r2, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ffa1 	bl	800a766 <__sfputs_r>
 800a824:	3001      	adds	r0, #1
 800a826:	f000 80a7 	beq.w	800a978 <_vfiprintf_r+0x1ec>
 800a82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a82c:	445a      	add	r2, fp
 800a82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a830:	f89a 3000 	ldrb.w	r3, [sl]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 809f 	beq.w	800a978 <_vfiprintf_r+0x1ec>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a844:	f10a 0a01 	add.w	sl, sl, #1
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a850:	931a      	str	r3, [sp, #104]	@ 0x68
 800a852:	4654      	mov	r4, sl
 800a854:	2205      	movs	r2, #5
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4853      	ldr	r0, [pc, #332]	@ (800a9a8 <_vfiprintf_r+0x21c>)
 800a85c:	f7f5 fcb8 	bl	80001d0 <memchr>
 800a860:	9a04      	ldr	r2, [sp, #16]
 800a862:	b9d8      	cbnz	r0, 800a89c <_vfiprintf_r+0x110>
 800a864:	06d1      	lsls	r1, r2, #27
 800a866:	bf44      	itt	mi
 800a868:	2320      	movmi	r3, #32
 800a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a86e:	0713      	lsls	r3, r2, #28
 800a870:	bf44      	itt	mi
 800a872:	232b      	movmi	r3, #43	@ 0x2b
 800a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87e:	d015      	beq.n	800a8ac <_vfiprintf_r+0x120>
 800a880:	9a07      	ldr	r2, [sp, #28]
 800a882:	4654      	mov	r4, sl
 800a884:	2000      	movs	r0, #0
 800a886:	f04f 0c0a 	mov.w	ip, #10
 800a88a:	4621      	mov	r1, r4
 800a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a890:	3b30      	subs	r3, #48	@ 0x30
 800a892:	2b09      	cmp	r3, #9
 800a894:	d94b      	bls.n	800a92e <_vfiprintf_r+0x1a2>
 800a896:	b1b0      	cbz	r0, 800a8c6 <_vfiprintf_r+0x13a>
 800a898:	9207      	str	r2, [sp, #28]
 800a89a:	e014      	b.n	800a8c6 <_vfiprintf_r+0x13a>
 800a89c:	eba0 0308 	sub.w	r3, r0, r8
 800a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	46a2      	mov	sl, r4
 800a8aa:	e7d2      	b.n	800a852 <_vfiprintf_r+0xc6>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9103      	str	r1, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfbb      	ittet	lt
 800a8b8:	425b      	neglt	r3, r3
 800a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a8be:	9307      	strge	r3, [sp, #28]
 800a8c0:	9307      	strlt	r3, [sp, #28]
 800a8c2:	bfb8      	it	lt
 800a8c4:	9204      	strlt	r2, [sp, #16]
 800a8c6:	7823      	ldrb	r3, [r4, #0]
 800a8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ca:	d10a      	bne.n	800a8e2 <_vfiprintf_r+0x156>
 800a8cc:	7863      	ldrb	r3, [r4, #1]
 800a8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8d0:	d132      	bne.n	800a938 <_vfiprintf_r+0x1ac>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	9203      	str	r2, [sp, #12]
 800a8da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8de:	3402      	adds	r4, #2
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9b8 <_vfiprintf_r+0x22c>
 800a8e6:	7821      	ldrb	r1, [r4, #0]
 800a8e8:	2203      	movs	r2, #3
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	f7f5 fc70 	bl	80001d0 <memchr>
 800a8f0:	b138      	cbz	r0, 800a902 <_vfiprintf_r+0x176>
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	eba0 000a 	sub.w	r0, r0, sl
 800a8f8:	2240      	movs	r2, #64	@ 0x40
 800a8fa:	4082      	lsls	r2, r0
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	3401      	adds	r4, #1
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a906:	4829      	ldr	r0, [pc, #164]	@ (800a9ac <_vfiprintf_r+0x220>)
 800a908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a90c:	2206      	movs	r2, #6
 800a90e:	f7f5 fc5f 	bl	80001d0 <memchr>
 800a912:	2800      	cmp	r0, #0
 800a914:	d03f      	beq.n	800a996 <_vfiprintf_r+0x20a>
 800a916:	4b26      	ldr	r3, [pc, #152]	@ (800a9b0 <_vfiprintf_r+0x224>)
 800a918:	bb1b      	cbnz	r3, 800a962 <_vfiprintf_r+0x1d6>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	3307      	adds	r3, #7
 800a91e:	f023 0307 	bic.w	r3, r3, #7
 800a922:	3308      	adds	r3, #8
 800a924:	9303      	str	r3, [sp, #12]
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	443b      	add	r3, r7
 800a92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92c:	e76a      	b.n	800a804 <_vfiprintf_r+0x78>
 800a92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a932:	460c      	mov	r4, r1
 800a934:	2001      	movs	r0, #1
 800a936:	e7a8      	b.n	800a88a <_vfiprintf_r+0xfe>
 800a938:	2300      	movs	r3, #0
 800a93a:	3401      	adds	r4, #1
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	4619      	mov	r1, r3
 800a940:	f04f 0c0a 	mov.w	ip, #10
 800a944:	4620      	mov	r0, r4
 800a946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a94a:	3a30      	subs	r2, #48	@ 0x30
 800a94c:	2a09      	cmp	r2, #9
 800a94e:	d903      	bls.n	800a958 <_vfiprintf_r+0x1cc>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0c6      	beq.n	800a8e2 <_vfiprintf_r+0x156>
 800a954:	9105      	str	r1, [sp, #20]
 800a956:	e7c4      	b.n	800a8e2 <_vfiprintf_r+0x156>
 800a958:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95c:	4604      	mov	r4, r0
 800a95e:	2301      	movs	r3, #1
 800a960:	e7f0      	b.n	800a944 <_vfiprintf_r+0x1b8>
 800a962:	ab03      	add	r3, sp, #12
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	462a      	mov	r2, r5
 800a968:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <_vfiprintf_r+0x228>)
 800a96a:	a904      	add	r1, sp, #16
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7fb fe31 	bl	80065d4 <_printf_float>
 800a972:	4607      	mov	r7, r0
 800a974:	1c78      	adds	r0, r7, #1
 800a976:	d1d6      	bne.n	800a926 <_vfiprintf_r+0x19a>
 800a978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d405      	bmi.n	800a98a <_vfiprintf_r+0x1fe>
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	059a      	lsls	r2, r3, #22
 800a982:	d402      	bmi.n	800a98a <_vfiprintf_r+0x1fe>
 800a984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a986:	f7fc fe21 	bl	80075cc <__retarget_lock_release_recursive>
 800a98a:	89ab      	ldrh	r3, [r5, #12]
 800a98c:	065b      	lsls	r3, r3, #25
 800a98e:	f53f af1f 	bmi.w	800a7d0 <_vfiprintf_r+0x44>
 800a992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a994:	e71e      	b.n	800a7d4 <_vfiprintf_r+0x48>
 800a996:	ab03      	add	r3, sp, #12
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	462a      	mov	r2, r5
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <_vfiprintf_r+0x228>)
 800a99e:	a904      	add	r1, sp, #16
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7fc f8af 	bl	8006b04 <_printf_i>
 800a9a6:	e7e4      	b.n	800a972 <_vfiprintf_r+0x1e6>
 800a9a8:	0800ae9f 	.word	0x0800ae9f
 800a9ac:	0800aea9 	.word	0x0800aea9
 800a9b0:	080065d5 	.word	0x080065d5
 800a9b4:	0800a767 	.word	0x0800a767
 800a9b8:	0800aea5 	.word	0x0800aea5

0800a9bc <__swbuf_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	460e      	mov	r6, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	b118      	cbz	r0, 800a9ce <__swbuf_r+0x12>
 800a9c6:	6a03      	ldr	r3, [r0, #32]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <__swbuf_r+0x12>
 800a9ca:	f7fc fc53 	bl	8007274 <__sinit>
 800a9ce:	69a3      	ldr	r3, [r4, #24]
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	071a      	lsls	r2, r3, #28
 800a9d6:	d501      	bpl.n	800a9dc <__swbuf_r+0x20>
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	b943      	cbnz	r3, 800a9ee <__swbuf_r+0x32>
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 f82a 	bl	800aa38 <__swsetup_r>
 800a9e4:	b118      	cbz	r0, 800a9ee <__swbuf_r+0x32>
 800a9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	1a98      	subs	r0, r3, r2
 800a9f4:	6963      	ldr	r3, [r4, #20]
 800a9f6:	b2f6      	uxtb	r6, r6
 800a9f8:	4283      	cmp	r3, r0
 800a9fa:	4637      	mov	r7, r6
 800a9fc:	dc05      	bgt.n	800aa0a <__swbuf_r+0x4e>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7ff fa6b 	bl	8009edc <_fflush_r>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d1ed      	bne.n	800a9e6 <__swbuf_r+0x2a>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	701e      	strb	r6, [r3, #0]
 800aa18:	6962      	ldr	r2, [r4, #20]
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d004      	beq.n	800aa2a <__swbuf_r+0x6e>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d5e1      	bpl.n	800a9ea <__swbuf_r+0x2e>
 800aa26:	2e0a      	cmp	r6, #10
 800aa28:	d1df      	bne.n	800a9ea <__swbuf_r+0x2e>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f7ff fa55 	bl	8009edc <_fflush_r>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0d9      	beq.n	800a9ea <__swbuf_r+0x2e>
 800aa36:	e7d6      	b.n	800a9e6 <__swbuf_r+0x2a>

0800aa38 <__swsetup_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4b29      	ldr	r3, [pc, #164]	@ (800aae0 <__swsetup_r+0xa8>)
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	460c      	mov	r4, r1
 800aa42:	b118      	cbz	r0, 800aa4c <__swsetup_r+0x14>
 800aa44:	6a03      	ldr	r3, [r0, #32]
 800aa46:	b90b      	cbnz	r3, 800aa4c <__swsetup_r+0x14>
 800aa48:	f7fc fc14 	bl	8007274 <__sinit>
 800aa4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	d422      	bmi.n	800aa9a <__swsetup_r+0x62>
 800aa54:	06da      	lsls	r2, r3, #27
 800aa56:	d407      	bmi.n	800aa68 <__swsetup_r+0x30>
 800aa58:	2209      	movs	r2, #9
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	e033      	b.n	800aad0 <__swsetup_r+0x98>
 800aa68:	0758      	lsls	r0, r3, #29
 800aa6a:	d512      	bpl.n	800aa92 <__swsetup_r+0x5a>
 800aa6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa6e:	b141      	cbz	r1, 800aa82 <__swsetup_r+0x4a>
 800aa70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d002      	beq.n	800aa7e <__swsetup_r+0x46>
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7fd fc25 	bl	80082c8 <_free_r>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6063      	str	r3, [r4, #4]
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f043 0308 	orr.w	r3, r3, #8
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	b94b      	cbnz	r3, 800aab2 <__swsetup_r+0x7a>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aaa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaa8:	d003      	beq.n	800aab2 <__swsetup_r+0x7a>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f88b 	bl	800abc8 <__smakebuf_r>
 800aab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab6:	f013 0201 	ands.w	r2, r3, #1
 800aaba:	d00a      	beq.n	800aad2 <__swsetup_r+0x9a>
 800aabc:	2200      	movs	r2, #0
 800aabe:	60a2      	str	r2, [r4, #8]
 800aac0:	6962      	ldr	r2, [r4, #20]
 800aac2:	4252      	negs	r2, r2
 800aac4:	61a2      	str	r2, [r4, #24]
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	b942      	cbnz	r2, 800aadc <__swsetup_r+0xa4>
 800aaca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aace:	d1c5      	bne.n	800aa5c <__swsetup_r+0x24>
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
 800aad2:	0799      	lsls	r1, r3, #30
 800aad4:	bf58      	it	pl
 800aad6:	6962      	ldrpl	r2, [r4, #20]
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	e7f4      	b.n	800aac6 <__swsetup_r+0x8e>
 800aadc:	2000      	movs	r0, #0
 800aade:	e7f7      	b.n	800aad0 <__swsetup_r+0x98>
 800aae0:	20000018 	.word	0x20000018

0800aae4 <_raise_r>:
 800aae4:	291f      	cmp	r1, #31
 800aae6:	b538      	push	{r3, r4, r5, lr}
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	d904      	bls.n	800aaf8 <_raise_r+0x14>
 800aaee:	2316      	movs	r3, #22
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aafa:	b112      	cbz	r2, 800ab02 <_raise_r+0x1e>
 800aafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab00:	b94b      	cbnz	r3, 800ab16 <_raise_r+0x32>
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f830 	bl	800ab68 <_getpid_r>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab12:	f000 b817 	b.w	800ab44 <_kill_r>
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d00a      	beq.n	800ab30 <_raise_r+0x4c>
 800ab1a:	1c59      	adds	r1, r3, #1
 800ab1c:	d103      	bne.n	800ab26 <_raise_r+0x42>
 800ab1e:	2316      	movs	r3, #22
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7e7      	b.n	800aaf6 <_raise_r+0x12>
 800ab26:	2100      	movs	r1, #0
 800ab28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4798      	blx	r3
 800ab30:	2000      	movs	r0, #0
 800ab32:	e7e0      	b.n	800aaf6 <_raise_r+0x12>

0800ab34 <raise>:
 800ab34:	4b02      	ldr	r3, [pc, #8]	@ (800ab40 <raise+0xc>)
 800ab36:	4601      	mov	r1, r0
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	f7ff bfd3 	b.w	800aae4 <_raise_r>
 800ab3e:	bf00      	nop
 800ab40:	20000018 	.word	0x20000018

0800ab44 <_kill_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	@ (800ab64 <_kill_r+0x20>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	f7f7 f82b 	bl	8001bac <_kill>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d102      	bne.n	800ab60 <_kill_r+0x1c>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	b103      	cbz	r3, 800ab60 <_kill_r+0x1c>
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	20000438 	.word	0x20000438

0800ab68 <_getpid_r>:
 800ab68:	f7f7 b818 	b.w	8001b9c <_getpid>

0800ab6c <_malloc_usable_size_r>:
 800ab6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab70:	1f18      	subs	r0, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bfbc      	itt	lt
 800ab76:	580b      	ldrlt	r3, [r1, r0]
 800ab78:	18c0      	addlt	r0, r0, r3
 800ab7a:	4770      	bx	lr

0800ab7c <__swhatbuf_r>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	460c      	mov	r4, r1
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	2900      	cmp	r1, #0
 800ab86:	b096      	sub	sp, #88	@ 0x58
 800ab88:	4615      	mov	r5, r2
 800ab8a:	461e      	mov	r6, r3
 800ab8c:	da0d      	bge.n	800abaa <__swhatbuf_r+0x2e>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab94:	f04f 0100 	mov.w	r1, #0
 800ab98:	bf14      	ite	ne
 800ab9a:	2340      	movne	r3, #64	@ 0x40
 800ab9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aba0:	2000      	movs	r0, #0
 800aba2:	6031      	str	r1, [r6, #0]
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	b016      	add	sp, #88	@ 0x58
 800aba8:	bd70      	pop	{r4, r5, r6, pc}
 800abaa:	466a      	mov	r2, sp
 800abac:	f000 f848 	bl	800ac40 <_fstat_r>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	dbec      	blt.n	800ab8e <__swhatbuf_r+0x12>
 800abb4:	9901      	ldr	r1, [sp, #4]
 800abb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abbe:	4259      	negs	r1, r3
 800abc0:	4159      	adcs	r1, r3
 800abc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abc6:	e7eb      	b.n	800aba0 <__swhatbuf_r+0x24>

0800abc8 <__smakebuf_r>:
 800abc8:	898b      	ldrh	r3, [r1, #12]
 800abca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abcc:	079d      	lsls	r5, r3, #30
 800abce:	4606      	mov	r6, r0
 800abd0:	460c      	mov	r4, r1
 800abd2:	d507      	bpl.n	800abe4 <__smakebuf_r+0x1c>
 800abd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	6123      	str	r3, [r4, #16]
 800abdc:	2301      	movs	r3, #1
 800abde:	6163      	str	r3, [r4, #20]
 800abe0:	b003      	add	sp, #12
 800abe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe4:	ab01      	add	r3, sp, #4
 800abe6:	466a      	mov	r2, sp
 800abe8:	f7ff ffc8 	bl	800ab7c <__swhatbuf_r>
 800abec:	9f00      	ldr	r7, [sp, #0]
 800abee:	4605      	mov	r5, r0
 800abf0:	4639      	mov	r1, r7
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7fd fbdc 	bl	80083b0 <_malloc_r>
 800abf8:	b948      	cbnz	r0, 800ac0e <__smakebuf_r+0x46>
 800abfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfe:	059a      	lsls	r2, r3, #22
 800ac00:	d4ee      	bmi.n	800abe0 <__smakebuf_r+0x18>
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	f043 0302 	orr.w	r3, r3, #2
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	e7e2      	b.n	800abd4 <__smakebuf_r+0xc>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	6020      	str	r0, [r4, #0]
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac1e:	b15b      	cbz	r3, 800ac38 <__smakebuf_r+0x70>
 800ac20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac24:	4630      	mov	r0, r6
 800ac26:	f000 f81d 	bl	800ac64 <_isatty_r>
 800ac2a:	b128      	cbz	r0, 800ac38 <__smakebuf_r+0x70>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	f043 0301 	orr.w	r3, r3, #1
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	431d      	orrs	r5, r3
 800ac3c:	81a5      	strh	r5, [r4, #12]
 800ac3e:	e7cf      	b.n	800abe0 <__smakebuf_r+0x18>

0800ac40 <_fstat_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d07      	ldr	r5, [pc, #28]	@ (800ac60 <_fstat_r+0x20>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	f7f7 f80d 	bl	8001c6c <_fstat>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d102      	bne.n	800ac5c <_fstat_r+0x1c>
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	b103      	cbz	r3, 800ac5c <_fstat_r+0x1c>
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000438 	.word	0x20000438

0800ac64 <_isatty_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4d06      	ldr	r5, [pc, #24]	@ (800ac80 <_isatty_r+0x1c>)
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	602b      	str	r3, [r5, #0]
 800ac70:	f7f7 f80c 	bl	8001c8c <_isatty>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_isatty_r+0x1a>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_isatty_r+0x1a>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20000438 	.word	0x20000438

0800ac84 <_init>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	bf00      	nop
 800ac88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8a:	bc08      	pop	{r3}
 800ac8c:	469e      	mov	lr, r3
 800ac8e:	4770      	bx	lr

0800ac90 <_fini>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr
